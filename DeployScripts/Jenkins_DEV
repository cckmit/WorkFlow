#!/usr/bin/env groovy
node {

    def COMPANY = "TP"
    def ENVIRONMENT = "DEV"
    def BUILD_PROFILE = "${COMPANY}_${ENVIRONMENT}"

    def GIT_URL = "ssh://vhldvztdt001.tvlport.net:8445/dev/WorkFlow.git"

    def POM_VERSION 
    def BUILD_COUNT = 6
    def BUILD_PATH = "/opt/delivery/release/WF/${ENVIRONMENT}/${COMPANY}"

    properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', numToKeepStr: '10')), disableConcurrentBuilds(), pipelineTriggers([])])

    stage ('Checkout') {
        deleteDir()
        checkout scm
        def pom = readMavenPom file: 'pom.xml'
        POM_VERSION = pom.version
    }

    stage ('Clean') {
        sh "JAVA_HOME=/usr/java/default; /opt/apache-maven-3.3.9/bin/mvn clean"
    }

    stage ('Install') {
        sh """
           JAVA_HOME=/usr/java/default;
           /opt/apache-maven-3.3.9/bin/mvn install:install-file -Dfile=Derived/TOSIBM/TOSApi_1.2.6.jar \
                                                                -DgroupId=com.ibm.tpf \
                                                                -DartifactId=TOSApi \
                                                                -Dversion=1.2.06 \
                                                                -Dpackaging=jar
        """
    }

    stage ('Compile and Testing') {
        sh """
           JAVA_HOME=/usr/java/default;
           /opt/apache-maven-3.3.9/bin/mvn -P${BUILD_PROFILE} -Dbuild.number=${BUILD_NUMBER} \
                                                              -DskipTests=false compile install -fn
        """
    }

    stage ('SonarQube ') {
        withSonarQubeEnv('SonarQube6.0') {
            sh '/opt/apache-maven-3.3.9/bin/mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar'
        }
    }

    stage ('Packaging') {
        sh(returnStdout: true, script: 'git reset --hard').trim()
        sh """
           JAVA_HOME=/usr/java/default;
           /opt/apache-maven-3.3.9/bin/mvn -P${BUILD_PROFILE} -Dbuild.number=${BUILD_NUMBER} \
                                                              -DskipTests=true package
        """
        sh(returnStdout: true, script: 'git reset --hard').trim()
    }

    stage ('Bundle') {
        sh """
           mkdir -p ${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/
           rm `ls -dt '${BUILD_PATH}/'* | tail -n +'${BUILD_COUNT}'` -rf
           # File copy to release path
           cp TOSAutomation/target/TOSAutomation*dependencies.jar '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/TOSAutomation.jar'
           cp UI/target/WorkFlowUI*.war '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/WorkFlow.war'
           cp JGITAPI/target/JGITAPI*.war '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/JGitAPI.war'
           cp API/target/WorkFlowAPI*.war '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/WorkFlowAPI.war'
           cp ShellScripts/target/ShellScripts*.jar '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/ShellScripts.jar'
           cp Jenkins/target/Jenkins*.jar '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/Jenkins.jar'
           cp BPM/target/WorkFlow*.bar '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/'
           cp ConfigGenerator/target/ConfigGenerator*dependencies.jar '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/ConfigGenerator.jar'
           cp RepoReconsile/target/RepoReconsile*dependencies.jar '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/RepoReconsile.jar'
           cp GBLDAPAuthenticator/target/GBLDAPAuthenticator*dependencies.jar '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/tp-gitblit.jar'
           cp Derived/GITCFG/${BUILD_PROFILE}/*.properties '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/'
           cp pom.xml '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/pom.xml'
           cp DeployScripts/install.sh '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/'
           cp DeployScripts/config.sh '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/'
		   rm -Rf /var/www/html/docs/WF/${POM_VERSION}
		   mkdir -p /var/www/html/docs/WF/${POM_VERSION}/WorkFlow /var/www/html/docs/WF/${POM_VERSION}/WorkFlowAPI /var/www/html/docs/WF/${POM_VERSION}/JGITAPI /var/www/html/docs/WF/${POM_VERSION}/TOSAutomation /var/www/html/docs/WF/${POM_VERSION}/RepoReconsile
		   cp -a target/apidocs/. /var/www/html/docs/WF/${POM_VERSION}/WorkFlow/
		   cp -a API/target/apidocs/. /var/www/html/docs/WF/${POM_VERSION}/WorkFlowAPI/
		   cp -a JGITAPI/target/apidocs/. /var/www/html/docs/WF/${POM_VERSION}/JGITAPI/
		   cp -a TOSAutomation/target/apidocs/. /var/www/html/docs/WF/${POM_VERSION}/TOSAutomation/
		   cp -a RepoReconsile/target/apidocs/. /var/www/html/docs/WF/${POM_VERSION}/RepoReconsile/
		   chmod 755 -R /var/www/html/docs/WF/${POM_VERSION}
        """
    }
    
    stage ("Build Verification") {
        sh "unzip -p '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/WorkFlow.war' js/config.js | grep apiBase"
    }
    
    stage ('Tagging') {
        withCredentials([
        usernamePassword(credentialsId: '80b50f11-b5d5-4093-b4f9-70ee5fe0e88a', passwordVariable: 'SRV_PASS', usernameVariable: 'SRV_USER')]) 
        {
            def branch = env.BRANCH_NAME
            //def gitUrl = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
            //echo gitUrl
            echo GIT_URL
            def SRV_PWD = pwd()
            sh """
sshpass -p $SRV_PASS ssh -o StrictHostKeyChecking=no -l $SRV_USER vhldvztdt001.tvlport.net << EOF
git clone -b $branch --single-branch ${GIT_URL} /tmp/${ENVIRONMENT}/tmp_Workflow;
pushd /tmp/${ENVIRONMENT}/tmp_Workflow;
git pull --tags
echo -e "Deployment Content for the ${ENVIRONMENT} build v${POM_VERSION}_${BUILD_NUMBER} (Diff from Last Stable Build)\n\nCommit ID\tJira #\tDescription & Committer\n\n" > dmail.txt
echo -e "Release Content for the ${ENVIRONMENT} build v${POM_VERSION}_${BUILD_NUMBER} (Diff from Last Production)\n\nCommit ID\tJira #\tDescription & Committer\n\n" > rmail.txt
git log --oneline --no-merges --pretty=format:'%+h %s by %cn' Stable_DEV..$branch &>> dmail.txt
git log --oneline --merges --pretty=format:'%+h %s by %cn' Snapshot_TP_PROD..$branch | grep Merged &>> rmail.txt
cat dmail.txt | mail -s "${BUILD_PROFILE}_BUILD: v${POM_VERSION}_${BUILD_NUMBER}" tsi.devops@tpfsoftware.com
cat rmail.txt | mail -s "${BUILD_PROFILE}_RELEASE: v${POM_VERSION}_${BUILD_NUMBER}" tsi.devops@tpfsoftware.com
cp dmail.txt '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/deliveryMail.txt'
cp rmail.txt '${BUILD_PATH}/${POM_VERSION}_${BUILD_NUMBER}/releaseMail.txt'
git tag -d Snapshot_${ENVIRONMENT};
git push origin :refs/tags/Snapshot_${ENVIRONMENT};
git tag -a Snapshot_${ENVIRONMENT} -m ZTPFM-0000-DeployedIn${ENVIRONMENT};
git push --tags;
popd
rm /tmp/${ENVIRONMENT}/tmp_Workflow -Rf;
EOF
            """
        }
    }
}
