#!/bin/bash
# shellcheck disable=SC2206,SC2207,SC1117,SC2034,SC2179,SC2164
#*****************************************************************************#
#   SCRIPT NAME: mtpgitcreatestgcfg                                           #
#                                                                             #
#   DESCRIPTION:                                                              #
#      Script to generate the configuration file and compile/build in         #
#      STG Workspace for TPF Project                                          #
#                                                                             #
#   NOTE: Don't alter CONSOLE messages                                        #
#                                                                             #
#   INPUT:                                                                    #
#      $1  - Implementation plan with load date info                          #
#      $2  - PUT Level of the plan                                            #
#      $3  - STG Dependancy                                                   #
#                                                                             #
#   OUTPUT:                                                                   #
#      exit with 0, successfull process                                       #
#      exit with 8, error message                                             #
#                                                                             #
#*****************************************************************************#
#*****************************************************************************#
#                                                                             #
#                            M A I N T E N A N C E                            #
#                                                                             #
#-----------------------------------------------------------------------------#
#   MMDDYYYY    INIT         COMMENT                                          #
#   --------    ----------   -------------------------------------------------#
#   06092017    NARASHIMAN   created the script                               #
#   11092017    ARUL         Update with local support                        #
#   12052017    ARUL         Update with dependancy reference                 #
#   01262018    ARUL         Update C and CPP FALG requirement change         #
#   05022018    ARUL         Update FCTB force compile .MAK exception         #
#   05182018    ARUL         Update GIT call Re-try                           #
#   07132018    ARUL         Sabre Talk Compilation warning excluded          #
#   08032018    ARUL         Update FCTB force compile to all systems         #
#   08302018    ARUL         Update same load date dependancy fix             #
#   09122018    VINOTH       Handle Lock with ImplPlan num for cancel button  #
#   09132018    ARUL         Handle no MAK or no CNTL entry                   #
#   18022019    VINOTH       Updated dvl build code for DEVL and PROD         #
#   04052019    VINOTH       Multiple sabre-talk complie                      #
#   04092019    VINOTH       Removing lock which used to run sequence process #
#   05102019    VINOTH       Unresolved reference compilation change          #
#   04252019    GOWTHAM      Updated with logger support                      #
#   09052019    VINOTH       lock to handle one at the one time for build     #
#   09052019    ARUL         Updated with derived repo clean-up to remove old #
#   09132019    ARUL         Updated to support MAKETPF compilation CPU limit #
#   09262019    VINOTH       Error file ignorance corrected                   #
#   09302019    VINOTH       Improved error message at JSON response          #
#   02042020    ARUL         Updated to support invalid HFS at first line     #
#   03052020    VINOTH       DerivedLFS decoupled in stg script and timely    #
#   03172020    VINOTH       Update HFS at first line issue to check null data#
#   03182020    VINOTH       put TPF_ROOT not updated := due to not validate  #
#*****************************************************************************#
#unset MTP_ENV                          #DEBUG
#source "${MTP_ENV:=$PWD}/.mtpconfig"
# shellcheck disable=1090
source "${MTP_ENV:=$PWD}/mtplibrary"
#-----------------------------------------------------------------------------#
declare -i _MiIP=4;                    #Expected number of input parms
declare -i _ReIP="$#";                 #Received number of input parms
#
implementation="$1";                   #Implementation plan with load date info
implPutLevel="$2";                     #PUT Level of the plan
putStatus="$3";                        #Check Put status for confirm dev or prod
implDependancyDvl="";                  #Devel dependancy not required
implDependancyStg="$4";                #Dependancy plan list for the stg build
#
SPID=$$; #To get process id of the script
SPNM=$0; #To get script name
startDate=$(date +%Y%m%d%H%M%S);
minInputValidation "${_MiIP}" "${_ReIP}"; RC="$?";
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Start ${implementation} ${implPutLevel} ${putStatus} ${implDependancyDvl} ${implDependancyStg} RC:$RC"
#
#-----------------------------------------------------------------------------#
function autoFixConfig {
  local _RC=0;
  local _execDate;
  local _taskDate;
  local _syslineNo;
  local _applineNo;
  local _sysPtr;
  local _appPtr;
  local _sysDir;
  local _appDir;
  if [ -f "maketpf.cfg" ]; then
    _execDate=$(date +%-S)
    _taskDate=$(date +%-S)
    _syslineNo=($(grep -n '^TPF_ROOT :\|#TPF_ROOT ' maketpf.cfg | cut -d : -f 1 ))
    _sysPtr="${_syslineNo[0]}"
    _sysDir=($(grep -n '^TPF_ROOT :\|#TPF_ROOT ' maketpf.cfg | cut -d : -f 3 | cut -d ' ' -f 2))
    if [ ! -d "${_sysDir}" ] && [ -n "${_syslineNo}" ]; then
      sed -i "${_sysPtr}s/./#T/1" maketpf.cfg      #Replace exiting + symbol
      sed -i "$((_sysPtr=_sysPtr + 1))s/./:/10" maketpf.cfg      #Replace exiting + symbol
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Configured file updated by removing invalid first TPF_ROOT HFS - $(($(date +%-S)-_taskDate))s"
    fi
    _taskDate=$(date +%-S)
    _applineNo=($(grep -n '^APPL_ROOT :\|#APPL_ROOT ' maketpf.cfg | cut -d : -f 1 ))
    _appPtr="${_applineNo[0]}"
    _appDir=($(grep -n '^APPL_ROOT :\|#APPL_ROOT ' maketpf.cfg | cut -d : -f 3 | cut -d ' ' -f 2))
    if [ ! -d "${_appDir}" ] && [ -n "${_applineNo}" ] ; then
      sed -i "${_appPtr}s/./#T/1" maketpf.cfg      #Replace exiting + symbol
      sed -i "$((_appPtr=_appPtr + 1))s/./:/10" maketpf.cfg      #Replace exiting + symbol
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Configured file updated by removing invalid first APPL_ROOT HFS - $(($(date +%-S)-_taskDate))s"
    fi
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf.cfg configured file updated by removing invalid first HFS - $(($(date +%-S)-_execDate))s"
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf.cfg not found for HFS validation RC:$EC"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf.cfg not found for HFS validation";
    _RC="${EC}";
  fi
  return "${_RC}";
}
#-----------------------------------------------------------------------------#
function unResolved {
  local _RC=0;
  local _unresolveFiles;
  local _unresolveVaribs;
  local _resolveMaks;
  local _execDate;                     #Execution block timestamp
  local _taskDate;                     #Execution task execution timestamp
  local _submDate;                     #Subtask execution timestamp
  _execDate=$(date +%-S)
  _unresolveFiles=($(find . -type f | grep unresolved_references))            #unresolved files
  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Unresolved references post processing..."
  if [ -n "${_unresolveFiles[0]// /}" ]; then
    if [ -f "unresolved_mak" ]; then
      rm -f unresolved_mak;
    fi
    for _errReso in "${_unresolveFiles[@]}";
    do
      _unsrcName=${_errReso##*/};
      _unResName=${_unsrcName%%.*};
      _unresolveFile=($(sort -u "${_errReso}"))                         #list of issue variables files
      for _unresVar in "${_unresolveFile[@]}";
      do
        _unRefCmpl=($(find . -type f \( -name "*.c" -o -name "*.cpp" -o -name "*.asm" \) -exec grep -l "${_unresVar}" {} + | grep -v "${_unResName,,}"))
        for _unResmak in "${_unRefCmpl[@]}";
        do
          _makunRes="${_unResmak##*/}";                                       #ignore source make file.
          _makeFile=($(find . -type f -iname "*.mak" -exec grep -l "${_makunRes}" {} + ))
          echo -e "${_makeFile[*]}" >> unresolved_mak
        done
        if [ -f "unresolved_mak" ]; then
          _taskDate=$(date +%-S)
          _resolveMak=($(uniq "unresolved_mak" | tr '\n' ' '))
          for _makUnlink in "${_resolveMak[@]}"
          do
            _submDate=$(date +%-S)
            makeSeg="${_makUnlink##*/}"
            if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
              nice -"${TPF_CPU_NICE}" maketpf "${makeSeg}" link TPF_VERIFY_LINK_REFS=NO; _RC=$?;
              if [ "${_RC}" -eq 20 ]; then
                autoFixConfig;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf ${makeSeg} link TPF_VERIFY_LINK_REFS=NO"
                nice -"${TPF_CPU_NICE}" maketpf "${makeSeg}" link TPF_VERIFY_LINK_REFS=NO; _RC=$?;
              fi
            else
              maketpf "${makeSeg}" link TPF_VERIFY_LINK_REFS=NO; _RC=$?;
              if [ "${_RC}" -eq 20 ]; then
                autoFixConfig;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf ${makeSeg} link TPF_VERIFY_LINK_REFS=NO"
                maketpf "${makeSeg}" link TPF_VERIFY_LINK_REFS=NO; _RC=$?;
              fi
            fi
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PRE Recompilation ${makeSeg} with TPF_VERIFY_LINK_REFS=NO flag completed RC:${_RC} - $(($(date +%-S)-_submDate))s"
          done
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PRE Recompilation for all unresolved reference source completed RC:${_RC} - $(($(date +%-S)-_taskDate))s"
          if [ "${_RC}" -eq 0 ]; then
            _taskDate=$(date +%-S)
            if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
              nice -"${TPF_CPU_NICE}" maketpf "${_unResName,,}.mak" link TPF_VERIFY_LINK_REFS=NO; _RC=$?;
              if [ "${_RC}" -eq 20 ]; then
                autoFixConfig;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf ${_unResName,,}.mak link TPF_VERIFY_LINK_REFS=NO"
                nice -"${TPF_CPU_NICE}" maketpf "${_unResName,,}.mak" link TPF_VERIFY_LINK_REFS=NO; _RC=$?;
              fi
            else
              maketpf "${_unResName,,}.mak" link TPF_VERIFY_LINK_REFS=NO; _RC=$?;
              if [ "${_RC}" -eq 20 ]; then
                autoFixConfig;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf ${_unResName,,}.mak link TPF_VERIFY_LINK_REFS=NO"
                maketpf "${_unResName,,}.mak" link TPF_VERIFY_LINK_REFS=NO; _RC=$?;
              fi
            fi
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PRE Recompilation ${_unResName,,}.mak with TPF_VERIFY_LINK_REFS=NO flag completed RC:${_RC} - $(($(date +%-S)-_taskDate))s"
            if [ "${_RC}" -eq 0 ]; then
              _taskDate=$(date +%-S)
              for _makUnlink in "${_resolveMak[@]}"
              do
                _submDate=$(date +%-S)
                makeSeg="${_makUnlink##*/}"
                if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
                  nice -"${TPF_CPU_NICE}" maketpf "${makeSeg}" link; _RC=$?;
                  if [ "${_RC}" -eq 20 ]; then
                    autoFixConfig;
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf ${makeSeg} link"
                    nice -"${TPF_CPU_NICE}" maketpf "${makeSeg}" link; _RC=$?;
                  fi
                else
                  maketpf "${makeSeg}" link; _RC=$?;
                  if [ "${_RC}" -eq 20 ]; then
                    autoFixConfig;
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf ${makeSeg} link"
                    maketpf "${makeSeg}" link; _RC=$?;
                  fi
                fi
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: POST Recompilation ${makeSeg} without TPF_VERIFY_LINK_REFS=NO flag completed RC:${_RC} - $(($(date +%-S)-_submDate))s"
              done
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: POST Recompilation for all source without TPF_VERIFY_LINK_REFS=NO flag completed RC:${_RC} - $(($(date +%-S)-_taskDate))s"
              _taskDate=$(date +%-S)
              if [ "${_RC}" -eq 0 ]; then
                if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
                  nice -"${TPF_CPU_NICE}" maketpf "${_unResName,,}.mak" link; _RC=$?
                  if [ "${_RC}" -eq 20 ]; then
                    autoFixConfig;
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf ${_unResName,,}.mak link"
                    nice -"${TPF_CPU_NICE}" maketpf "${_unResName,,}.mak" link; _RC=$?
                  fi
                else
                  maketpf "${_unResName,,}.mak" link; _RC=$?
                  if [ "${_RC}" -eq 20 ]; then
                    autoFixConfig;
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf ${_unResName,,}.mak link"
                    maketpf "${_unResName,,}.mak" link; _RC=$?
                  fi
                fi
              fi
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: POST Recompilation ${_unResName,,}.mak without TPF_VERIFY_LINK_REFS=NO flag completed RC:${_RC} - $(($(date +%-S)-_taskDate))s"
            fi
          fi
          if [ "${_RC}" -ne 0 ]; then
            errorMesUn+="${_errReso} "
          fi
          rm -f unresolved_mak;
        else
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Unresolved references NOT FOUND post process completed RC:${_RC} - $(($(date +%-S)-_execDate))s"
        fi
      done
    done
    if [ -n "${errorMesUn[0]// /}" ]; then
      errorMesUnres="Unresolved_references found and are unable to process ${errorMesUn[*]}"
      _RC=${EC};
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Unresolved references FOUND post process completed RC:${_RC} - $(($(date +%-S)-_execDate))s"
    fi
  fi
  return "${_RC}"
}
#-----------------------------------------------------------------------------#
# Sabre talk compilation
function sabrCompile {
  local _RC=0;
  local sbtList;
  local sabreSeg;
  local _RcValue;
  local _execDate;                     #Execution block timestamp
  local _taskDate;                     #Execution task execution timestamp
  local _submDate;                     #Subtask execution timestamp
  # Searching sabre Segments in Dvl WorkSpace
  sbtList=( $(find . -type f -name "*.sbt") )
  #Process Sabre Talk Segments
  if [ -n "${sbtList[0]// /}" ]; then
    if [ ! -d lst ] && [ ! -d sbtasm ]; then
      mkdir -m 777 lst sbtasm
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Pre-process to create LST and SBTASM directory with Global Read-Write permission completed"
    fi
    if [[ "${sabreIncLib}" != NULL ]]; then
      sabreIncLib="${sabreIncLib//\,/ }";       #Sabre include value
      _Inclibs=(${sabreIncLib});
      IFS=' '
      if [ -n "${_Inclibs[0]// /}" ]; then
        for (( i=0; i<${#_Inclibs[*]}; i++));
        do
          _sabreInc="${_sabreInc}:${_Inclibs[i]}";     #Append selected values in sabre incs
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: zOS library ${_Inclibs[i]} verified and apended to DevOps compilation utility";
        done
        _sabreInccomp="${_sabreInc#:*}";     #remove ':' from beginning
      fi
      unset IFS
    fi
    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Sabre Talk compilation started RC:$RC"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sabre Talk compilation started.";
    if [[ -f "${SAB_DEV_COM}" ]]; then
	    for sabreMul in "${sbtList[@]}";
      do
        if [[ "${sabreMul}" =~ ./src ]]; then
          sbtSegms="${sabreMul##*/}";
          sbtSegcom+="${sbtSegms},";
        fi
        sbtFinalLst="${sbtSegcom%*,}";
      done
      _execDate=$(date +%-S)
      "${SAB_DEV_COM}" "${USR_IMPL_CORE,,}" "${StgPath}src/${sbtFinalLst}" "${StgPath}" | tee sabre.tmp
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: All the SBT files submitted to z/OS for compilation - $(($(date +%-S)-_execDate))s"
      if [ -f "sabre.tmp" ]; then
        #shellcheck disable=SC2002
        _RcValue="$(cat sabre.tmp | tail -1)";
        if [[ "${_RcValue}" =~ "OUTPUT:" ]]; then
          _RcValue="${_RcValue#OUTPUT:*}";
          #RC=ABCD.sbt=0,EFGH.sbt=0,AB12.sbt=12,AJAH.sbt=8,JKHD.sbt=0,OIOK.sbt=12,JHSS.sbt=0,JHS4.sbt=4
          # if [[ "${_RcValue}" =~  =12|=8 ]]; then
          #   _RcValue="${_RcValue#OUTPUT:*}";
          #   #RC=ABCD.sbt=0,EFGH.sbt=0,AB12.sbt=12,AJAH.sbt=8,JKHD.sbt=0,OIOK.sbt=12,JHSS.sbt=0,JHS4.sbt=4
            if [[ "${_RcValue}" =~  =12|=8|=20|=-255 ]]; then
              IFS=',' read -r -a _rcuniq <<< "${_RcValue}"
              for ((i=0;i<"${#_rcuniq[@]}";i++))
              do
                if [[ "${_rcuniq[i]}" =~ =8|=12|=20|=-255 ]]; then
                  errorsbt+="${_rcuniq[i]},";
                fi
              done
              unset IFS
              sabreErr="$(date +"%Y-%m-%d %H:%M:%S") ERROR: STG Build failed, Sabretalk Compilation failed in zOS ${errorsbt} Refer to lst(s) for more details"
              echo -e "${sabreErr}";
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${sabreErr} RC:$EC"
              buildMSG="${USR_IMPL_PLAN^^}: Sabretalk pre-compile in zOS has failed for ${errorsbt} from ${USR_IMPL_CORE}. Refer to lst(s) for more details"
              sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
              _RC=${EC};
              [ -f sabre.tmp ] && rm -f sabre.tmp;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Sabretalk pre-compile in zOS has failed for ${errorsbt} from ${USR_IMPL_CORE} - $(($(date +%-S)-_execDate))s"
            else
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sabretalk Compilation Success in zOS ${_RcValue}."
              buildMSG="${USR_IMPL_PLAN^^}: Sabretalk pre-compile in zOS has completed for ${USR_IMPL_CORE}"
              sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
              _RC="$RC";
              [ -f sabre.tmp ] && rm -f sabre.tmp;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sabretalk pre-compile in zOS has completed for ${USR_IMPL_CORE} - $(($(date +%-S)-_execDate))s"
            fi
          #else
          #  sabreErr="ERROR: Sabretalk Compilation output comes with invalid format form zOS for ${USR_IMPL_PLAN}-${USR_IMPL_CORE}"
          #  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${sabreErr} RC:$EC"
          #  echo -e "${sabreErr}";
          #  buildMSG="${USR_IMPL_PLAN^^}: Sabretalk pre-compile in zOS has failed for ${errorsbt} from ${USR_IMPL_CORE}. Refer to lst(s) for more details"
          #  sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
          #  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Sabretalk Compilation output comes with invalid format form zOS ${StgPath} RC:$EC"
          #  _RC=${EC};
          #fi
        else
          sabreErr="$(date +"%Y-%m-%d %H:%M:%S") ERROR: Sabretalk Compilation output comes with invalid format form zOS for ${USR_IMPL_PLAN}-${USR_IMPL_CORE}"
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${sabreErr} RC:$EC"
          echo -e "${sabreErr}";
          buildMSG="${USR_IMPL_PLAN^^}: Sabretalk Compilation output comes with invalid format form zOS for ${USR_IMPL_CORE}"
          sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Sabretalk Compilation output comes with invalid format form zOS ${StgPath} RC:$EC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Sabretalk Compilation output comes with invalid format form zOS ${StgPath} - $(($(date +%-S)-_execDate))s"
          _RC=${EC};
        fi
      else
        sabreErr="$(date +"%Y-%m-%d %H:%M:%S") ERROR: DVL build compilation file not found at ${StgPath} to summarize the output. Please contact zTPF DevOps Support."
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:DVL build compilation file not found at ${StgPath} to summarize the output. Please contact zTPF DevOps Support RC:$EC"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: DVL build compilation file not found at ${StgPath} to summarize the output. Please contact zTPF DevOps Support."
        _RC=${EC};
      fi
      [ -f sabre.tmp ] && rm -f sabre.tmp;
    else
      sabreErr="$(date +"%Y-%m-%d %H:%M:%S") ERROR: Sabretalk Compilation Utility (${SAB_DEV_COM}) is not available in zlinux. Please contact zTPF DevOps Support."
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Sabretalk Compilation Utility (${SAB_DEV_COM}) is not available in zlinux. Please contact zTPF DevOps Support.";
      _RC=${EC};
    fi
  fi
  return "${_RC}"
}
#-----------------------------------------------------------------------------#
# TPF ccompilation
function tpfBuild {
  local _RC=0;
  local _tpfarEr=0;
  local cpList;
  local _cpFile;
  local _cpName;
  local cppList;
  local _cppFile;
  local _cppName;
  local asmList;
  local _asmFile;
  local _asmName;
  local _arSegment;
  local _arNomore;
  local compList;
  local makList;
  local fdt;
  local cppPresult;
  local makPresult;
  local asmPresult;
  local cPresult;
  local _execDate;                     #Execution block timestamp
  local _taskDate;                     #Execution task execution timestamp
  local _submDate;                     #Subtask execution timestamp
  local _libsFile=();                   #LIBS Error files
#Load warning exclude list
  warningExclude;
#force complie .CPP segmentss-------------------------------------------------#
  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:TPF build process initiated RC:$_RC"
  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: TPF build process initiated..."
  cpList=( $(find . -type f -name "*.c") );
#Process WSP TPFAR segments---------------------------------------------------#
  if [[ "${USR_IMPL_CORE,,}" == "wsp" ]]; then
    _execDate=$(date +%-S)
    cpList=( $(find . -type f -name "*.c" | sed "s|^\./src/||") );
    if [ "${cpList[0]}" != '' ]; then
      for((i=0; i<${#cpList[*]}; i++));
      do
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
        if [[ ! "${cpList[i]}" =~ derived/ ]] && [[ ! "${cpList[i]}" =~ tpfarc/ ]]; then #Exclude if it's from derived
          _cpFile="${cpList[i]##*/}";
          _cpName="${_cpFile%%.*}";
          _arSegment=( $(grep -w "${_cpName^^}" "${TPF_TPS}/tpfar.segments" | cut -d" " -f1 ) );
          _arNomore=( $(grep -w "${_cpName^^}" "${TPF_TPS}/tpfar.no_more" | cut -d" " -f1 ) );
          if [[ "${_arSegment[0]}" != '' ]] && [[ "${_arNomore[0]}" == '' ]]; then
            _taskDate=$(date +%-S)
            rexec -l "${TPFAR_WSP_USER}" -p "${TPFAR_WSP_SSAL}" "${TPFAR_WSP_HOST}" "${SUP_TPF_TPFAR}" -P"${APP_STG_IMPL_CWRK}src/${cpList[i]#*/}" -L"${APP_STG_IMPL_CWRK}" -U"${MTP_SUSR}" -Z"$(hostname)" -DDB2T -RY -V"${implementation%%_*}" -FTK; _RC=$?;
            if [ "${_RC}" -le 4 ]; then
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: REXX DB2T TPFAR success for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - $(($(date +%-S)-_taskDate))s"
              _taskDate=$(date +%-S)
              rexec -l "${TPFAR_WSP_USER}" -p "${TPFAR_WSP_SSAL}" "${TPFAR_WSP_HOST}" "${SUP_TPF_TPFAR}" -P"${APP_STG_IMPL_CWRK}src/${cpList[i]#*/}" -L"${APP_STG_IMPL_CWRK}" -U"${MTP_SUSR}" -Z"$(hostname)" -DDB2A -RN -V"${implementation%%_*}" -FTK; _RC=$?;
            else
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:REXX DB2T TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]} >> ${_cpName^^}.err RC:$EC"
              echo -e "\\nERROR: REXX DB2T TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]}" >> "${_cpName^^}.err";
              _tpfarEr=$((_tpfarEr + 1));
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: REXX DB2T TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - $(($(date +%-S)-_taskDate))s"
            fi
            if [ "${_RC}" -eq 0 ]; then
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: REXX DB2A TPFAR success for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - $(($(date +%-S)-_taskDate))s"
              _taskDate=$(date +%-S)
              rexec -l "${TPFAR_WSP_USER}" -p "${TPFAR_WSP_SSAL}" "${TPFAR_WSP_HOST}" "${SUP_TPF_TPFAR}" -P"${APP_STG_IMPL_CWRK}src/${cpList[i]#*/}" -L"${APP_STG_IMPL_CWRK}" -U"${MTP_SUSR}" -Z"$(hostname)" -DDB2B -RN -V"${implementation%%_*}" -FTK; _RC=$?;
            else
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:REXX DB2A TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]} >> ${_cpName^^}A.err RC:$EC"
              echo -e "\\nERROR: REXX DB2A TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]}" >> "${_cpName^^}A.err";
              _tpfarEr=$((_tpfarEr + 1));
              echo -e ":$(date +"%Y-%m-%d %H:%M:%S") ERROR: REXX DB2A TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - $(($(date +%-S)-_taskDate))s"
            fi
            if [ "${RC}" == 0 ]; then
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: REXX DB2B TPFAR success for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - $(($(date +%-S)-_taskDate))s"
              _taskDate=$(date +%-S)
              rexec -l "${TPFAR_WSP_USER}" -p "${TPFAR_WSP_SSAL}" "${TPFAR_WSP_HOST}" "${SUP_TPF_TPFAR}" -P"${APP_STG_IMPL_CWRK}src/${cpList[i]#*/}" -L"${APP_STG_IMPL_CWRK}" -U"${MTP_SUSR}" -Z"$(hostname)" -DDB2P -RN -V"${implementation%%_*}" -FTK; _RC=$?;
              buildMSG="${USR_IMPL_PLAN^^}: TPFAR pre-compile in zOS has completed for ${USR_IMPL_CORE}"
              sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
            else
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:REXX DB2B TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - PRE COMPILE >> ${_cpName^^}P.err RC:$EC"
              echo -e "\\nERROR: REXX DB2B TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - PRE COMPILE" >> "${_cpName^^}P.err";
              _RC="${EC}";
              _tpfarEr=$((_tpfarEr + 1));
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: RPRE COMPILE REXX DB2B TPFAR failed for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - $(($(date +%-S)-_taskDate))s"
            fi
            if [ "${_RC}" -le 4 ]; then
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: REXX DB2P TPFAR success for ${APP_STG_IMPL_CWRK}src/${cpList[i]} - $(($(date +%-S)-_taskDate))s"
              compList=($(find . -type f -name "*.mak" -exec grep -l "${cpList[i]##*/}" {} +));
              if [ "${compList[0]}" != '' ]; then #For component segments
                _taskDate=$(date +%-S)
                if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o with CPU priority RC:$_RC"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} ${_cpName}.o with CPU priority";
                  cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
                  echo -e "${cPresult}\\n";
                  if [ "${_RC}" -eq 20 ]; then
                    autoFixConfig;
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cpFile} ${_cpName}.o"
                    cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
                    echo -e "${cPresult}\\n";
                  fi
                else
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o RC:$_RC"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} ${_cpName}.o";
                  cPresult=$(maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
                  echo -e "${cPresult}\\n";
                  if [ "${_RC}" -eq 20 ]; then
                    autoFixConfig;
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_cpFile} ${_cpName}.o"
                    cPresult=$(maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
                    echo -e "${cPresult}\\n";
                  fi
                fi
                if [ "${_RC}" -eq 0 ]; then
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o - POST-COMPILE RC:${_RC}"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: POST-COMPILE maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_taskDate))s"
                elif [ "${_RC}" -gt 0 ] && [[ "${_cpFile}" != +($BLD_EXCL_CPP) ]]; then
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                  echo -e "${cPresult}" | tee "${_cpName^^}.err";
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o - POST-COMPILE >> ${_cpName^^}.err RC:$EC"
                  echo -e "\\nERROR: maketpf -f ${_cpFile} ${_cpName}.o - POST-COMPILE" >> "${_cpName^^}.err";
                  _RC="${EC}";
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: POST_COMPILE maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_taskDate))s"
                elif [ "${_RC}" -eq 4 ] && [[ "${_cpFile}" == +($BLD_EXCL_CPP) ]]; then
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                  echo -e "${cPresult}"| tee "${_cpName^^}.err";
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
                  warnList="${warnList} -not -name ${_cpName^^}.err";
                  _RC="${RC}"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_cpFile} part of warning exclude list completed - $(($(date +%-S)-_taskDate))s";
                elif [ "${_RC}" -gt 0 ]; then
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                  echo -e "${cPresult}" | tee "${_cpName^^}.err";
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o - POST-COMPILE >> ${_cpName^^}.err RC:$EC"
                  echo -e "\\nERROR: maketpf -f ${_cpFile} ${_cpName}.o - POST-COMPILE" >> "${_cpName^^}.err";
                  _RC="${EC}";
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: POST-COMPILE maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_taskDate))s"
                fi
              else #For generic and stand-along segments
                _taskDate=$(date +%-S)
                if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link RC:$_RC"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} link";
                  cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" link); _RC=$?;
                  echo -e "${cPresult}\\n";
                  if [ "${_RC}" -eq 20 ]; then
                    autoFixConfig;
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cpFile} link"
                    cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" link); _RC=$?;
                    echo -e "${cPresult}\\n";
                  fi
                else
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link RC:$_RC"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} link";
                  cPresult=$(maketpf -f "${_cpFile}" link); _RC=$?;
                  echo -e "${cPresult}\\n";
                  if [ "${_RC}" -eq 20 ]; then
                    autoFixConfig;
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_cpFile} link"
                    cPresult=$(maketpf -f "${_cpFile}" link); _RC=$?;
                    echo -e "${cPresult}\\n";
                  fi
                fi
                if [ "${_RC}" -eq 0 ]; then
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link - POST-COMPILE RC:${_RC}"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: POST-COMPILE maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_taskDate))s"
                elif [ "${_RC}" -gt 4 ] && [[ "${_cpFile}" != +($BLD_EXCL_CPP) ]]; then
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                  echo -e "${cPresult}" | tee "${_cpName^^}.err";
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link - POST-COMPILE >> ${_cpName^^}.err RC:$EC"
                  echo -e "\\nERROR: maketpf -f ${_cpFile} link - POST-COMPILE" >> "${_cpName^^}.err";
                  _RC="${EC}";
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: POST-COMPILE maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_taskDate))s"
                elif [ "${_RC}" -eq 4 ] && [[ "${_cpFile}" == +($BLD_EXCL_CPP) ]]; then
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                  echo -e "${cPresult}"| tee "${_cpName^^}.err";
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
                  warnList="${warnList} -not -name ${_cpName^^}.err";
                  _RC="${RC}";
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_cpFile} part of warning exclude list completed - $(($(date +%-S)-_taskDate))s\n";
                elif [ "${_RC}" -gt 0 ]; then
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                  echo -e "${cPresult}" | tee "${_cpName^^}.err";
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link - POST-COMPILE >> ${_cpName^^}.err RC:$EC"
                  echo -e "\\nERROR: maketpf -f ${_cpFile} link - POST-COMPILE" >> "${_cpName^^}.err";
                  _RC="${EC}";
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: POST-COMPILE maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_taskDate))s"
                fi
              fi
            fi
          elif [ "${_arSegment[0]}" == '' ] && [ "${_arNomore[0]}" == '' ]; then
            compList=($(find . -type f -name "*.mak" -exec grep -l "${cpList[i]##*/}" {} +));
            if [ "${compList[0]}" != '' ]; then #For component segments
              _submDate=$(date +%-S)
              if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o with CPU priority RC:$RC"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} ${_cpName}.o with CPU priority";
                cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
                echo -e "${cPresult}\\n";
                if [ "${_RC}" -eq 20 ]; then
                  autoFixConfig;
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cpFile} ${_cpName}.o"
                  cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
                  echo -e "${cPresult}\\n";
                fi
              else
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o RC:$RC"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} ${_cpName}.o";
                cPresult=$(maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
                echo -e "${cPresult}\\n";
                if [ "${_RC}" -eq 20 ]; then
                  autoFixConfig;
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_cpFile} ${_cpName}.o"
                  cPresult=$(maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
                  echo -e "${cPresult}\\n";
                fi
              fi
              if [ "${_RC}" -eq 0 ]; then
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o RC:${_RC}"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_submDate))s"
              elif [ "${_RC}" -gt 4 ] && [[ "${_cpFile}" != +($BLD_EXCL_CPP) ]]; then
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                echo -e "${cPresult}" | tee "${_cpName^^}.err";
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o >> ${_cpName^^}.err RC:$EC"
                echo -e "\\nERROR: maketpf -f ${_cpFile} ${_cpName}.o" >> "${_cpName^^}.err";
                _RC="${EC}";
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_submDate))s"
              elif [ "${_RC}" -eq 4 ] && [[ "${_cpFile}" == +($BLD_EXCL_CPP) ]]; then
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                echo -e "${cPresult}"| tee "${_cpName^^}.err";
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
                warnList="${warnList} -not -name ${_cpName^^}.err";
                _RC="${RC}"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_cpFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
              elif [ "${_RC}" -gt 0 ]; then
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                echo -e "${cPresult}" | tee "${_cpName^^}.err";
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o >> ${_cpName^^}.err RC:$EC"
                echo -e "\\nERROR: maketpf -f ${_cpFile} ${_cpName}.o" >> "${_cpName^^}.err";
                _RC="${EC}";
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_submDate))s"
              fi
            else #For generic and stand-along segments
              _submDate=$(date +%-S)
              if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link with CPU priority RC:$RC"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} link with CPU priority";
                cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" link); _RC=$?;
                echo -e "${cPresult}\\n";
                if [ "${_RC}" -eq 20 ]; then
                  autoFixConfig;
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cpFile} link"
                  cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" link); _RC=$?;
                  echo -e "${cPresult}\\n";
                fi
              else
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link RC:$RC"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} link";
                cPresult=$(maketpf -f "${_cpFile}" link); _RC=$?;
                echo -e "${cPresult}\\n";
                if [ "${_RC}" -eq 20 ]; then
                  autoFixConfig;
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_cpFile} link"
                  cPresult=$(maketpf -f "${_cpFile}" link); _RC=$?;
                  echo -e "${cPresult}\\n";
                fi
              fi
              if [ "${_RC}" -eq 0 ]; then
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link RC:${_RC}"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_submDate))s"
              elif [ "${_RC}" -gt 4 ] && [[ "${_cpFile}" != +($BLD_EXCL_CPP) ]]; then
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                echo -e "${cPresult}" | tee "${_cpName^^}.err";
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link >> ${_cpName}.err RC:$EC"
                echo -e "\\nERROR: maketpf -f ${_cpFile} link" >> "${_cpName}.err";
                _RC="${EC}";
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_submDate))s"
              elif [ "${_RC}" -eq 4 ] && [[ "${_cpFile}" == +($BLD_EXCL_CPP) ]]; then
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                echo -e "${cPresult}"| tee "${_cpName^^}.err";
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
                warnList="${warnList} -not -name ${_cpName^^}.err";
                _RC="${RC}"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_cpFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
              elif [ "${_RC}" -gt 0 ]; then
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
                echo -e "${cPresult}" | tee "${_cpName^^}.err";
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link >> ${_cpName}.err RC:$EC"
                echo -e "\\nERROR: maketpf -f ${_cpFile} link" >> "${_cpName}.err";
                _RC="${EC}";
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_submDate))s"
              fi
            fi
          elif [[ "${_arSegment[0]}" != '' ]] && [[ "${_arNomore[0]}" != '' ]]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${cpList[i]} is included in tpfar no more list - SKIP RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: ${cpList[i]} is included in tpfar no more list - SKIP";
            _RC="${RC}";
          fi
        fi
      done
    fi
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: TPFAR compliation process completed - $(($(date +%-S)-_execDate))s"
  else
#Process C segments-----------------------------------------------------------#
    if [ "${cpList[0]}" != '' ]; then
      _execDate=$(date +%-S)
      for((i=0; i<${#cpList[*]}; i++));
      do
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
        _cpFile="${cpList[i]##*/}";
        _cpName="${_cpFile%%.*}";
        compList=($(find . -type f -name "*.mak" -exec grep -l "${cpList[i]##*/}" {} +));
        if [ "${compList[0]}" != '' ]; then #For component segments
          _submDate=$(date +%-S)
          if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o with CPU priority RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} ${_cpName}.o with CPU priority";
            cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
            echo -e "${cPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cpFile} ${_cpName}.o"
              cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
              echo -e "${cPresult}\\n";
            fi
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} ${_cpName}.o";
            cPresult=$(maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
            echo -e "${cPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_cpFile} ${_cpName}.o"
              cPresult=$(maketpf -f "${_cpFile}" "${_cpName}.o"); _RC=$?;
              echo -e "${cPresult}\\n";
            fi
          fi
          if [ "${_RC}" -eq 0 ]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o RC:${_RC}"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_submDate))s"
          elif [ "${_RC}" -gt 4 ] && [[ "${_cpFile}" != +($BLD_EXCL_CPP) ]]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
            echo -e "${cPresult}" | tee "${_cpName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o >> ${_cpName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f ${_cpFile} ${_cpName}.o" >> "${_cpName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_submDate))s"
          elif [ "${_RC}" -eq 4 ] && [[ "${_cpFile}" == +($BLD_EXCL_CPP) ]]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
            echo -e "${cPresult}"| tee "${_cpName^^}.err";
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
            warnList="${warnList} -not -name ${_cpName^^}.err";
            _RC="${RC}"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_cpFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
          elif [ "${_RC}" -gt 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
            echo -e "${cPresult}" | tee "${_cpName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cpName}.o >> ${_cpName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f ${_cpFile} ${_cpName}.o" >> "${_cpName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cpFile} ${_cpName}.o completed - $(($(date +%-S)-_submDate))s"
          fi
        else #For generic and stand-along segments
          _submDate=$(date +%-S)
          if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link with CPU priority RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} link with CPU priority";
            cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" link); _RC=$?;
            echo -e "${cPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cpFile} link"
              cPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cpFile}" link); _RC=$?;
              echo -e "${cPresult}\\n";
            fi
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} link";
            cPresult=$(maketpf -f "${_cpFile}" link); _RC=$?;
            echo -e "${cPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_cpFile} link"
              cPresult=$(maketpf -f "${_cpFile}" link); _RC=$?;
              echo -e "${cPresult}\\n";
            fi
          fi
          if [ "${_RC}" -eq 0 ]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link RC:${_RC}"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_submDate))s"
          elif [ "${_RC}" -gt 4 ] && [[ "${_cpFile}" != +($BLD_EXCL_CPP) ]]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
            echo -e "${cPresult}" | tee "${_cpName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link >> ${_cpName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f ${_cpFile} link" >> "${_cpName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_submDate))s"
          elif [ "${_RC}" -eq 4 ] && [[ "${_cpFile}" == +($BLD_EXCL_CPP) ]]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
            echo -e "${cPresult}"| tee "${_cpName^^}.err";
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_cpFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
            warnList="${warnList} -not -name ${_cpName^^}.err";
            _RC="${RC}"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_cpFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
          elif [ "${_RC}" -gt 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cPresult} RC:$EC"
            echo -e "${cPresult}" | tee "${_cpName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} link >> ${_cpName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f ${_cpFile} link" >> "${_cpName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cpFile} link completed - $(($(date +%-S)-_submDate))s"
          fi
        fi
      done
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: C compliation process completed - $(($(date +%-S)-_execDate))s"
    fi
  fi
  cppList=( $(find . -type f -name "*.cpp") );
#Process CPP segments---------------------------------------------------------#
  if [ "${cppList[0]}" != '' ]; then
    _execDate=$(date +%-S)
    for((i=0; i<${#cppList[*]}; i++));
    do
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
      _cppFile="${cppList[i]##*/}";
      _cppName="${_cppFile%%.*}";
      compList=($(find . -type f -name "*.mak" -exec grep -l "${cppList[i]##*/}" {} +));
      if [ "${compList[0]}" != '' ]; then #For component segments
        _submDate=$(date +%-S)
        if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cppName}.o with CPU priority RC:$RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cppFile} ${_cppName}.o with CPU priority";
          cppPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cppFile}" "${_cppName}.o"); _RC=$?;
          echo -e "${cppPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cppFile} ${_cppName}.o"
            cppPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cppFile}" "${_cppName}.o"); _RC=$?;
            echo -e "${cppPresult}\\n";
          fi
        else
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cpFile} ${_cppName}.o RC:$RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cppFile} ${_cppName}.o";
          cppPresult=$(maketpf -f "${_cppFile}" "${_cppName}.o"); _RC=$?;
          echo -e "${cppPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cppFile} ${_cppName}.o"
            cppPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cppFile}" "${_cppName}.o"); _RC=$?;
            echo -e "${cppPresult}\\n";
          fi
        fi
        if [ "${_RC}" -eq 0 ]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} ${_cppName}.o RC:${_RC}"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cppFile} ${_cppName}.o completed - $(($(date +%-S)-_submDate))s"
        elif [ "${_RC}" -gt 4 ] && [[ "${_cppFile}" != +($BLD_EXCL_CPP) ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cppPresult} RC:$EC"
          echo -e "${cppPresult}" | tee "${_cppName^^}.err";
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} ${_cppName}.o >> ${_cppName^^}.err RC:$EC"
          echo -e "\\nERROR: maketpf -f ${_cppFile} ${_cppName}.o" >> "${_cppName^^}.err";
          _RC="${EC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cppFile} ${_cppName}.o completed - $(($(date +%-S)-_submDate))s"
        elif [ "${_RC}" -eq 4 ] && [[ "${_cppFile}" == +($BLD_EXCL_CPP) ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cppPresult} RC:$EC"
          echo -e "${cppPresult}"| tee "${_cppName^^}.err";
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_cppFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_cppFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
          warnList="${warnList} -not -name ${_cppName^^}.err";
          _RC="${RC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_cppFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
        elif [ "${_RC}" -gt 0 ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cppPresult} RC:$EC"
          echo -e "${cppPresult}" | tee "${_cppName^^}.err";
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} ${_cppName}.o >> ${_cppName^^}.err RC:$EC"
          echo -e "\\nERROR: maketpf -f ${_cppFile} ${_cppName}.o" >> "${_cppName^^}.err";
          _RC="${EC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cppFile} ${_cppName}.o completed - $(($(date +%-S)-_submDate))s"
        fi
      else #For generic and stand-along segments
        _submDate=$(date +%-S)
        if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} link with CPU priority RC:$RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cppFile} link with CPU priority";
          cppPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cppFile}" link); _RC=$?;
          echo -e "${cppPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_cppFile} link"
            cppPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_cppFile}" link); _RC=$?;
            echo -e "${cppPresult}\\n";
          fi
        else
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} link RC:$RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cppFile} link";
          cppPresult=$(maketpf -f "${_cppFile}" link); _RC=$?;
          echo -e "${cppPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_cppFile} link"
            cppPresult=$(maketpf -f "${_cppFile}" link); _RC=$?;
            echo -e "${cppPresult}\\n";
          fi
        fi
        if [ "${_RC}" -eq 0 ]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} link RC:${_RC}"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_cppFile} link completed - $(($(date +%-S)-_submDate))s"
        elif [ "${_RC}" -gt 4 ] && [[ "${_cppFile}" != +($BLD_EXCL_CPP) ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cppPresult} RC:$EC"
          echo -e "${cppPresult}" | tee "${_cppName^^}.err";
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} link >> ${_cppName^^}.err RC:$EC"
          echo -e "\\nERROR: maketpf -f ${_cppFile} link" >> "${_cppName^^}.err";
          _RC="${EC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cppFile} link completed - $(($(date +%-S)-_submDate))s"
        elif [ "${_RC}" -eq 4 ] && [[ "${_cppFile}" == +($BLD_EXCL_CPP) ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cppPresult} RC:$EC"
          echo -e "${cppPresult}"| tee "${_cppName^^}.err";
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_cppFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_cppFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
          warnList="${warnList} -not -name ${_cppName^^}.err";
          _RC="${RC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_cppFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
        elif [ "${_RC}" -gt 0 ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cppPresult} RC:$EC"
          echo -e "${cppPresult}" | tee "${_cppName^^}.err";
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} link >> ${_cppName^^}.err RC:$EC"
          echo -e "\\nERROR: maketpf -f ${_cppFile} link" >> "${_cppName^^}.err";
          _RC="${EC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_cppFile} link completed - $(($(date +%-S)-_submDate))s"
        fi
      fi
    done
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: CPP compliation process completed - $(($(date +%-S)-_execDate))s"
  fi
  asmList=( $(find . -type f -name "*.asm") );
#Process ASM segments---------------------------------------------------------#
  if [ "${asmList[0]}" != '' ]; then
    _execDate=$(date +%-S)
    for((i=0; i<${#asmList[*]}; i++));
    do
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
      _asmFile="${asmList[i]##*/}";
      _asmName="${_asmFile%%.*}";
      compList=($(find . -type f -name "*.mak" -exec grep -l "${asmList[i]##*/}" {} +));
      if [ "${compList[0]}" != '' ]; then #For component segments
        _submDate=$(date +%-S)
        if [[ "${compList[0]}" =~ "cps0" ]] && [[ "${USR_IMPL_CORE,,}" == +($REF_T4_CORE) ]]; then #Exception force compile
          if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} linCPS0 ${_asmName}.o with CPU priority RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f CPS0 ${_asmName}.o with CPU priority";
            cpsPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f CPS0 "${_asmName}.o"); _RC=$?;
            echo -e "${cpsPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f CPS0 ${_asmName}.o"
              cpsPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f CPS0 "${_asmName}.o"); _RC=$?;
              echo -e "${cpsPresult}\\n";
            fi
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_cppFile} linCPS0 ${_asmName}.o RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f CPS0 ${_asmName}.o";
            cpsPresult=$(maketpf -f CPS0 "${_asmName}.o"); _RC=$?;
            echo -e "${cpsPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f CPS0 ${_asmName}.o"
              cpsPresult=$(maketpf -f CPS0 "${_asmName}.o"); _RC=$?;
              echo -e "${cpsPresult}\\n";
            fi
          fi
        else
          if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} ${_asmName}.o with CPU priority RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_asmFile} ${_asmName}.o with CPU priority";
            cpsPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_asmFile}" "${_asmName}.o"); _RC=$?;
            echo -e "${cpsPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_asmFile} ${_asmName}.o"
              cpsPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_asmFile}" "${_asmName}.o"); _RC=$?;
              echo -e "${cpsPresult}\\n";
            fi
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} ${_asmName}.o RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_asmFile} ${_asmName}.o";
            cpsPresult=$(maketpf -f "${_asmFile}" "${_asmName}.o"); _RC=$?;
            echo -e "${cpsPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_asmFile} ${_asmName}.o"
              cpsPresult=$(maketpf -f "${_asmFile}" "${_asmName}.o"); _RC=$?;
              echo -e "${cpsPresult}\\n";
            fi
          fi
        fi
        if [ "${_RC}" -eq 0 ]; then
          if [[ "${compList[0]}" =~ "cps0" ]] && [[ "${USR_IMPL_CORE,,}" == +($REF_T4_CORE) ]]; then #Exception force compile
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f CPS0 ${_asmName}.o RC:${_RC}"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f CPS0 ${_asmName}.o completed - $(($(date +%-S)-_submDate))s"
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} ${_asmName}.o RC:${_RC}"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_asmFile} ${_asmName}.o completed - $(($(date +%-S)-_submDate))s"
          fi
        elif [ "${_RC}" -gt 4 ] && [[ "${_asmFile}" != +($BLD_EXCL_ASM) ]]; then
          if [[ "${compList[0]}" =~ "cps0" ]] && [[ "${USR_IMPL_CORE,,}" == +($REF_T4_CORE) ]]; then #Exception force compile
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cpsPresult} RC:$EC"
            echo -e "${cpsPresult}" | tee "${_asmName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f CPS0 ${_asmName}.o >> ${_asmName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f CPS0 ${_asmName}.o" >> "${_asmName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f CPS0 ${_asmName}.o completed - $(($(date +%-S)-_submDate))s"
          else
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cpsPresult} RC:$EC"
            echo -e "${cpsPresult}"| tee "${_asmName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} ${_asmName}.o >> ${_asmName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f ${_asmFile} ${_asmName}.o" >> "${_asmName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_asmFile} ${_asmName}.o completed - $(($(date +%-S)-_submDate))s";
          fi
        elif [ "${_RC}" -eq 4 ] && [[ "${asmList[i]}" =~ sbtasm ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_asmFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_asmFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n";
          warnList="${warnList} -not -name ${_asmName^^}.err";
          _RC="${RC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_asmFile} part of sabretalk warning exception completed - $(($(date +%-S)-_submDate))s\n";
        elif [ "${_RC}" -eq 4 ] && [[ "${_asmFile}" == +($BLD_EXCL_ASM) ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_asmFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S")INFO: File ${_asmFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
          warnList="${warnList} -not -name ${_asmName^^}.err";
          _RC="${RC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_asmFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
        elif [ "${_RC}" -gt 0 ]; then
          if [[ "${compList[0]}" =~ "cps0" ]] && [[ "${USR_IMPL_CORE,,}" == +($REF_T4_CORE) ]]; then #Exception force compile
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cpsPresult} RC:$EC"
            echo -e "${cpsPresult}" | tee "${_asmName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f CPS0 ${_asmName}.o >> ${_asmName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f CPS0 ${_asmName}.o" >> "${_asmName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f CPS0 ${_asmName}.o completed - $(($(date +%-S)-_submDate))s"
          else
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${cpsPresult} RC:$EC"
            echo -e "${cpsPresult}" | tee "${_asmName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} ${_asmName}.o >> ${_asmName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f ${_asmFile} ${_asmName}.o" >> "${_asmName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_asmFile} ${_asmName}.o completed - $(($(date +%-S)-_submDate))s"
          fi
        fi
      else #For generic and stand-along segments
        _submDate=$(date +%-S)
        if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} link with CPU priority RC:$_RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_asmFile} link with CPU priority";
          asmPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_asmFile}" link); _RC=$?;
          echo -e "${asmPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${_asmFile} link"
            asmPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${_asmFile}" link); _RC=$?;
            echo -e "${asmPresult}\\n";
          fi
        else
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} link RC:$_RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_asmFile} link";
          asmPresult=$(maketpf -f "${_asmFile}" link); _RC=$?;
          echo -e "${asmPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${_asmFile} link"
            asmPresult=$(maketpf -f "${_asmFile}" link); _RC=$?;
            echo -e "${asmPresult}\\n";
          fi
        fi
        if [ "${_RC}" -eq 0 ]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} link RC:${_RC}"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${_asmFile} link completed - $(($(date +%-S)-_submDate))s"
        elif [ "${_RC}" -gt 4 ] && [[ "${_asmFile}" != +($BLD_EXCL_ASM) ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${asmPresult} RC:$EC"
          echo -e "${asmPresult}" | tee "${_asmName^^}.err";
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} link >> ${_asmName^^}.err RC:$EC"
          echo -e "\\nERROR: maketpf -f ${_asmFile} link" >> "${_asmName^^}.err";
          _RC="${EC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_asmFile} link completed - $(($(date +%-S)-_submDate))s"
        elif [ "${_RC}" -eq 4 ] && [[ "${asmList[i]}" =~ sbtasm ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${asmPresult} RC:$EC"
          echo -e "${asmPresult}"| tee "${_asmName^^}.err";
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_asmFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_asmFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n";
          warnList="${warnList} -not -name ${_asmName^^}.err";
          _RC="${RC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_asmFile} part of sabretalk warning exception completed - $(($(date +%-S)-_submDate))s\n";
        elif [ "${_RC}" -eq 4 ] && [[ "${_asmFile}" == +($BLD_EXCL_ASM) ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${asmPresult} RC:$EC"
          echo -e "${asmPresult}"| tee "${_asmName^^}.err";
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_asmFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: File ${_asmFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
          warnList="${warnList} -not -name ${_asmName^^}.err";
          _RC="${RC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: PROCEEDED WITH COMPILER WARNING file ${_asmFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
        elif [ "${_RC}" -gt 0 ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${asmPresult} RC:$EC"
          echo -e "${asmPresult}" | tee "${_asmName^^}.err";
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${_asmFile} link >> ${_asmName^^}.err RC:$EC"
          echo -e "\\nERROR: maketpf -f ${_asmFile} link" >> "${_asmName^^}.err";
          _RC="${EC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${_asmFile} link completed - $(($(date +%-S)-_submDate))s"
        fi
      fi
      if [ -f "bss/macro/syseqc.mac" ];then #Special macro handling
        if [ -f bss/macro/syseqc.mac.gen ]; then #Date ref added to make uniq file
          fdt=$( stat -c %Y bss/macro/syseqc.mac.gen );
          mv bss/macro/syseqc.mac.gen "bss/macro/syseqc.mac.gen.${fdt}";
        fi
        mv bss/macro/syseqc.mac bss/macro/syseqc.mac.gen
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: syseqc.mac renamed"
      fi
      if [ -f "bss/src/irccr.asm" ];then #Special asm handling
        if [ -f bss/src/irccr.asm.gen ]; then #Date ref added to make uniq file
          fdt=$( stat -c %Y bss/src/irccr.asm.gen );
          mv bss/src/irccr.asm.gen "bss/src/irccr.asm.gen.${fdt}";
        fi
        mv bss/src/irccr.asm bss/src/irccr.asm.gen
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: irccr.asm renamed"
      fi
    done
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: ASM compliation process completed - $(($(date +%-S)-_execDate))s"
  fi
#Process MAK segments---------------------------------------------------------#
  makList=( $(find . -type f -name "*.mak") );
  if [ "${makList[0]}" != '' ]; then
    _execDate=$(date +%-S)
    for((i=0; i<${#makList[*]}; i++));
    do
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
      _makFile="${makList[i]##*/}";
      _makName="${_makFile%%.*}";
      if [[ "${_makFile}" == +($BLD_EXCL_MAK) ]]; then #Exclude .mak error files
        _errExclude="${_makName^^}.err";
      elif [[ "${_makFile}" != +($BLD_EXCL_MAK) ]]; then
        grep -w "directories do not exist:" "${_makName^^}.err" &> /dev/null; _RC=$?
        if [ "${_RC}" -eq 0 ]; then
          _errExclude="${_makName^^}.err"
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${_errExclude} The error created due to APPL or TPF ROOT do not exist on zlinux RC:$_RC"
        fi
      fi
      if [[ ! -f "${_makName^^}.err" ]] || [[ -f "${_errExclude}" ]]; then #Check existing .err file
        _submDate=$(date +%-S)
        if [[ "${_makName}" == "fctb" ]]; then #Exception force compile
          if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${makList[i]##*/} link with CPU priority RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${makList[i]##*/} link with CPU priority"; #Force compile
            makPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${makList[i]##*/}" link); _RC=$?;
            echo -e "${makPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf -f ${makList[i]##*/} link"
              makPresult=$(nice -"${TPF_CPU_NICE}" maketpf -f "${makList[i]##*/}" link); _RC=$?;
              echo -e "${makPresult}\\n";
            fi
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${makList[i]##*/} link RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${makList[i]##*/} link"; #Force compile
            makPresult=$(maketpf -f "${makList[i]##*/}" link); _RC=$?;
            echo -e "${makPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf -f ${makList[i]##*/} link"
              makPresult=$(maketpf -f "${makList[i]##*/}" link); _RC=$?;
              echo -e "${makPresult}\\n";
            fi
          fi
        else
          if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link with CPU priority RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link with CPU priority";
            makPresult=$(nice -"${TPF_CPU_NICE}" maketpf "${makList[i]##*/}" link); _RC=$?;
            echo -e "${makPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf ${makList[i]##*/} link"
              makPresult=$(nice -"${TPF_CPU_NICE}" maketpf "${makList[i]##*/}" link); _RC=$?;
              echo -e "${makPresult}\\n";
            fi
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link";
            makPresult=$(maketpf "${makList[i]##*/}" link); _RC=$?;
            echo -e "${makPresult}\\n";
            if [ "${_RC}" -eq 20 ]; then
              autoFixConfig;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf ${makList[i]##*/} link"
              makPresult=$(maketpf "${makList[i]##*/}" link); _RC=$?;
              echo -e "${makPresult}\\n";
            fi
          fi
        fi
        if [ "${_RC}" -eq 0 ]; then
          if [[ "${_makName}" == fctb ]]; then #Exception force compile
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${makList[i]##*/} link RC:${_RC}"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf -f ${makList[i]##*/} link completed - $(($(date +%-S)-_submDate))s"
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${_makFile} link RC:${_RC}"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${_makFile} link completed - $(($(date +%-S)-_submDate))s"
          fi
        elif [ "${_RC}" -gt 4 ] && [[ "${_makFile}" != +($BLD_EXCL_MAK) ]]; then
          if [[ "${_makName}" == "fctb" ]]; then #Exception force compile
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${makPresult} RC:$EC"
            echo -e "${makPresult}" | tee "${_makName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${makList[i]##*/} link >> ${_makName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f ${makList[i]##*/} link" >> "${_makName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${makList[i]##*/} link completed - $(($(date +%-S)-_submDate))s"
          else
            #New LIBS validation
            #shellcheck disable=SC2059
            _errLibs=$(printf "${makPresult[@]}" | grep 'cannot find -l' | sed 's/.*-l//g')
#            if [[ "${makPresult}" =~ 'cannot find -l' ]]; then #Re-compile for Libs
#              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf identified new libs in the ${makList[i]##*/} file continue to re-compile RC:$RC"
#              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Maketpf identified new libs in the ${makList[i]##*/} file continue to re-compile"
#              _subnDate=$(date +%-S)
#              if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
#                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO with CPU priority RC:$RC"
#                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO with CPU priority"
#                makPresult=$(nice -"${TPF_CPU_NICE}" maketpf "${makList[i]##*/}" link TPF_VERIFY_LINK_REFS=NO); _RC=$?;
#                echo -e "${makPresult}\\n";
#              else
#                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO RC:$RC"
#                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO"
#                makPresult=$(maketpf "${makList[i]##*/}" link TPF_VERIFY_LINK_REFS=NO); _RC=$?;
#                echo -e "${makPresult}\\n";
#              fi
#              if [ "${_RC}" -eq 0 ]; then
#                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO RC:${_RC}"
#                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO re-compile completed - $(($(date +%-S)-_subnDate))s"
#              else
#                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${makPresult} RC:$EC"
#                echo -e "${makPresult}" | tee "${_makName^^}.err";
#                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO >> ${_makName^^}.err  RC:$EC"
#                echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO recompile failed - $(($(date +%-S)-_subnDate))s"
#                _RC="${EC}"
#              fi
#            else
            if [ -z "${_errLibs}" ]; then
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${makPresult} RC:$EC"
              echo -e "${makPresult}" | tee "${_makName^^}.err";
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link >> ${_makName^^}.err  RC:$EC"
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf ${makList[i]##*/} link failed - $(($(date +%-S)-_submDate))s"
              _RC="${EC}"
            else
              _libsFile+=("${_makFile}:${_errLibs// /}")
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link failed for LIBS dependency >> ${_makName^^}.err  RC:$EC"
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf ${makList[i]##*/} link failed for LIBS dependency - $(($(date +%-S)-_submDate))s"
              if [ "${#makList[*]}" -gt 1 ]; then
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:In this plan, Maketpf identified more than one .mak file, so skip all other.mak files to re-build  RC:$EC"
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: In this plan, Maketpf identified more than one .mak file, so skip all other.mak files to re-build - $(($(date +%-S)-_submDate))s"
                break;
              fi
            fi
          fi
        elif [ "${_RC}" -eq 4 ] && [[ "${_makFile}" == +($BLD_EXCL_MAK) ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${makPresult} RC:$EC"
          echo -e "${makPresult}"| tee "${_makName^^}.err";
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${_makFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n RC:$RC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: File ${_makFile} part of warning exclude list - PROCEEDED WITH COMPILER WARNING\n";
          warnList="${warnList} -not -name ${_makName^^}.err";
          _RC="${RC}";
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: PROCEEDED WITH COMPILER WARNING file ${_makFile} part of warning exclude list completed - $(($(date +%-S)-_submDate))s\n";
        elif [ "${_RC}" -gt 0 ]; then
          if [[ "${_makName}" == fctb ]]; then #Exception force compile
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${makPresult} RC:$EC"
            echo -e "${makPresult}" | tee "${_makName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf -f ${makList[i]##*/} link >> ${_makName^^}.err RC:$EC"
            echo -e "\\nERROR: maketpf -f ${makList[i]##*/} link" >> "${_makName^^}.err";
            _RC="${EC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf -f ${makList[i]##*/} link completed - $(($(date +%-S)-_submDate))s"
          else
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${makPresult} RC:$EC"
            echo -e "${makPresult}" | tee "${_makName^^}.err";
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${_makFile} link >> ${_makName^^}.err RC:$RC"
            echo -e "\\nERROR: maketpf ${_makFile} link" >> "${_makName^^}.err";
            _RC="${RC}";
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf ${_makFile} link completed - $(($(date +%-S)-_submDate))s"
          fi
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Existing source compile failed - ${_makName^^}.err RC:$EC"
        echo "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Existing source compile failed - ${_makName^^}.err";
        _RC="${EC}";
      fi
    done
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: MAK compliation process completed - $(($(date +%-S)-_execDate))s"
  fi
  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
  #New LIBS re-compilation to resolve the dependency
  if [ "${#makList[*]}" -gt 1 ] && [ "${#_libsFile[*]}" -gt 0 ]; then
    #printf "${_libsFile[@]}"; #Print both .mak file and it's LIB dependency
    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Makefile recompilation initiated to resolve LIBS dependency..."
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Makefile recompilation initiated to resolve LIBS dependency..."
    for _lFile in "${_libsFile[@]}"
    do
      #Re-compile all .mak file with TPF_VERIFY_LINK_REFS=NO to resolve LIBS
      for((i=0; i<${#makList[*]}; i++));
      do
        _makFile="${makList[i]##*/}"
        _makName="${_makFile%%.*}"
        _subnDate=$(date +%-S)
        if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO with CPU priority"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO with CPU priority"
          makPresult=$(nice -"${TPF_CPU_NICE}" maketpf "${makList[i]##*/}" link TPF_VERIFY_LINK_REFS=NO); _RC=$?;
          echo -e "${makPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO"
            makPresult=$(nice -"${TPF_CPU_NICE}" maketpf "${makList[i]##*/}" link TPF_VERIFY_LINK_REFS=NO); _RC=$?;
            echo -e "${makPresult}\\n";
          fi
        else
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO"
          makPresult=$(maketpf "${makList[i]##*/}" link TPF_VERIFY_LINK_REFS=NO); _RC=$?;
          echo -e "${makPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO"
            makPresult=$(maketpf "${makList[i]##*/}" link TPF_VERIFY_LINK_REFS=NO); _RC=$?;
            echo -e "${makPresult}\\n";
          fi
        fi
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO re-compile completed RC:${_RC}"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link TPF_VERIFY_LINK_REFS=NO re-compile completed - $(($(date +%-S)-_subnDate))s"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
      done
      #Re-compile all .mak files
      for((i=0; i<${#makList[*]}; i++));
      do
        _makFile="${makList[i]##*/}"
        _makName="${_makFile%%.*}"
        _subnDate=$(date +%-S)
        if [[ "${TPF_CPU_LIMIT^^}" == Y ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link with CPU priority"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link with CPU priority"
          makPresult=$(nice -"${TPF_CPU_NICE}" maketpf "${makList[i]##*/}" link); _RC=$?;
          echo -e "${makPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile nice -${TPF_CPU_NICE} maketpf ${makList[i]##*/} link"
            makPresult=$(nice -"${TPF_CPU_NICE}" maketpf "${makList[i]##*/}" link); _RC=$?;
            echo -e "${makPresult}\\n";
          fi
        else
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link"
          makPresult=$(maketpf "${makList[i]##*/}" link); _RC=$?;
          echo -e "${makPresult}\\n";
          if [ "${_RC}" -eq 20 ]; then
            autoFixConfig;
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Re-compile maketpf ${makList[i]##*/} link"
            makPresult=$(maketpf "${makList[i]##*/}" link); _RC=$?;
            echo -e "${makPresult}\\n";
          fi
        fi
        if [ "${_RC}" -eq 0 ]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link re-compile completed RC:${_RC}"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf ${makList[i]##*/} link re-compile completed - $(($(date +%-S)-_subnDate))s"
        else
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${makPresult} RC:$EC"
          echo -e "${makPresult}" | tee "${_makName^^}.err";
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf ${makList[i]##*/} link re-compile failed >> ${_makName^^}.err  RC:$EC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf ${makList[i]##*/} link recompile failed - $(($(date +%-S)-_subnDate))s"
          _RC="${EC}"
        fi
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
      done
    done
  else
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
  fi
  if [ -f "bss/macro/syseqc.mac" ];then #Special macro handling
    if [ -f bss/macro/syseqc.mac.gen ]; then #Date ref added to make uniq file
      fdt=$( stat -c %Y bss/macro/syseqc.mac.gen )
      mv bss/macro/syseqc.mac.gen "bss/macro/syseqc.mac.gen.${fdt}"
    fi
    mv bss/macro/syseqc.mac bss/macro/syseqc.mac.gen
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: syseqc.mac renamed"
  fi
  if [ -f "bss/src/irccr.asm" ];then #Special asm handling
    if [ -f bss/src/irccr.asm.gen ]; then #Date ref added to make uniq file
      fdt=$( stat -c %Y bss/src/irccr.asm.gen )
      mv bss/src/irccr.asm.gen "bss/src/irccr.asm.gen.${fdt}"
    fi
    mv bss/src/irccr.asm bss/src/irccr.asm.gen
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: irccr.asm renamed"
  fi
  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: -----------------------------------------------------";
  return "${_RC}";
}
#-----------------------------------------------------------------------------#
# function pdddsLibs not required for STG Compile
#-----------------------------------------------------------------------------#
function updateConfig {
  local _RC=0;
  local _implementation="$1";
  local _implPutLevel="$2";
  local _implDependancyDvl="$3";
  local _implDependancyStg="$4";
  local _currentDate;
  local _syslineNo;
  local _temp="";
  local _XrefPlanName;
  local _XrefPlanDate;
  local _XrefPlanPath;
  local _jTemp;
  local _putlineNo;
  local _putPtr;
  local _execDate;                     #Execution block timestamp
  local _taskDate;                     #Execution task execution timestamp
  local _submDate;                     #Subtask execution timestamp
  local _finalPutNo;                   #help to remove += for no depent cfg
  local _finPtr;                       #help to remove += for no depent cfg
  declare -a _dvlList;
  declare -a _stgList;
  _currentDate="$(date +%Y%m%d)";
  _implLoadDate="${_implementation##*_}";
  _implDependancyDvl="${_implDependancyDvl//\,/ }";
  _implDependancyStg="${_implDependancyStg//\,/ }";
  _implReferenceCore="${implementation%%_*}/${USR_IMPL_CORE}";
#DVL Dependancy added from modernization project------------------------------#
  if [ -n "${_implDependancyDvl// /}" ]; then
    _execDate=$(date +%-S)
    _temp=( ${_implDependancyDvl} );
    for((i=1; i<${#_temp[@]}; i++));   #Skip first data start from 1
    do
      if [ -d "${STG_TPF_APP}/${_temp[i]%%_*}/${USR_IMPL_CORE}" ]; then
        _dvlList+="${_dvlList[i]} ${_temp[i]##*_},${STG_TPF_APP}/${_temp[i]%%_*}/${USR_IMPL_CORE}";
      fi
      if [ -d "${STG_TPF_SYS}/${_temp[i]%%_*}/${USR_IMPL_CORE}" ]; then
        _dvlList+="${_dvlList[i]} ${_temp[i]##*_},${STG_TPF_SYS}/${_temp[i]%%_*}/${USR_IMPL_CORE}";
      fi
    done
    _temp=();                          #Unset
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Remove invalid directory plan numbers from DVL dependency list - $(($(date +%-S)-_execDate))s"
  else
    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:No STG workspace dependancy provided to SKIP RC:$RC"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: No STG workspace dependancy provided to SKIP";
  fi
#DVL Sort order---------------------------------------------------------------#
  _execDate=$(date +%-S)
  IFS=' ' read -r -a _devlList <<< "${_dvlList[*]}";
  for ((i=0;i<"${#_devlList[@]}";i++))
  do
    #shellcheck disable=SC2004
    for ((j=$i;j<"${#_devlList[@]}";j++))
    do
      if [ -n "${_devlList[$i]%,*}" ] && [ "${_devlList[$i]%,*}" -lt "${_devlList[$j]%,*}" ]; then
        _dvlLst="${_devlList[$i]}";
        _devlList[$i]="${_devlList[$j]}";
        _devlList[$j]="${_dvlLst}";
      fi
    done
  done
  unset IFS;
  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sorted DVL dependency list by date - $(($(date +%-S)-_execDate))s"
#STG Dependancy added from modernization--------------------------------------#
  if [ -n "${_implDependancyStg}" ]; then
    _execDate=$(date +%-S)
    _temp=( ${_implDependancyStg} );
    for((i=1; i<${#_temp[@]}; i++));   #Skip first data start from 1
    do
      if [ -d "${STG_TPF_APP}/${_temp[i]%%_*}/${USR_IMPL_CORE}" ]; then
        _stgList[i]="${_stgList[i]} ${_temp[i]##*_},${STG_TPF_APP}/${_temp[i]%%_*}/${USR_IMPL_CORE}";
      fi
      if [ -d "${STG_TPF_SYS}/${_temp[i]%%_*}/${USR_IMPL_CORE}" ]; then
        _stgList[i]="${_stgList[i]} ${_temp[i]##*_},${STG_TPF_SYS}/${_temp[i]%%_*}/${USR_IMPL_CORE}";
      fi
    done
    _temp=();                          #Unset
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Remove invalid directory plan numbers from STG dependency list - $(($(date +%-S)-_execDate))s"
  else
    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:No STG workspace dependancy provided to SKIP RC:$RC"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: No STG workspace dependancy provided to SKIP"
  fi
#Define PEND and XREF paths as per core/systems-------------------------------#
  case "${USR_IMPL_CORE,,}" in
    res)
      _pendPath="$PRD_RES_PND";
    ;;
    air)
      _pendPath="$PRD_AIR_PND";
    ;;
    oss)
      _pendPath="$PRD_OSS_PND";
    ;;
    wsp)
      _pendPath="$PRD_WSP_PND";
    ;;
    apo)
      _pendPath="$PRD_APO_PND";
      _pendXref="$PRD_APO_XRF";
    ;;
    pgr)
      _pendPath="$PRD_PGR_PND";
      _pendXref="$PRD_PGR_XRF";
    ;;
    pre)
      _pendPath="$PRD_PRE_PND";
      _pendXref="$PRD_PRE_XRF";
    ;;
    *)
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:No systems selected RC:$RC"
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: No systems selected";
    ;;
  esac
#Load PEND File path----------------------------------------------------------#
  _execDate=$(date +%-S)
  if [ "${USR_IMPL_CORE,,}" == "apo" ] || [ "${USR_IMPL_CORE,,}" == "pgr" ] || [ "${USR_IMPL_CORE,,}" == "pre" ]; then
    _XrefImplID=( $(awk ' $3 <= '"${_implLoadDate:0:8}"' ' "${_pendXref}" | grep ' APZ ' | tr -s ' ' | sort -nrk 3.1 | cut -d' ' -f1,3,8 | sed 's/ //2' | sed 's/ /,/g' | uniq -u) );
    for((i=0; i<${#_XrefImplID[@]}; i++));
    do
      _XrefPlanName="${_XrefImplID[i]%%,*}";
      _XrefTempDate="${_XrefImplID[i]#*,}";
      _XrefPlanDate="${_XrefTempDate/,/}";
      _XrefPlanPath=( $(grep "${_XrefPlanName}" "${_pendPath}" | grep "${USR_IMPL_CORE}" | grep 'ztpfrepos' | tr -s " " | sort -nrk 5.1 | cut -d' ' -f6 ) );
      _seqNum=0;
      if [ -n "${_XrefPlanPath[0]}" ];  then
        for x in "${_XrefPlanPath[@]}"
        do
          _seqNum=$((_seqNum + 1));
          printf -v snum "%06d" "$_seqNum"; #Append 6-digit sequence number (12-digit time stamp, 4-digit sequnce number)
          _jTemp="${_XrefPlanDate},${x}";
          _stgList+="${_jTemp/,/${snum},} ";
        done
      fi
      _XrefPlanPath=( $(grep "${_XrefPlanName}" "${_pendPath}" | grep "${USR_IMPL_CORE}" | grep 'ztpfsys' | tr -s " " | sort -nrk 5.1 | cut -d' ' -f6 ) );
      _seqNum=0;
      if [ -n "${_XrefPlanPath[0]}" ];  then
        for x in "${_XrefPlanPath[@]}"
        do
          _seqNum=$((_seqNum + 1));
          printf -v snum "%06d" "$_seqNum"; #Append 6-digit sequence number (12-digit time stamp, 4-digit sequnce number)
          _jTemp="${_XrefPlanDate},${x}";
          _stgList+="${_jTemp/,/${snum},} ";
        done
      fi
    done
  elif [ "${USR_IMPL_CORE,,}" == "wsp" ] || [ "${USR_IMPL_CORE,,}" == "air" ] || [ "${USR_IMPL_CORE,,}" == "res" ] || [ "${USR_IMPL_CORE,,}" == "oss" ]; then
    _stgTemp=( $(grep "${USR_IMPL_CORE}" "${_pendPath}" | grep 'ztpfsys\|ztpfrepos' | tr -s " " | cut -d" " -f4,5 | sed 's/ /,/g') );
    _seqNum=0;
    for i in "${_stgTemp[@]}"
    do
      _seqNum=$((_seqNum + 1));
      printf -v snum "%010d" "$_seqNum"; #Append 10-digit sequence number (6-digit time format, 4-digit sequnce number)
      _stgList+="${i/,/${snum},} ";
    done
  fi
  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Dependencies reads from LEGACY PEND file - $(($(date +%-S)-_execDate))s"
#STG Sort order---------------------------------------------------------------#
  _execDate=$(date +%-S)
  IFS=' ' read -r -a _stagingList <<< "${_stgList[*]}"
  for ((i=0;i<"${#_stagingList[@]}";i++))
  do
    #shellcheck disable=SC2004
    for ((j=$i;j<"${#_stagingList[@]}";j++))
    do
      if [ -n "${_stagingList[$i]%,*}" ] && [ "${_stagingList[$i]%,*}" -lt "${_stagingList[$j]%,*}" ]; then
        _stgLst="${_stagingList[$i]}";
        _stagingList[$i]="${_stagingList[$j]}";
        _stagingList[$j]="${_stgLst}";
      fi
    done
  done
  unset IFS;
  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sorted STG dependency list by date - $(($(date +%-S)-_execDate))s"
#-----------------------------------------------------------------------------#
# Update configuration file                                                   #
#-----------------------------------------------------------------------------#
  if [ -f "maketpf.cfg" ]; then
    _execDate=$(date +%-S)
#TPF_ROOT Update--------------------------------------------------------------#
    _syslineNo=($(grep -n '^TPF_ROOT \|#TPF_ROOT ' maketpf.cfg | cut -d : -f 1 ));
    for((i=0; i<${#_syslineNo[@]}; i++)); #Remove all exsiting TPF_ROOT lines
    do
      sed -i "${_syslineNo[0]}d" maketpf.cfg
    done
    if [ -d "${SYS_STG_IMPL_CWRK}derived" ]; then
      sed -i "${_syslineNo[0]} i TPF_ROOT := ${SYS_STG_IMPL_CWRK}derived \t # ${_implLoadDate}" maketpf.cfg
      sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${SYS_STG_IMPL_CWRK%*/} \t # ${_implLoadDate}" maketpf.cfg
    elif [ -d "${SYS_STG_IMPL_CWRK}" ]; then
      sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT := ${SYS_STG_IMPL_CWRK%*/} \t # ${_implLoadDate}" maketpf.cfg
    fi
      for((i=0; i<=${#_devlList[@]}; i++));
      do
        _temp=( ${_devlList[i]/,/ } );
        if [ -n "${_temp[0]// /}" ] && [ "${_temp[0]:0:14}" -eq "${_implLoadDate:0:14}" ]; then #Load date boudry
          if [ -d "${_temp[1]}" ] && [[ "${_temp[1]}" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
          elif [[ "${_temp[1]}" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i #TPF_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
          fi
        elif [ -n "${_temp[0]// /}" ] && [ "${_temp[0]}" -le "${_implLoadDate}" ]; then #Load date boudry
          if [ -d "${_temp[1]}" ] && [[ "${_temp[1]}" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
          elif [[ "${_temp[1]}" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i #TPF_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
          fi
        fi
      done
      for((i=0; i<=${#_stagingList[@]}; i++));
      do
        _temp=( ${_stagingList[i]/,/ } );
        if [ -n "${_temp[0]// /}" ] && [ "${_temp[0]:0:14}" -eq "${_implLoadDate:0:14}" ]; then #Load date boudry
          if [ -d "${_temp[1]}" ] && [[ "${_temp[1]}" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
          elif [[ "${_temp[1]}" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i #TPF_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
          fi
        elif [ -n "${_temp[0]// /}" ] && [ "${_temp[0]}" -le "${_implLoadDate}" ]; then #Load date boudry
          if [ -d "${_temp[1]}" ] && [[ "${_temp[1]}" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
          elif [[ "${_temp[1]}" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i #TPF_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
          fi
        fi
      done
    #fi
    if [ -d "${PRD_ORIGIN_SYS}/derived" ]; then
      sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${PRD_ORIGIN_SYS}/derived" maketpf.cfg
    fi
    if [ -d "${PRD_ORIGIN_SYS}" ] && [ -n "${PRD_ORIGIN_SYS}" ]; then
      sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${PRD_ORIGIN_SYS}" maketpf.cfg
    elif [ -n "${PRD_ORIGIN_SYS}" ]; then
      sed -i "$((_syslineNo=_syslineNo + 1)) i #TPF_ROOT += ${PRD_ORIGIN_SYS}" maketpf.cfg
    fi
    if [[ "${USR_IMPL_CORE,,}" =~ ^(apo|pgr|pre)$ ]]; then
      for((i=0; i<=${#_devlList[@]}; i++));
      do
        _temp=( ${_devlList[i]/,/ } );
        if [ -n "${_temp[0]// /}" ] && [ "${_temp[0]:0:14}" -eq "${_implLoadDate:0:14}" ]; then #Load date boudry
          if [ -d "${_temp[1]}/common" ] && [[ "${_temp[1]}/common" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${_temp[1]}/common \t # ${_temp[0]}" maketpf.cfg
          fi
        elif [ -n "${_temp[0]// /}" ] && [ "${_temp[0]}" -le "${_implLoadDate}" ]; then #Load date boudry
          if [ -d "${_temp[1]}/common" ] && [[ "${_temp[1]}/common" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${_temp[1]}/common \t # ${_temp[0]}" maketpf.cfg
          fi
        fi
      done
      for((i=0; i<=${#_stagingList[@]}; i++));
      do
        _temp=( ${_stagingList[i]/,/ } );
        if [ -n "${_temp[0]// /}" ] && [ "${_temp[0]:0:14}" -eq "${_implLoadDate:0:14}" ]; then
          if [ -d "${_temp[1]}/common" ] && [[ "${_temp[1]}/common" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${_temp[1]}/common \t # ${_temp[0]}" maketpf.cfg
          fi
        elif [ -n "${_temp[0]// /}" ] && [ "${_temp[0]}" -le "${_implLoadDate}" ]; then #Load date boudry
          if [ -d "${_temp[1]}/common" ] && [[ "${_temp[1]}/common" =~ ztpfsys ]] && [ -n "${_temp[1]// /}" ]; then
            sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${_temp[1]}/common \t # ${_temp[0]}" maketpf.cfg
          fi
        fi
      done
      if [ -d "${PRD_ORIGIN_CSY}/derived" ] && [ -n "${PRD_ORIGIN_CSY}" ]; then
        sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${PRD_ORIGIN_CSY}/derived" maketpf.cfg
      fi
      if [ -d "${PRD_ORIGIN_CSY}" ] && [ -n "${PRD_ORIGIN_CSY}" ]; then
        sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${PRD_ORIGIN_CSY}" maketpf.cfg
      elif [ -n "${PRD_ORIGIN_CSY}" ]; then
        sed -i "$((_syslineNo=_syslineNo + 1)) i #TPF_ROOT += ${PRD_ORIGIN_CSY}" maketpf.cfg
      fi
    fi
    if [ -n "${PRD_ORIGIN_IBM}" ]; then
      sed -i "$((_syslineNo=_syslineNo + 1)) i TPF_ROOT += ${PRD_ORIGIN_IBM}" maketpf.cfg
    fi
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: TPF_ROOT Updated - $(($(date +%-S)-_taskDate))s"
#APPL_ROOT Update-------------------------------------------------------------#
    _taskDate=$(date +%-S)
    _applineNo=($(grep -n '^APPL_ROOT \|#APPL_ROOT ' maketpf.cfg | cut -d : -f 1 ));
    for((i=0; i<${#_applineNo[@]}; i++)); #Remove all exsiting TPF_ROOT lines
    do
      sed -i "${_applineNo[0]}d" maketpf.cfg
    done
    if [ -d "${APP_STG_IMPL_CWRK}derived" ]; then
      sed -i "${_applineNo[0]} i APPL_ROOT := ${APP_STG_IMPL_CWRK}derived \t # ${_implLoadDate}" maketpf.cfg
      sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${APP_STG_IMPL_CWRK%*/} \t # ${_implLoadDate}" maketpf.cfg
    elif [ -d "${APP_STG_IMPL_CWRK}" ]; then
      sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT := ${APP_STG_IMPL_CWRK%*/} \t # ${_implLoadDate}" maketpf.cfg
    fi
    for((i=0; i<=${#_devlList[@]}; i++));
    do
      _temp=( ${_devlList[i]/,/ } );
      if [ -n "${_temp[0]// /}" ] && [ "${_temp[0]:0:14}" -eq "${_implLoadDate:0:14}" ]; then #Load date boudry
        if [ -d "${_temp[1]}" ] && [[ "${_temp[1]}" =~ ztpfrepos ]] && [ -n "${_temp[1]// /}" ]; then
          sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
        elif [[ "${_temp[1]}" =~ ztpfrepos ]] && [ -n "${_temp[1]// /}" ]; then
          sed -i "$((_applineNo=_applineNo + 1)) i #APPL_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
        fi
      elif [ -n "${_temp[0]// /}" ] && [ "${_temp[0]}" -le "${_implLoadDate}" ]; then #Load date boudry
        if [ -d "${_temp[1]}" ] && [[ "${_temp[1]}" =~ ztpfrepos ]] && [ -n "${_temp[1]// /}" ]; then
          sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
        elif [[ "${_temp[1]}" =~ ztpfrepos ]] && [ -n "${_temp[1]// /}" ]; then
          sed -i "$((_applineNo=_applineNo + 1)) i #APPL_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
        fi
      fi
    done
    for((i=0; i<=${#_stagingList[@]}; i++));
    do
      _temp=( ${_stagingList[i]/,/ } );
      if [ -n "${_temp[0]// /}" ] && [ "${_temp[0]:0:14}" -eq "${_implLoadDate:0:14}" ]; then
        if [ -d "${_temp[1]}" ] && [[ "${_temp[1]}" =~ ztpfrepos ]] && [ -n "${_temp[1]// /}" ]; then
          sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
        elif [[ "${_temp[1]}" =~ ztpfrepos ]] && [ -n "${_temp[1]// /}" ]; then
          sed -i "$((_applineNo=_applineNo + 1)) i #APPL_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
        fi
      elif [ -n "${_temp[0]// /}" ] && [ "${_temp[0]}" -le "${_implLoadDate}" ]; then #Load date boudry
        if [ -d "${_temp[1]}" ] && [[ "${_temp[1]}" =~ ztpfrepos ]] && [ -n "${_temp[1]// /}" ]; then
          sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
        elif [[ "${_temp[1]}" =~ ztpfrepos ]] && [ -n "${_temp[1]// /}" ]; then
          sed -i "$((_applineNo=_applineNo + 1)) i #APPL_ROOT += ${_temp[1]} \t # ${_temp[0]}" maketpf.cfg
        fi
      fi
    done
    if [[ "${USR_IMPL_CORE,,}" =~ ^(apo|pgr|pre)$ ]]; then
      if [ -d "${PRD_ORIGIN_CAP}/derived" ]; then
        sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${PRD_ORIGIN_CAP}/derived" maketpf.cfg
      fi
      if [ -d "${PRD_ORIGIN_CAP}" ]; then
        sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${PRD_ORIGIN_CAP}" maketpf.cfg
      fi
    fi
    if [ -d "${PRD_ORIGIN_APP}/derived" ]; then
      sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${PRD_ORIGIN_APP}/derived" maketpf.cfg
    fi
    if [ -d "${PRD_ORIGIN_APP}" ]; then
      sed -i "$((_applineNo=_applineNo + 1)) i APPL_ROOT += ${PRD_ORIGIN_APP}" maketpf.cfg
    else
      sed -i "$((_applineNo=_applineNo + 1)) i #APPL_ROOT += ${PRD_ORIGIN_APP}" maketpf.cfg
    fi
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: APPL_ROOT Updated - $(($(date +%-S)-_taskDate))s"
#NON-IBM FLAGS Update---------------------------------------------------------#
    if [[ "$BLD_FLAG" == "APP" ]]; then
      _taskDate=$(date +%-S)
      if [ "${USR_IMPL_CORE}" == "pgr" ]; then #Disable FLAGS only for PGR
        _flagLineNo="$(grep -n 'CFLAGS_USER := -fshort-enums' maketpf.cfg | grep -v "\#" | cut -d : -f 1)";
        if [ -n "${_flagLineNo// /}" ]; then
          sed -i "${_flagLineNo}d" maketpf.cfg
          sed -i "${_flagLineNo} i #CFLAGS_USER := -fshort-enums" maketpf.cfg
        fi
        _flagLineNo="$(grep -n 'CXXFLAGS_USER := -fshort-enums' maketpf.cfg | grep -v "\#" | cut -d : -f 1)";
        if [ -n "${_flagLineNo// /}" ]; then
          sed -i "${_flagLineNo}d" maketpf.cfg
          sed -i "${_flagLineNo} i #CXXFLAGS_USER := -fshort-enums" maketpf.cfg
        fi
        _flagLineNo="$(grep -n 'CFLAGS_USER += -fshort-enums' maketpf.cfg | grep -v "\#" | cut -d : -f 1)";
        if [ -n "${_flagLineNo// /}" ]; then
          sed -i "${_flagLineNo}d" maketpf.cfg
          sed -i "${_flagLineNo} i #CFLAGS_USER += -fshort-enums" maketpf.cfg
        fi
        _flagLineNo="$(grep -n 'CXXFLAGS_USER += -fshort-enums' maketpf.cfg | grep -v "\#" | cut -d : -f 1)";
        if [ -n "${_flagLineNo// /}" ]; then
          sed -i "${_flagLineNo}d" maketpf.cfg
          sed -i "${_flagLineNo} i #CXXFLAGS_USER += -fshort-enums" maketpf.cfg
        fi
      else #Enable C FLAGS except for PGR
        _flagLineNo="$(grep -n '#CFLAGS_USER := -fshort-enums' maketpf.cfg | cut -d : -f 1)";
        if [ -n "${_flagLineNo// /}" ]; then
          sed -i "${_flagLineNo}d" maketpf.cfg
          sed -i "${_flagLineNo} i CFLAGS_USER := -fshort-enums" maketpf.cfg
        fi
        _flagLineNo="$(grep -n '#CXXFLAGS_USER := -fshort-enums' maketpf.cfg | cut -d : -f 1)";
        if [ -n "${_flagLineNo// /}" ]; then
          sed -i "${_flagLineNo}d" maketpf.cfg
          sed -i "${_flagLineNo} i CXXFLAGS_USER := -fshort-enums" maketpf.cfg
        fi
        _flagLineNo="$(grep -n '#CFLAGS_USER += -fshort-enums' maketpf.cfg | cut -d : -f 1)";
        if [ -n "${_flagLineNo// /}" ]; then
          sed -i "${_flagLineNo}d" maketpf.cfg
          sed -i "${_flagLineNo} i CFLAGS_USER += -fshort-enums" maketpf.cfg
        fi
        _flagLineNo="$(grep -n '#CXXFLAGS_USER += -fshort-enums' maketpf.cfg | cut -d : -f 1)";
        if [ -n "${_flagLineNo// /}" ]; then
          sed -i "${_flagLineNo}d" maketpf.cfg
          sed -i "${_flagLineNo} i CXXFLAGS_USER += -fshort-enums" maketpf.cfg
        fi
      fi
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: FLAGS updated for NON-IBM segments - $(($(date +%-S)-_taskDate))s"
    fi
#IBM FLAGS Update-------------------------------------------------------------#
    if [[ "$BLD_FLAG" == "SYS" ]]; then
      _taskDate=$(date +%-S)
      _flagLineNo="$(grep -n 'CFLAGS_USER := -fshort-enums' maketpf.cfg | grep -v "\#" | cut -d : -f 1)";
      if [ -n "${_flagLineNo// /}" ]; then
        sed -i "${_flagLineNo}d" maketpf.cfg
        sed -i "${_flagLineNo} i #CFLAGS_USER := -fshort-enums" maketpf.cfg
      fi
      _flagLineNo="$(grep -n 'CXXFLAGS_USER := -fshort-enums' maketpf.cfg | grep -v "\#" | cut -d : -f 1)";
      if [ -n "${_flagLineNo// /}" ]; then
        sed -i "${_flagLineNo}d" maketpf.cfg
        sed -i "${_flagLineNo} i #CXXFLAGS_USER := -fshort-enums" maketpf.cfg
      fi
      _flagLineNo="$(grep -n 'CFLAGS_USER += -fshort-enums' maketpf.cfg | grep -v "\#" | cut -d : -f 1)";
      if [ -n "${_flagLineNo// /}" ]; then
        sed -i "${_flagLineNo}d" maketpf.cfg
        sed -i "${_flagLineNo} i #CFLAGS_USER += -fshort-enums" maketpf.cfg
      fi
      _flagLineNo="$(grep -n 'CXXFLAGS_USER += -fshort-enums' maketpf.cfg | grep -v "\#" | cut -d : -f 1)";
      if [ -n "${_flagLineNo// /}" ]; then
        sed -i "${_flagLineNo}d" maketpf.cfg
        sed -i "${_flagLineNo} i #CXXFLAGS_USER += -fshort-enums" maketpf.cfg
      fi
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: FLAGS updated for IBM segments - $(($(date +%-S)-_taskDate))s"
    fi
#Set active workspace path----------------------------------------------------#
    _taskDate=$(date +%-S)
    _syslineNo=($(grep -n '^TPF_ROOT \|#TPF_ROOT ' maketpf.cfg | cut -d : -f 1 ));
    _sysPtr="${_syslineNo[0]}";
    sed -i "${_sysPtr}s/./:/10" maketpf.cfg #Replace exiting + symbol
    _applineNo=($(grep -n '^APPL_ROOT \|#APPL_ROOT ' maketpf.cfg | cut -d : -f 1 ));
    _appPtr="${_applineNo[0]}";
    sed -i "${_appPtr}s/./:/11" maketpf.cfg #Replace exiting + symbol
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Set DVL workspace as primary path - $(($(date +%-S)-_taskDate))s"
#Set user custom put level----------------------------------------------------#
    _taskDate=$(date +%-S)
    _putlineNo=($(grep -n " /ztpf/\|/ztpfsys/${USR_IMPL_CORE,,}" maketpf.cfg | cut -d : -f 1 ));
    _putPtr="${_putlineNo[0]}";
    if [ "${putStatus}" == 'prod' ]; then
      _implPutstatus=${_implPutLevel};
    elif [ "${putStatus}" == 'devl' ]; then
      _implPutstatus="devl";
    fi
    if [[ "${USR_IMPL_CORE,,}" =~ ^(apo|pgr|pre)$ ]]; then
      sed -i "${_putPtr}d" maketpf.cfg #Delete existing files
      sed -i "${_putPtr}d" maketpf.cfg #Delete existing files
      sed -i "${_putPtr}d" maketpf.cfg #Delete existing files
      sed -i "${_putPtr}d" maketpf.cfg #Delete existing files
      sed -i "${_putPtr} i TPF_ROOT += /ztpf/ibm/${_implPutLevel}" maketpf.cfg
      sed -i "${_putPtr} i TPF_ROOT += /ztpfsys/common/${_implPutstatus}" maketpf.cfg
      sed -i "${_putPtr} i TPF_ROOT += /ztpfsys/${USR_IMPL_CORE,,}/${_implPutstatus}" maketpf.cfg
      sed -i "${_putPtr} i TPF_ROOT += /ztpfsys/${USR_IMPL_CORE,,}/${_implPutstatus}/derived" maketpf.cfg
    else
      sed -i "${_putPtr}d" maketpf.cfg #Delete existing files
      sed -i "${_putPtr}d" maketpf.cfg #Delete existing files
      sed -i "${_putPtr}d" maketpf.cfg #Delete existing files
      sed -i "${_putPtr} i TPF_ROOT += /ztpf/ibm/${_implPutLevel}" maketpf.cfg
      sed -i "${_putPtr} i TPF_ROOT += /ztpfsys/${USR_IMPL_CORE,,}/${_implPutstatus}" maketpf.cfg
      sed -i "${_putPtr} i TPF_ROOT += /ztpfsys/${USR_IMPL_CORE,,}/${_implPutstatus}/derived" maketpf.cfg
    fi
    if [ "${_putPtr}" == "${_sysPtr}" ]; then           # replace it one more time
      _finalPutNo=($(grep -n '^TPF_ROOT \|#TPF_ROOT ' maketpf.cfg | cut -d : -f 1 ))
      _finPtr="${_finalPutNo[0]}"
      sed -i "${_finPtr}s/./:/10" maketpf.cfg      #Replace exiting + symbol
    fi
    # pdddsLibs Funcation call not required for staging build
    buildMSG="${USR_IMPL_PLAN^^}: maketpf.cfg file has been generated for ${USR_IMPL_CORE}"
    sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Configured with implementation plan support zTPF level - $(($(date +%-S)-_taskDate))s"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: maketpf.cfg configuration file updated along with dependency and flags - $(($(date +%-S)-_execDate))s"
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Maketpf.cfg not found RC:$EC"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: maketpf.cfg not found";
    _RC="${EC}";
  fi
  return "${_RC}";
}
#-----------------------------------------------------------------------------#
function getConfig {
  local _RC=0;
  local _prodSrcSub="$1";
  local i="";
  local _execDate;                     #Execution block timestamp
  local _taskDate;                     #Execution task execution timestamp
  local _submDate;                     #Subtask execution timestamp
  _execDate=$(date +%-S)
  for i in {0..2}                      #Retry if it's failed
  do
    wget --no-check-certificate -N "${CFG_URL}" &> /dev/null; _RC=$?;
    if [ "${_RC}" -ne 0 ]; then
      curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/doGC?pCompany=${REF_COMPANY}&pRepoName=${_prodSrcSub}&pisSource=true"; _RC=$?;
      if [ "${_RC}" -eq 0 ]; then
        wget --no-check-certificate -N "${CFG_URL}" &> /dev/null; _RC=$?;
      fi
    fi
    if [ "${_RC}" -eq 0 ]; then
      break;
    elif [ "${_RC}" -eq 128 ]; then
      sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Git remote re-try - $i RC:$_RC"
      echo -e "WARNING: git remote re-try - $i" &> /dev/null; #DEBUG
      sleep 3;
      if [ -f "${CFG_URL##*/}" ]; then
        _RC="$RC";
      else
        _RC="$EC";
      fi
    else
      _RC="$EC";
    fi
  done
  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Retrived maketpf.cfg from remote repository - $(($(date +%-S)-_execDate))s"
  if [ "${_RC}" -lt 1 ]; then
    updateConfig "${implementation,,}" "${implPutLevel,,}" "${implDependancyDvl,,}" "${implDependancyStg,,}"; _RC=$?;
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Failed to get maketpf.cfg from remote repository RC:$EC"
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Failed to get maketpf.cfg from remote repository"; _RC="${EC}";
  fi
  return "${_RC}";
}
#
##-----------------------------------------------------------------------------#
#function submoduleLFS {
#  local _branch="$1";
#  local _RC=0;
#  local i="";
#  local _execDate;                     #Execution block timestamp
#  local _taskDate;                     #Execution task execution timestamp
#  local _submDate;                     #Subtask execution timestamp
#  if [ -d "${GIT_CLONE}${_putlev}/derived_${_putlev}" ]; then
#    _execDate=$(date +%-S)
#    pushd "${GIT_CLONE}${_putlev}/derived_${_putlev}" &>/dev/null;
#      git reset --hard &> /dev/null
#      git checkout "${_branch}" &> /dev/null
#      GIT_SSL_NO_VERIFY=true git fetch --all
#      retryCMD "GIT_SSL_NO_VERIFY=true git push -u origin ${_branch} --tags" "N" "N"; _RC=$?;
#      if [ "${_RC}" -ne 0 ]; then
#        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git derived artefacts PUSH to derived_${_putlev} remote repository failed"
#        _taskDate=$(date +%-S)
#        curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/doGC?pCompany=${REF_COMPANY}&pRepoName=derived_${_putlev}&pisSource=true"; _RC=$?;
#        if [ "${_RC}" -eq 0 ]; then
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git do GC to reindex derived artefact derived_${_putlev} remote repository - $(($(date +%-S)-_taskDate))s"
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Re-Try git derived artefacts PUSH to derived_${_putlev} remote repository"
#          retryCMD "GIT_SSL_NO_VERIFY=true git push -u origin ${_branch} --tags" "N" "N"; _RC=$?;
#        else
#          _RC="$EC"
#        fi
#      fi
#      if [ "${_RC}" -eq 0 ]; then
#        _taskDate=$(date +%-S)
#        GIT_SSL_NO_VERIFY=true git checkout master; _RC=$?;
#        if [ "${_RC}" -eq 0 ]; then
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Checkout default master branch in IBM zTPF level local cache derived_${_putlev} repository - $(($(date +%-S)-_taskDate))s"
#        else
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Checkout default master branch in IBM zTPF level local cache derived_${_putlev} repository failed - $(($(date +%-S)-_taskDate))s"
#          _RC="$EC"
#        fi
#      fi
#    popd &>/dev/null ;
#    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git derived artefacts PUSH to remote repository - $(($(date +%-S)-_execDate))s"
#  fi
#  return "${_RC}";
#}
#-----------------------------------------------------------------------------#
#function derivedLFS {
#  local _RC=0;
#  local _DC=0;
#  local _FC=0;
#  local _srcCommitHash;
#  local _binCommitHash;
#  local _sortUniq;
#  local _gitReference=();
#  local i="";
#  local _execDate;                     #Execution block timestamp
#  local _taskDate;                     #Execution task execution timestamp
#  local _submDate;                     #Subtask execution timestamp
##Store derived artifacts to GitLFS--------------------------------------------#
#  if [ -d "${APP_STG_IMPL_CWRK}" ] || [ -d "${SYS_STG_IMPL_CWRK}" ]; then
#    #Delete temp workspace if alreay exist
#    [ -d "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}" ] && rm -rf "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}";
#    DEV_SURL="${DEV_BIN_RURL_SUSR}/gitblit/r/${DEV_GIT_SRC}";
#    DEV_DURL="${DEV_BIN_RURL_SUSR}/gitblit/r/${DEV_GIT_BIN}";
#    DEV_SRC_RURL_SMOD="${DEV_SRC_CHNL}://${DEV_RHOST}:${DEV_SRC_PORT}";
#    DEV_BIN_RURL_SMOD="${DEV_BIN_CHNL}://${DEV_RHOST}:${DEV_BIN_PORT}/gitblit/r";
##Git clone source repository using HTTP protocol------------------------------#
#    if [ ! -d "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_SRC" ]; then
#      _execDate=$(date +%-S)
#      retryCMD "GIT_SSL_NO_VERIFY=true git clone -b ${USR_MASTER_CORE} ${DEV_SURL} ${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_SRC" "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_SRC" "N"; _RC=$?;
#      if [ "${_RC}" -ne 0 ]; then
#        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git clone ${USR_IMPL_PLAN} source repository failed"
#        _taskDate=$(date +%-S)
#        curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/doGC?pCompany=${REF_COMPANY}&pRepoName=${USR_IMPL_PLAN}&pisSource=true"; _RC=$?;
#        if [ "${_RC}" -eq 0 ]; then
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git do GC to reindex source artefact ${USR_IMPL_PLAN} remote repository - $(($(date +%-S)-_taskDate))s"
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Re-Try Git clone ${USR_IMPL_PLAN} source repository"
#          retryCMD "GIT_SSL_NO_VERIFY=true git clone -b ${USR_MASTER_CORE} ${DEV_SURL} ${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_SRC" "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_SRC" "N"; _RC=$?;
#        else
#          _RC="$EC"
#        fi
#      fi
#      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git clone ${USR_IMPL_PLAN} source repository - $(($(date +%-S)-_execDate))s"
#    fi
#    if [ "${_RC}" -eq 0 ]; then
#      if [ -d "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}" ]; then
#        pushd "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}" &> /dev/null;
#          if [ -d "${USR_IMPL_PLAN}_SRC" ]; then
#            pushd "${USR_IMPL_PLAN}_SRC" &> /dev/null;
#              _execDate=$(date +%-S)
#              GIT_SSL_NO_VERIFY=true git submodule update --init &> /dev/null;
#              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git all submodule update initialized - $(($(date +%-S)-_execDate))s"
#              #shellcheck disable=SC2002
#              declare -a _srcProdUrl=( $(cat .gitmodules | grep url | cut -d ' ' -f3) );
#              #shellcheck disable=SC2002
#              declare -a _srcProdPath=( $(cat .gitmodules | grep path | cut -d ' ' -f3) );
#              i="";
#              for i in "${_srcProdPath[@]}"
#              do
#                _execDate=$(date +%-S)
#                pushd "${i}" &> /dev/null;
#                  git checkout "${USR_IMPL_PLAN}_${USR_IMPL_CORE}" &> /dev/null;
#                popd &> /dev/null;
#                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Switch to ${i} repository and then checkout ${USR_IMPL_PLAN}_${USR_IMPL_CORE} branch - $(($(date +%-S)-_execDate))s"
#              done
#              declare -a _srcProdList=( $(find .gitref/ -type f) );
#              _srcCommitHash="$(git log -1 --pretty=%h)";
#            popd &> /dev/null;
#          fi
#        popd &> /dev/null;
#      fi
##Git clone derived repository using HTTP protocol-----------------------------#
#      if [ ! -d "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_BIN" ]; then
#        _execDate=$(date +%-S)
#        retryCMD "GIT_SSL_NO_VERIFY=true git clone -b ${USR_MASTER_CORE} ${DEV_DURL} ${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_BIN" "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_BIN" "N"; _RC=$?;
#        if [ "${_RC}" -ne 0 ]; then
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git clone ${USR_IMPL_PLAN} derived repository failed"
#          _taskDate=$(date +%-S)
#          curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/doGC?pCompany=${REF_COMPANY}&pRepoName=${USR_IMPL_PLAN}&pisSource=true"; _RC=$?;
#          if [ "${_RC}" -eq 0 ]; then
#            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git do GC to reindex source artefact ${USR_IMPL_PLAN} remote repository - $(($(date +%-S)-_taskDate))s"
#            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Re-Try Git clone ${USR_IMPL_PLAN} source repository"
#            retryCMD "GIT_SSL_NO_VERIFY=true git clone -b ${USR_MASTER_CORE} ${DEV_DURL} ${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_BIN" "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_BIN" "N"; _RC=$?;
#          else
#            _RC="$EC"
#          fi
#        fi
#        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git clone ${USR_IMPL_PLAN} derived repository - $(($(date +%-S)-_execDate))s"
#      fi
#      if [ "${_RC}" -eq 0 ]; then
#        if [ -d "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_BIN" ]; then
#          pushd "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}/${USR_IMPL_PLAN}_BIN" &> /dev/null
#            #Git to prepare production BIN support
#            if [[ ! -d "./.gitref" ]]; then
#              mkdir .gitref;
#            fi
#            _execDate=$(date +%-S)
#            GIT_SSL_NO_VERIFY=true git submodule update --init &> /dev/null
#            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git all submodule update initialized - $(($(date +%-S)-_execDate))s"
##Production URL process to add submodule--------------------------------------#
#            i="";
#            for i in "${_srcProdUrl[@]}"
#            do
#              _prefixName="${i##*tpf/}"
#              _prefixName="${_prefixName%/*}"
#              _suffixName="${i##*_}"
#              _subModName="./.gitref/derived_${_suffixName%.*}"
#              if [[ "${_subModName}" =~ ${implPutLevel} ]]; then
#                _execDate=$(date +%-S)
#                if [[ -d "${GIT_CLONE}${_suffixName%.*}/derived_${_suffixName%.*}" ]]; then
#                  j="";
#                  for j in {0..2}      #Retry if it's failed
#                  do
#                    if [ ! -d "${_subModName}" ]; then
#                      _taskDate=$(date +%-S)
#                      GIT_SSL_NO_VERIFY=true git submodule add -f --name "${_subModName}" -- "${GIT_CLONE}${_suffixName%.*}/derived_${_suffixName%.*}" "${_subModName}" &> /dev/null; _RC=$?;
#                      if [ "${_RC}" -ne 0 ]; then
#                        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Submodule ${_subModName} add failed"
#                        _submDate=$(date +%-S)
#                        curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/doGC?pCompany=${REF_COMPANY}&pRepoName=derived_${_suffixName%.*}&pisSource=true"; _RC=$?;
#                        if [ "${_RC}" -eq 0 ]; then
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git do GC to reindex ${_subModName} remote repository - $(($(date +%-S)-_submDate))s"
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Re-Try Git submodule to add ${_subModName} remote repository"
#                          GIT_SSL_NO_VERIFY=true git submodule add -f --name "${_subModName}" -- "${GIT_CLONE}${_suffixName%.*}/derived_${_suffixName%.*}" "${_subModName}" &> /dev/null; _RC=$?;
#                        fi
#                      fi
#                      if [ "${_RC}" -eq 0 ]; then
#                        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Submodule ${_subModName} added - $(($(date +%-S)-_taskDate))s"
#                        break;
#                      elif [ "${_RC}" -eq 0 ]; then
#                        sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Git remote not acccessible re-try attempt - $i RC:$_RC"
#                        echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Git remote not acccessible re-try attempt - $i" &> /dev/null; #DEBUG
#                        rm -rf "${_subModName}"
#                        sleep 3;
#                        _RC="$EC";
#                      else
#                        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Submodule ${_subModName} failed to add - $(($(date +%-S)-_taskDate))s"
#                        _RC="$EC";
#                      fi
#                    else
#                      break;
#                    fi
#                  done
#                  if [[ -d  "${GIT_CLONE}${_suffixName%.*}/${USR_MASTER_CORE}" ]]; then
#                    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Master repo is cloned already.. ${USR_MASTER_CORE} RC:$RC"
#                    echo -e "Master repo is cloned already.. ${USR_MASTER_CORE}";
#                  else
#                    if [ -d "${GIT_CLONE}${_suffixName%.*}" ]; then
#                      pushd "${GIT_CLONE}${_suffixName%.*}" &> /dev/null
#                        _execDate=$(date +%-S)
#                        k="";
#                        for k in {0..2} #Retry if it's failed
#                        do
#                          if [ ! -d "${USR_MASTER_CORE}" ]; then
#                            GIT_SSL_NO_VERIFY=true git clone -b "${USR_MASTER_CORE}" "${DEV_BIN_RURL_SMOD}/tpf/${_prefixName}/derived_${_suffixName}" "${USR_MASTER_CORE}" &> /dev/null; _DC=$?;
#                            if [ "${_DC}" -ne 0 ]; then
#                              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git clone ${_suffixName} remote repository failed"
#                              _taskDate=$(date +%-S)
#                              curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/doGC?pCompany=${REF_COMPANY}&pRepoName=derived_${_suffixName%.*}&pisSource=true"; _DC=$?;
#                              if [ "${_DC}" -eq 0 ]; then
#                                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git do GC to reindex to ${_suffixName} remote repository - $(($(date +%-S)-_taskDate))s"
#                                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Re-Try git clone ${_suffixName} remote repository"
#                                GIT_SSL_NO_VERIFY=true git clone -b "${USR_MASTER_CORE}" "${DEV_BIN_RURL_SMOD}/tpf/${_prefixName}/derived_${_suffixName}" "${USR_MASTER_CORE}" &> /dev/null; _DC=$?;
#                              fi
#                            fi
#                            if [ "${_DC}" -eq 0 ]; then
#                              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git clone ${_suffixName} repository from remote - $(($(date +%-S)-_execDate))s"
#                              break;
#                            elif [ "${_DC}" -eq 128 ]; then
#                              sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Git remote not acccessible re-try attempt - $i RC:$_DC"
#                              echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Git remote not acccessible re-try attempt - $i" &> /dev/null; #DEBUG
#                              rm -rf "${USR_MASTER_CORE}"
#                              sleep 3;
#                              _DC="$EC";
#                            else
#                              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git clone ${_suffixName} repository from remote error - $(($(date +%-S)-_execDate))s"
#                              _DC="$EC";
#                            fi
#                          else
#                            break;
#                          fi
#                        done
#                        if [ "$_DC" -eq 0 ]; then
#                          pushd "${USR_MASTER_CORE}" &> /dev/null;
#                            git branch -r | grep -v '\->' | while read -r remote; do git branch --track "${remote#origin/}" "$remote"; done
#                          popd &> /dev/null;
#                        fi
#                      popd &> /dev/null
#                    fi
#                  fi
#                else
#                  mkdir -p "${GIT_CLONE}${_suffixName%.*}"
#                  pushd "${GIT_CLONE}${_suffixName%.*}" &> /dev/null
#                    j="";
#                    for j in {0..2}    #Retry if it's failed
#                    do
#                      if [ ! -d "derived_${_suffixName%.*}" ]; then
#                        _taskDate=$(date +%-S)
#                        GIT_SSL_NO_VERIFY=true git clone "${DEV_BIN_RURL_SMOD}/tpf/${_prefixName}/derived_${_suffixName}" "derived_${_suffixName%.*}" &> /dev/null; _FC=$?;
#                        if [ "${_FC}" -ne 0 ]; then
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git clone ${_suffixName} failed"
#                          _submDate=$(date +%-S)
#                          curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/doGC?pCompany=${REF_COMPANY}&pRepoName=derived_${_suffixName%.*}&pisSource=true"; _FC=$?;
#                          if [ "${_FC}" -eq 0 ]; then
#                            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git do GC to reindex ${_suffixName} remote repository - $(($(date +%-S)-_submDate))s"
#                            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Re-Try Git clone ${_suffixName} repository"
#                            GIT_SSL_NO_VERIFY=true git clone "${DEV_BIN_RURL_SMOD}/tpf/${_prefixName}/derived_${_suffixName}" "derived_${_suffixName%.*}" &> /dev/null; _FC=$?;
#                          fi
#                        fi
#                        if [ "${_FC}" -eq 0 ]; then
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git clone ${_suffixName} completed - $(($(date +%-S)-_taskDate))s"
#                          break;
#                        elif [ "${_FC}" -eq 128 ]; then
#                          sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Git remote not acccessible re-try attempt - $i RC:$_FC"
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Git remote not acccessible re-try attempt - $i" &> /dev/null; #DEBUG
#                          rm -rf "derived_${_suffixName%.*}";
#                          sleep 3;
#                          _FC="$EC";
#                        else
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Submodule ${_subModName} failed to add - $(($(date +%-S)-_taskDate))s"
#                          _FC="$EC";
#                        fi
#                      else
#                        break;
#                      fi
#                    done
#                    k="";
#                    for k in {0..2} #Retry if it's failed
#                    do
#                      if [ ! -d "${USR_MASTER_CORE}" ]; then
#                        _taskDate=$(date +%-S)
#                        GIT_SSL_NO_VERIFY=true git clone -b "${USR_MASTER_CORE}" "${DEV_BIN_RURL_SMOD}/tpf/${_prefixName}/derived_${_suffixName}" "${USR_MASTER_CORE}" &> /dev/null; _DC=$?;
#                        if [ "${_DC}" -ne 0 ]; then
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git clone ${_suffixName} failed"
#                          _submDate=$(date +%-S)
#                          curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/doGC?pCompany=${REF_COMPANY}&pRepoName=derived_${_suffixName%.*}&pisSource=true"; _DC=$?;
#                          if [ "${_DC}" -eq 0 ]; then
#                            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git do GC to reindex ${_suffixName} remote repository - $(($(date +%-S)-_submDate))s"
#                            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Re-Try Git clone ${_suffixName} repository"
#                            GIT_SSL_NO_VERIFY=true git clone -b "${USR_MASTER_CORE}" "${DEV_BIN_RURL_SMOD}/tpf/${_prefixName}/derived_${_suffixName}" "${USR_MASTER_CORE}" &> /dev/null; _DC=$?;
#                          fi
#                        fi
#                        if [ "${_DC}" -eq 0 ]; then
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git clone ${_suffixName} completed - $(($(date +%-S)-_taskDate))s"
#                          break;
#                        elif [ "${_DC}" -eq 128 ]; then
#                          sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Git remote not acccessible re-try attempt - $i RC:$_DC"
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Git remote not acccessible re-try attempt - $i" &> /dev/null; #DEBUG
#                          rm -rf "${USR_MASTER_CORE}";
#                          sleep 3;
#                          _DC="$EC";
#                        else
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Submodule ${_subModName} failed to add - $(($(date +%-S)-_taskDate))s"
#                          _DC="$EC";
#                        fi
#                      else
#                        break;
#                      fi
#                    done
#                    if [ "${_DC}" -eq 0 ]; then
#                      pushd "${USR_MASTER_CORE}" &> /dev/null;
#                        git branch -r | grep -v '\->' | while read -r remote; do git branch --track "${remote#origin/}" "$remote"; done
#                      popd &> /dev/null;
#                    fi
#                    if [ "${_FC}" -eq 0 ]; then
#                      pushd "derived_${_suffixName%.*}" &> /dev/null;
#                        git branch -r | grep -v '\->' | while read -r remote; do git branch --track "${remote#origin/}" "$remote"; done
#                      popd &> /dev/null;
#                    fi
#                  popd &> /dev/null;
#                  if [[ ! -d  "${_subModName}" ]]; then
#                    j="";
#                    for j in {0..2}    #Retry if it's failed
#                    do
#                      if [ ! -d "${_subModName}" ]; then
#                        _taskDate=$(date +%-S)
#                        GIT_SSL_NO_VERIFY=true git submodule add -f --name "${_subModName}" -- "${GIT_CLONE}${_suffixName%.*}/derived_${_suffixName%.*}" "${_subModName}" &> /dev/null; _RC=$?;
#                        if [ "${_RC}" -eq 0 ]; then
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git submodule add ${_subModName} completed - $(($(date +%-S)-_taskDate))s"
#                          break;
#                        elif [ "${_RC}" -eq 128 ]; then
#                          sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Git remote re-try  - $i RC:$_RC"
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: git remote re-try - $i" &> /dev/null; #DEBUG
#                          rm -rf "${_subModName}";
#                          sleep 3;
#                          _RC="$EC";
#                        else
#                          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git submodule add ${_subModName} failed"
#                          _RC="$EC";
#                        fi
#                      else
#                        break;
#                      fi
#                    done
#                  fi
#                fi
#                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git production repository ${_subModName} attached as submodule in ${USR_IMPL_PLAN} derived repo - $(($(date +%-S)-_execDate))s"
#              else
#                if [[ ! -d  "${_subModName}" ]]; then
#                  j="";
#                  for j in {0..2}      #Retry if it's failed
#                  do
#                    if [ ! -d "${_subModName}" ]; then
#                      _taskDate=$(date +%-S)
#                      GIT_SSL_NO_VERIFY=true git submodule add -f --name "${_subModName}" -- "${DEV_BIN_RURL_SMOD}/tpf/${_prefixName}/derived_${_suffixName}" "${_subModName}" &> /dev/null; _RC=$?;
#                      if [ "${_RC}" -eq 0 ]; then
#                        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git submodule add ${_subModName} completed - $(($(date +%-S)-_taskDate))s"
#                        break;
#                      elif [ "${_RC}" -eq 128 ]; then
#                        sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Git remote re-try  - $i RC:$_RC"
#                        echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: git remote re-try - $i" &> /dev/null; #DEBUG
#                        rm -rf "${_subModName}";
#                        sleep 3;
#                        _RC="$EC";
#                      else
#                        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git submodule add ${_subModName} failed"
#                        _RC="$EC";
#                      fi
#                    else
#                      break;
#                    fi
#                  done
#                fi
#              fi
#              if [ -d "${_subModName}" ]; then
#                pushd "${_subModName}" &> /dev/null;
#                  _taskDate=$(date +%-S)
#                  git branch -a | grep "${USR_IMPL_PLAN}_${USR_IMPL_CORE}" &> /dev/null; _FC=$?;
#                  if [ "$_FC" -eq 0 ]; then
#                    git checkout "${USR_IMPL_PLAN}_${USR_IMPL_CORE}" &> /dev/null;
#                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Switch to ${_subModName} repository and then checkout ${USR_IMPL_PLAN}_${USR_IMPL_CORE} branch - $(($(date +%-S)-_taskDate))s"
#                  else
#                    git checkout -b "${USR_IMPL_PLAN}_${USR_IMPL_CORE}" &> /dev/null;
#                    echo -e "derived/* binary\nlib/* binary\nload/* binary\nobj/* binary\nbase/lib/* binary\nbase/load/* binary\nbase/obj/* binary\nbss/lib/* binary\nbss/load/* binary\nbss/obj/* binary\n" > .gitattributes
#                    touch .gitignore;
#                    git add . &> /dev/null;
#                    git commit -am "Initial Commit" &> /dev/null;
#                    _binCommitHash="$(git log -1 --pretty=%h)";
#                    _gitReference+="${PWD},${USR_IMPL_PLAN}_${USR_IMPL_CORE} ";
#                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Switch to ${_subModName} repository and then checkout ${USR_IMPL_PLAN}_${USR_IMPL_CORE} branch - $(($(date +%-S)-_taskDate))s"
#                  fi
#                popd &> /dev/null;
#              fi
#            done
#            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Clean-up existing derived objects in repository to copy new objects RC:${_RC}"
#            rm ./* -rf &> /dev/null #Clean-up existing derived objects from the repository
#            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Clean-up existing derived objects in repository to copy new objects.";
##NON-IBM segment update ------------------------------------------------------#
#            if [ -d "${STG_TPF_APP}/${USR_IMPL_PLAN}" ]; then
#              _execDate=$(date +%-S)
#              cp -fr --preserve=all "${STG_TPF_APP}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}/maketpf.cfg" "maketpf.cfg";
#              #Production derived reference store
#              for j in "${_srcProdList[@]}"
#              do
#                j1="${j##*/}";
#                j2="${j1%.*}";
#                _tempCut0="${j#*/}";
#                _tempCut1="${_tempCut0%%/*}";
#                _tempCut2="${_tempCut1#*_}";
#                if [ -n "$j2" ]; then
#                  _devBinList=( $( find "${STG_TPF_APP}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}" -type f \( -name "*${j2}*" -o -name "*${j2^^}*" \) ) );
#                  for k in "${_devBinList[@]}"
#                  do
#                    _copyFile="${k##*${USR_IMPL_CORE}/}";
#                    k1="${k##*/}";
#                    k2="${k1%.*}";
#                    _taskDate=$(date +%-S)
#                    if [[ "$k1" =~ ($EXT_TPF_APP) ]]; then
#                      if [[ "${_copyFile}" =~ derived ]] || [[ ${_copyFile} =~ sbtasm ]] || [[ ${_copyFile} =~ sbtlst ]]; then #Derived TPFAR & SABRE support
#                        if [[ "${_copyFile}" =~ / ]]; then
#                          mkdir -p "${_copyFile%/*}";
#                          mkdir -p ".gitref/derived_${_tempCut2}/${_copyFile%/*}";
#                        fi
#                        #Copy to plan derived repository
#                        cp -fr --preserve=all "${STG_TPF_APP}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}/${_copyFile}" "${_copyFile}";
#                        #Copy to production derived repository
#                        cp -fr --preserve=all "${STG_TPF_APP}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}/${_copyFile}" ".gitref/derived_${_tempCut2}/${_copyFile}";
#                      else
#                        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:SKIP - $k RC:$RC"
#                        echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: SKIP - $k" &> /dev/null;
#                      fi
#                    else
#                      if [[ "${_copyFile}" =~ / ]]; then
#                        mkdir -p "${_copyFile%/*}";
#                        mkdir -p ".gitref/derived_${_tempCut2}/${_copyFile%/*}";
#                      fi
#                      cp -fr --preserve=all "${STG_TPF_APP}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}/${_copyFile}" "${_copyFile}";
#                      #Copy to production derived repository
#                      cp -fr --preserve=all "${STG_TPF_APP}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}/${_copyFile}" ".gitref/derived_${_tempCut2}/${_copyFile}";
#                    fi
#                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: ${_copyFile} file copied to implementations and productions derived repository - $(($(date +%-S)-_taskDate))s"
#                  done
#                fi
#              done
#              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: NON-IBM Segments updated - $(($(date +%-S)-_execDate))s"
#            fi
##IBM Segment update-----------------------------------------------------------#
#            if [ -d "${STG_TPF_SYS}/${USR_IMPL_PLAN}" ]; then
#              _execDate=$(date +%-S)
#              cp -fr --preserve=all "${STG_TPF_SYS}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}/maketpf.cfg" "maketpf.cfg";
#              #Production derived reference store
#              for j in "${_srcProdList[@]}"
#              do
#                j1="${j##*/}";
#                j2="${j1%.*}";
#                _tempCut0="${j#*/}";
#                _tempCut1="${_tempCut0%%/*}";
#                _tempCut2="${_tempCut1#*_}";
#                if [ -n "$j2" ]; then
#                  _devBinList=( $( find "${STG_TPF_SYS}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}" -type f \( -name "*${j2}*" -o -name "*${j2^^}*" \) ) );
#                  for k in "${_devBinList[@]}"
#                  do
#                    _copyFile="${k##*${USR_IMPL_CORE}/}";
#                    k1="${k##*/}";
#                    k2="${k1%.*}";
#                    _taskDate=$(date +%-S)
#                    if [[ "$k1" =~ ($EXT_TPF_APP) ]]; then
#                      sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:SKIP-$k RC:$RC"
#                      echo "SKIP-$k" &> /dev/null;
#                    else
#                      if [[ ! "${_copyFile}" =~ /oco/ ]]; then
#                        if [[ "${_copyFile}" =~ / ]]; then
#                          mkdir -p "${_copyFile%/*}";
#                          mkdir -p ".gitref/derived_${_tempCut2}/${_copyFile%/*}";
#                        fi
#                        cp -fr --preserve=all "${STG_TPF_SYS}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}/${_copyFile}" "${_copyFile}";
#                        cp -fr --preserve=all "${STG_TPF_SYS}/${USR_IMPL_PLAN}/${USR_IMPL_CORE}/${_copyFile}" ".gitref/derived_${_tempCut2}/${_copyFile}";
#                      fi
#                    fi
#                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: ${_copyFile} file copied to implementations and productions derived repository - $(($(date +%-S)-_taskDate))s"
#                  done
#                fi
#              done
#              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: IBM Segments updated - $(($(date +%-S)-_execDate))s"
#            fi
#            _execDate=$(date +%-S)
#            echo -e "derived/* binary\nlib/* binary\nload/* binary\nobj/* binary\nbase/lib/* binary\nbase/load/* binary\nbase/obj/* binary\nbss/lib/* binary\nbss/load/* binary\nbss/obj/* binary\n" > .gitattributes
#            git add . &> /dev/null;
#            git commit -am "${USR_IMPL_PLAN}_${_srcCommitHash} - Build." &> /dev/null;
#            _binCommitHash4="$(git log -1 --pretty=%h)";
#            _gitReference+="${PWD},${USR_MASTER_CORE} ";
#            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Derived files added into implementation plan repository - $(($(date +%-S)-_execDate))s"
#            for j in "${_srcProdList[@]}"
#            do
#              j1="${j##*/}";
#              j2="${j1%.*}";
#              _tempCut0="${j#*/}";
#              _tempCut1="${_tempCut0%%/*}";
#              _tempCut2="${_tempCut1#*_}";
#              if [ -d ".gitref/derived_${_tempCut2}" ]; then
#                _taskDate=$(date +%-S)
#                pushd ".gitref/derived_${_tempCut2}" &> /dev/null;
#                  git checkout "${USR_IMPL_PLAN}_${USR_IMPL_CORE}" &> /dev/null;
#                  echo -e "derived/* binary\nlib/* binary\nload/* binary\nobj/* binary\nbase/lib/* binary\nbase/load/* binary\nbase/obj/* binary\nbss/lib/* binary\nbss/load/* binary\nbss/obj/* binary\n" > .gitattributes
#                  git add . &> /dev/null;
#                  git commit -am "${USR_IMPL_PLAN}_${_binCommitHash4} - Build." &> /dev/null;
#                  _binCommitHash5="$(git log -1 --pretty=%h)";
#                  _gitReference+="${PWD},${USR_IMPL_PLAN}_${USR_IMPL_CORE} ";
#                  if [[ "${_tempCut2}" =~ ${implPutLevel} ]]; then
#                    _putlev="${_tempCut2}";
#                  fi
#                popd &> /dev/null
#                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: ${j1} source files related with derived files added into derived_${_tempCut2} production repository - $(($(date +%-S)-_taskDate))s"
#              fi
#            done
#          popd &> /dev/null
#        else
#          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Derived repository not accessible RC:$EC"
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Derived repository not accessible.";
#          _RC="${EC}";
#        fi
#        #Clean-up dir if the process successs
#        if [ "${_RC}" -eq 0 ]; then
#          _execDate=$(date +%-S)
#          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Git operation initiated to background job RC:$_RC"
#          echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git operation initiated to background job";
#          _sortUniq=($(echo "${_gitReference[@]}" | tr ' ' '\n' | sort -u | tr '\n' ';'));
#          bash "$MTP_ENV/mtpgitpushbinary" "${HOME}/${USER}_${USR_IMPL_PLAN}_${USR_IMPL_CORE}" "${_sortUniq[@]}" ; _RC=$?;
#          if [ "${_RC}" -eq 0 ]; then
#            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Git derived artefacts PUSH to remote repository - $(($(date +%-S)-_execDate))s"
#            if [[ "${_putlev}" =~ ${implPutLevel} ]]; then
#              submoduleLFS "${USR_IMPL_PLAN}_${USR_IMPL_CORE}";
#            fi
#          else
#            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Git derived artefacts PUSH to remote repository failed - $(($(date +%-S)-_execDate))s"
#          fi
#        fi
#      else
#        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Source repository not accessible RC:$EC"
#        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Source repository not accessible.";
#        _RC="${EC}";
#      fi
#    else
#      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Source repository not accessible RC:$EC"
#      echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Source repository not accessible.";
#      _RC="${EC}";
#    fi
#  else
#    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Stagging workspace not available RC:$EC"
#    echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Stagging workspace not available.";
#    _RC="${EC}";
#  fi
#  return "${_RC}";
#}
#-----------------------------------------------------------------------------#
# main execution
if [ "${RC}" -eq 0 ]; then
  if [ "${BLD_MUL_STT}" == "true" ]; then
    USR_IMPL_DATE="${implementation##*_}";
    warnList="";
    getParmFromBranch "${implementation%_*}" "STG"; #RC=$?;
    if [ -d "${APP_STG_IMPL_CWRK}" ] || [ -d "${SYS_STG_IMPL_CWRK}" ]; then
      if [ -d "/ztpf/ibm/${implPutLevel}" ] && [ -d "/ztpfsys/${USR_IMPL_CORE,,}/${implPutLevel}" ]; then
        #NON-IBM Segments
        if [ -d "${APP_STG_IMPL_CWRK}" ]; then
          pushd "${APP_STG_IMPL_CWRK}" &> /dev/null; #Switch to project workspace
            rm ./*.cfg &> /dev/null;
            # shellcheck disable=2270,2185,1117
            appTotal=( $(find -type f -regex ".*/.*\.\(asm\|bak\|c\|cbl\|cms\|cpp\|for\|htm\|oco\|sbt\|scr\|java\|pl1\|mak\|cpy\|mac\|h\|hpp\|inc\|dfdl\|dat\|bsc\|dbc\|hfs\|jcl\|job\|200\|201\|ans\|ass\|lis\|loa\|log\|lsc\|oth\|pil\|rt\|tok\|uns\|vis\|xml\|xsd\|l\|ypp\|json\)") );
            execDate=$(date +%-S)
            if [ "${REF_COMPANY}" == tp ]; then
              #echo "Traveport"          #Get config for Travelport account
              CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/tp/nonibm/nonibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
              BLD_FLAG="APP";
              getConfig "nonibm_conf" ; RC=$?;
            elif [ "${REF_COMPANY}" == dl ]; then
              #echo "Delta"              #Get config for Delta account
              CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/dl/nonibm/nonibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
              getConfig "nonibm_conf" ; RC=$?;
            fi
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: NON-IBM configuration file generated - $(($(date +%-S)-execDate))s"
            if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
              StgPath="${APP_STG_IMPL_CWRK}";
              execDate=$(date +"%Y-%m-%d %H:%M:%S")
              sabrCompile; RC=$?;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sabretalk pre-process completed - $(($(date +%-S)-execDate))s"
              if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                execDate=$(date +"%Y-%m-%d %H:%M:%S")
                tpfBuild; RC=$?;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Completed TPF source file compilation process - $(($(date +%-S)-execDate))s"
              fi
              execDate=$(date +"%Y-%m-%d %H:%M:%S")
              unResolved; RC=$?;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: TPF Build unresolved references validated - $(($(date +%-S)-execDate))s"
            fi
            if [[ -n "${warnList}" ]]; then
              appNonError=( $(find . -type f -name "*.err" ${warnList} ) );
              #change
            else
              appNonError=( $(find . -type f -name "*.err" ) );
            fi
            appError=();
            for verfErr in "${appNonError[@]}";
            do
              if [ -f "${verfErr}" ]; then
                grep "^MTPF\w*E:" "${verfErr}"; _RC="$?";  # actually error files
                if [ "${_RC}" -ne 0 ]; then
                  grep -w "directories do not exist:" "${verfErr}" &> /dev/null; _RC=$?
                  if [ "${_RC}" -ne 0 ]; then
                    appError+=("${verfErr} ")
                    sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Error file NON-IBM Segments ${appError[*]} RC:$RC"
                  else
                    grep "^MTPF\w*W:" "${verfErr}"| grep -v "MTPF1111W:"; _RC=$?
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "WARN: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}."
                      sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}. RC:$RC"
                    else
                      appError+=("${verfErr} ")
                    fi
                  fi
                else
                  appError+=("${verfErr} ")
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file NON-IBM Segments ${appError[*]} RC:$RC"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}."
                  sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}. RC:$RC"
                fi
              fi
            done
          popd &> /dev/null;
        fi
        #IBM Segments compilation
        if [ -d "${SYS_STG_IMPL_CWRK}" ]; then
          pushd "${SYS_STG_IMPL_CWRK}" &> /dev/null; #Switch to project workspace
            #mkdir -p derived && chmod 777 derived
            rm ./*.cfg &> /dev/null;
            # shellcheck disable=2270,2185,1117
            sysTotal=( $(find -type f -regex ".*/.*\.\(asm\|bak\|c\|cbl\|cms\|cpp\|for\|htm\|oco\|sbt\|scr\|java\|pl1\|mak\|cpy\|mac\|h\|hpp\|inc\|dfdl\|dat\|bsc\|dbc\|hfs\|jcl\|job\|200\|201\|ans\|ass\|lis\|loa\|log\|lsc\|oth\|pil\|rt\|tok\|uns\|vis\|xml\|xsd\|l\|ypp\|json\)") );
            execDate=$(date +%-S)
            if [ "${implementation:0:1}" == "t" ]; then
              CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/tp/ibm/ibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
              BLD_FLAG="SYS";
              getConfig "ibm_conf"; RC=$?;
            elif [ "${implementation:0:1}" == "d" ]; then
              CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/dl/ibm/ibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
              getConfig "ibm_conf"; RC=$?;
            fi
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: IBM configuration file generated - $(($(date +%-S)-execDate))s"
            if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
              StgPath="${SYS_STG_IMPL_CWRK}";
              execDate=$(date +%-S)
              sabrCompile; RC=$?;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sabretalk pre-process completed - $(($(date +%-S)-execDate))s"
              if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                execDate=$(date +%-S)
                tpfBuild; RC=$?;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Completed TPF source file compilation process - $(($(date +%-S)-execDate))s"
              fi
              execDate=$(date +%-S)
              unResolved; RC=$?;
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: TPF Build unresolved references validated - $(($(date +%-S)-execDate))s"
            fi
            if [[ -n "${warnList}" ]]; then
              sysIbmError=( $(find . -type f -name "*.err" ${warnList} ) );
            else
              sysIbmError=( $(find . -type f -name "*.err" ) );
            fi
            sysError=();
            for verIbmErr in "${sysIbmError[@]}";
            do
              if [ -f "${verIbmErr}" ]; then
                grep "^MTPF\w*E:" "${verIbmErr}"; _RC=$?;
                if [ "${_RC}" -ne 0 ]; then
                  grep -w "directories do not exist:" "${verIbmErr}" &> /dev/null; _RC=$?
                  if [ "${_RC}" -ne 0 ]; then
                    sysError+=("${verIbmErr} ")
                    sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Error file IBM Segments ${sysError[*]} RC:$RC"
                  else
                    grep "^MTPF\w*W:" "${verIbmErr}"| grep -v "MTPF1111W:"; _RC=$?
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "WARN: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}."
                      sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}. RC:$RC"
                    else
                      sysError+=("${verIbmErr} ")
                    fi
                  fi
                else
                  sysError+=("${verIbmErr} ")
                  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file IBM Segments ${sysError[*]} RC:$RC"
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARN: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}."
                  sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}. RC:$RC"
                fi
              fi
            done
          popd &> /dev/null;
        fi
      else
        printErr="$(date +"%Y-%m-%d %H:%M:%S") ERROR: zTPF level directory not found - ${implPutLevel}"
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${printErr} RC:$EC"
        echo -e "${printErr}"
        RC="${EC}"
      fi
      execDate=$(date +%-S)
      srcTotal=("${appTotal[@]}" "${sysTotal[@]}");
      errTotal=("${appError[@]}" "${sysError[@]}");
      if [ -n "${appError[0]// /}" ]; then
        for appErrs in "${appError[@]}";
        do
          appErrPath+="${APP_STG_IMPL_CWRK}${appErrs##*./},"
        done
      fi
      if [ -n "${sysError[0]// /}" ]; then
        for sysErrs in "${sysError[@]}";
        do
          sysErrPath+="${SYS_STG_IMPL_CWRK}${sysErrs##*./},"
        done
      fi
      if [ "${errTotal[0]}" != '' ] && [ -n "${appErrPath[0]// /}" ] || [ -n "${sysErrPath[0]// /}" ]; then
        if [ -z "${appErrPath[0]// /}" ] && [ -n "${sysErrPath[0]// /}" ]; then
          errFiles="${sysErrPath[*]}"
        elif [ -n "${appErrPath[0]// /}" ] && [ -z "${sysErrPath[0]// /}" ]; then
          errFiles="${appErrPath[*]}"
        elif [ -n "${appErrPath[0]// /}" ] && [ -n "${sysErrPath[0]// /}" ]; then
          errFiles="${appErrPath[*]}${sysErrPath[*]}"
        fi
        failFiles="\"${errFiles%*,}\""
        errFiles="${errFiles%*,}"
        RC="${EC}"
      fi
      #if [ "${errTotal[0]}" != '' ]; then
      #  errFiles="";
      #  for i in "${errTotal[@]}";
      #  do
      #    errFiles="\"${i##*/}\", ${errFiles}";
      #  done
      #  RC="${EC}";
      #fi
      #Validate compiler control table errors if any at NON-IBM
      if [ -f "${APP_STG_IMPL_CWRK}.temp" ] && [ -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
        pushd "${APP_STG_IMPL_CWRK}" &> /dev/null;
          #shellcheck disable=SC2002
          _cntlError=( $(cat .temp | tr "\n" " ") );
          for i in "${_cntlError[@]}"
          do
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt -NON-IBM RC:$EC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt";
          done
          rm ./.temp &> /dev/null;
          RC="${EC}";
        popd &> /dev/null;
      elif [ ! -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND(NON-IBM) RC:$EC"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND"; #Reserved word WARNING
        rm ./.temp &> /dev/null;
        RC="${EC}";
      fi
      #Validate compiler control table errors if any at IBM
      if [ -f "${SYS_STG_IMPL_CWRK}.temp" ] && [ -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
        pushd "${SYS_STG_IMPL_CWRK}" &> /dev/null
          #shellcheck disable=SC2002
          _cntlError=( $(cat .temp | tr "\n" " ") );
          for i in "${_cntlError[@]}";
          do
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt -IBM RC:$EC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt";
          done
          rm ./.temp &> /dev/null;
          RC="${EC}";
        popd &> /dev/null
      elif [ ! -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND(NON-IBM) RC:$EC"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND"; #Reserved word WARNING
        rm ./.temp &> /dev/null;
        RC="${EC}";
      fi
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Post warning check with compiler control tables - $(($(date +%-S)-execDate))s"
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Build workspace not found - ${APP_STG_IMPL_CWRK} ${APP_STG_IMPL_CWRK} RC:$EC"
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Build workspace not found - ${APP_STG_IMPL_CWRK} ${APP_STG_IMPL_CWRK}";
      RC="${EC}";
    fi
    #if [ "${RC}" -eq 0 ]; then
    #  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Build success - Store derived artifacts in progress RC:$RC"
    #  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Build success - Store derived artifacts in progress...";
    #  execDate=$(dat - %S)
    #  derivedLFS; RC=$?;
    #  if [ "${RC}" -eq 0 ]; then
    #    buildMSG="${USR_IMPL_PLAN^^}: Derived artifacts stored in Git repository for ${USR_IMPL_CORE}"
    #    sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
    #  fi
    #  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Derived artifacts stored in Git repository for ${USR_IMPL_CORE} completed - $(($(date +%-S)-execDate))s"
    #else
    #  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Build failed - Store derived artifacts halt RC:$EC"
    #  echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Build failed - Store derived artifacts halt...";
    #  RC="${EC}";
    #fi
    execDate=$(date +%-S)
    if [ -z "${sabreErr}" ]; then
      if [ -z "${errFiles[0]}" ]; then
        loadErr="";
      else
        if [ -z "${errorMesUnres[0]}" ]; then
          loadErr="${errFiles[*]}. Please review the .err files and take corrective action."
        else
          loadErr="${errFiles[*]} ${errorMesUnres}. Please review the .err files and take corrective action."
        fi
        #loadErr="ERROR identified with ${errFiles[*]//\"/}";
      fi
    else
      loadErr="${sabreErr}"
      RC="${EC}";
    fi
    if [ -z "${loadErr}" ]; then
      loadErr="${printErr}"
    fi
    if [ -f "${APP_STG_IMPL_CWRK}TEMP.out" ]; then
      # shellcheck disable=SC2002
      makeErr=$(cat "${APP_STG_IMPL_CWRK}TEMP.out" | grep maketpf_checkeol | cut -d ' ' -f 2)
      loadErr="TEMP.so generated due to ${makeErr##*/} in MAK file or CNTL entry missing"
      RC="$EC"
    elif [ -f "${SYS_STG_IMPL_CWRK}TEMP.out" ]; then
      # shellcheck disable=SC2002
      makeErr=$(cat "${SYS_STG_IMPL_CWRK}TEMP.out" | grep maketpf_checkeol | cut -d ' ' -f 2)
      loadErr="TEMP.so generated due to ${makeErr##*/} in MAK file or CNTL entry missing"
      RC="$EC"
    fi
    if [ -d "${APP_STG_IMPL_CWRK}" ]; then
      appBuildErr=$(buildVerify "${APP_STG_IMPL_CWRK%/*}")
    fi
    if [ -d "${SYS_STG_IMPL_CWRK}" ]; then
      sysBuildErr=$(buildVerify "${SYS_STG_IMPL_CWRK%/*}")
    fi
    if [ -n "${appBuildErr// /}" ] || [ -n "${sysBuildErr// /}" ]; then
      if [[ -n "${appBuildErr// /}" ]] && [[ -n "${sysBuildErr// /}" ]]; then
        printErr="Source ${appBuildErr} in ${APP_STG_IMPL_CWRK} and ${sysBuildErr} in ${SYS_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
      elif [[ -z "${appBuildErr}" ]] && [[ -n "${sysBuildErr// /}" ]]; then
        printErr="Source ${sysBuildErr} in ${SYS_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
      elif [[ -n "${appBuildErr// /}" ]] && [[ -z "${sysBuildErr// /}" ]]; then
        printErr="Source ${appBuildErr} in ${APP_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
      fi
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${printErr} RC:$EC"
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${printErr}";
      if [ -z "${loadErr// /}" ]; then
        loadErr="${printErr}"
      fi
      RC="$EC";
    fi
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Error validation in build directory completed - $(($(date +%-S)-execDate))s"
    if [ "${RC}" -eq 0 ]; then
      jobstatus="TRUE";
    elif [ "${RC}" -eq 4 ]; then
      jobstatus="TRUE";
      RC=0;
    else
      jobstatus="FALSE";
    fi
    echo -e "\\nJSON RESULT --> { \"totalCount\" :\"${#srcTotal[@]}\" , \"failedCount\" : \"${#errTotal[@]}\", \"failedFiles\" : [$failFiles] , \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\" , \"errorMessage\" : \"$loadErr\", \"jobStatus\" : \"$jobstatus\" }\n";
  elif [ "${BLD_MUL_STT}" == "false" ]; then
    lockfile="/tmp/multiplebuild.lck"
    if [ -f ${lockfile} ]; then
      execDate=$(date +%-S)
      USR_IMPL_DATE="${implementation##*_}";
      getParmFromBranch "${implementation%_*}" "STG"; #RC=$?;
      sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:$(date +%-S) - START wait for existing DVL or STAGING build to be complete -- ${implementation%_*} RC:$RC"
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: - START wait for existing DVL or STAGING build to be complete -- ${implementation%_*}"
      curl -k -s "${PRD_API_CHNL}://${PRD_API_HOST}:${PRD_API_PORT}/${PRD_API_BDB}?planId=${implementation}&runStatus=wait" &> /dev/null;
      while ls "${lockfile[0]}"
      do
        psaux=$(cat "${lockfile}")
        if [ -n "${psaux[0]// /}" ]; then
          ps -axu | awk '{print$2}' | grep -x "${psaux}";_RC=$?
          if [ "${_RC}" -ne 0 ]; then
            rm -f "${lockfile}";
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Existing DVL or STAGING build in process, DVL build for $(hostname) and process id is ${psaux} -- ${implementation%_*} RC:$RC"
            echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Existing DVL or STAGING build in process for $(hostname) and process id is ${psaux} -- ${implementation%_*}"
          fi
        fi
        sleep 3;
      done
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Build wait queue completed  - $(($(date +%-S)-execDate))s"
      touch "${lockfile}"
      echo ${SPID} > "${lockfile}";
      sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:$(date +%Y%m%d%H%M%S) - END wait for existing DVL or STAGING build -- ${implementation%_*} RC:$RC"
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: - END wait for existing DVL or STAGING build -- ${implementation%_*}"
      curl -k -s "${PRD_API_CHNL}://${PRD_API_HOST}:${PRD_API_PORT}/${PRD_API_BDB}?planId=${implementation}&runStatus=run" &> /dev/null;
      warnList="";
      if [ -d "${APP_STG_IMPL_CWRK}" ] || [ -d "${SYS_STG_IMPL_CWRK}" ]; then
        if [ -d "/ztpf/ibm/${implPutLevel}" ] && [ -d "/ztpfsys/${USR_IMPL_CORE,,}/${implPutLevel}" ]; then
          #NON-IBM Segments
          if [ -d "${APP_STG_IMPL_CWRK}" ]; then
            pushd "${APP_STG_IMPL_CWRK}" &> /dev/null; #Switch to project workspace
              rm ./*.cfg &> /dev/null;
              # shellcheck disable=2270,2185,1117
              appTotal=( $(find -type f -regex ".*/.*\.\(asm\|bak\|c\|cbl\|cms\|cpp\|for\|htm\|oco\|sbt\|scr\|java\|pl1\|mak\|cpy\|mac\|h\|hpp\|inc\|dfdl\|dat\|bsc\|dbc\|hfs\|jcl\|job\|200\|201\|ans\|ass\|lis\|loa\|log\|lsc\|oth\|pil\|rt\|tok\|uns\|vis\|xml\|xsd\|l\|ypp\|json\)") );
              execDate=$(date +%-S)
              if [ "${REF_COMPANY}" == tp ]; then
                #echo "Traveport"          #Get config for Travelport account
                CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/tp/nonibm/nonibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
                BLD_FLAG="APP";
                getConfig "nonibm_conf" ; RC=$?;
              elif [ "${REF_COMPANY}" == dl ]; then
                #echo "Delta"              #Get config for Delta account
                CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/dl/nonibm/nonibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
                getConfig "nonibm_conf" ; RC=$?;
              fi
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: NON-IBM configuration file generated - $(($(date +%-S)-execDate))s"
              if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                StgPath="${APP_STG_IMPL_CWRK}";
                execDate=$(date +%-S)
                sabrCompile; RC=$?;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sabretalk pre-process completed - $(($(date +%-S)-execDate))s"
                if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                  execDate=$(date +%-S)
                  tpfBuild; RC=$?;
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Completed TPF source file compilation process - $(($(date +%-S)-execDate))s"
                fi
                execDate=$(date +%-S)
                unResolved; RC=$?;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: TPF Build unresolved references validated - $(($(date +%-S)-execDate))s"
              fi
              if [[ -n "${warnList}" ]]; then
                appNonError=( $(find . -type f -name "*.err" ${warnList} ) );
                #change
              else
                appNonError=( $(find . -type f -name "*.err" ) );
              fi
              appError=();
              for verfErr in "${appNonError[@]}";
              do
                if [ -f "${verfErr}" ]; then
                  grep "^MTPF\w*E:" "${verfErr}"; _RC="$?";  # actually error files
                  if [ "${_RC}" -ne 0 ]; then
                    grep -w "directories do not exist:" "${verfErr}" &> /dev/null; _RC=$?
                    if [ "${_RC}" -ne 0 ]; then
                      appError+=("${verfErr} ")
                      sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Error file NON-IBM Segments ${appError[*]} RC:$RC"
                    else
                      grep "^MTPF\w*W:" "${verfErr}"| grep -v "MTPF1111W:"; _RC=$?
                      if [ "${_RC}" -ne 0 ]; then
                        echo -e "WARN: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}."
                        sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}. RC:$RC"
                      else
                        appError+=("${verfErr} ")
                      fi
                    fi
                  else
                    appError+=("${verfErr} ")
                    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file NON-IBM Segments ${appError[*]} RC:$RC"
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}."
                    sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}. RC:$RC"
                  fi
                fi
              done
            popd &> /dev/null;
          fi
          #IBM Segments compilation
          if [ -d "${SYS_STG_IMPL_CWRK}" ]; then
            pushd "${SYS_STG_IMPL_CWRK}" &> /dev/null; #Switch to project workspace
              #mkdir -p derived && chmod 777 derived
              rm ./*.cfg &> /dev/null;
              # shellcheck disable=2270,2185,1117
              sysTotal=( $(find -type f -regex ".*/.*\.\(asm\|bak\|c\|cbl\|cms\|cpp\|for\|htm\|oco\|sbt\|scr\|java\|pl1\|mak\|cpy\|mac\|h\|hpp\|inc\|dfdl\|dat\|bsc\|dbc\|hfs\|jcl\|job\|200\|201\|ans\|ass\|lis\|loa\|log\|lsc\|oth\|pil\|rt\|tok\|uns\|vis\|xml\|xsd\|l\|ypp\|json\)") );
              if [ "${implementation:0:1}" == "t" ]; then
                CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/tp/ibm/ibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
                BLD_FLAG="SYS";
                getConfig "ibm_conf"; RC=$?;
              elif [ "${implementation:0:1}" == "d" ]; then
                CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/dl/ibm/ibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
                getConfig "ibm_conf"; RC=$?;
              fi
              if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                StgPath="${SYS_STG_IMPL_CWRK}";
                sabrCompile; RC=$?;
                if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                  tpfBuild; RC=$?;
                fi
                unResolved; RC=$?;
              fi
              if [[ -n "${warnList}" ]]; then
                sysIbmError=( $(find . -type f -name "*.err" ${warnList} ) );
              else
                sysIbmError=( $(find . -type f -name "*.err" ) );
              fi
              sysError=();
              for verIbmErr in "${sysIbmError[@]}";
              do
                if [ -f "${verIbmErr}" ]; then
                  grep "^MTPF\w*E:" "${verIbmErr}"; _RC=$?;
                  if [ "${_RC}" -ne 0 ]; then
                    grep -w "directories do not exist:" "${verIbmErr}" &> /dev/null; _RC=$?
                    if [ "${_RC}" -ne 0 ]; then
                      sysError+=("${verIbmErr} ")
                      sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Error file IBM Segments ${sysError[*]} RC:$RC"
                    else
                      grep "^MTPF\w*W:" "${verIbmErr}"| grep -v "MTPF1111W:"; _RC=$?
                      if [ "${_RC}" -ne 0 ]; then
                        echo -e "WARN: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}."
                        sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}. RC:$RC"
                      else
                        sysError+=("${verIbmErr} ")
                      fi
                    fi
                  else
                    sysError+=("${verIbmErr} ")
                    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file IBM Segments ${sysError[*]} RC:$RC"
                  fi
                fi
              done
            popd &> /dev/null;
          fi
        else
          printErr="$(date +"%Y-%m-%d %H:%M:%S") ERROR: zTPF level directory not found - ${implPutLevel}"
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${printErr} RC:$EC"
          echo -e "${printErr}"
          RC="${EC}"
        fi
        srcTotal=("${appTotal[@]}" "${sysTotal[@]}");
        errTotal=("${appError[@]}" "${sysError[@]}");
        if [ -n "${appError[0]// /}" ]; then
          for appErrs in "${appError[@]}";
          do
            appErrPath+="${APP_STG_IMPL_CWRK}${appErrs##*./},"
          done
        fi
        if [ -n "${sysError[0]// /}" ]; then
          for sysErrs in "${sysError[@]}";
          do
            sysErrPath+="${SYS_STG_IMPL_CWRK}${sysErrs##*./},"
          done
        fi
        if [ "${errTotal[0]}" != '' ] && [ -n "${appErrPath[0]// /}" ] || [ -n "${sysErrPath[0]// /}" ]; then
          if [ -z "${appErrPath[0]// /}" ] && [ -n "${sysErrPath[0]// /}" ]; then
            errFiles="${sysErrPath[*]}"
          elif [ -n "${appErrPath[0]// /}" ] && [ -z "${sysErrPath[0]// /}" ]; then
            errFiles="${appErrPath[*]}"
          elif [ -n "${appErrPath[0]// /}" ] && [ -n "${sysErrPath[0]// /}" ]; then
            errFiles="${appErrPath[*]}${sysErrPath[*]}"
          fi
          failFiles="\"${errFiles%*,}\""
          errFiles="${errFiles%*,}"
          RC="${EC}"
        fi
        #if [ "${errTotal[0]}" != '' ]; then
        #  errFiles="";
        #  for i in "${errTotal[@]}";
        #  do
        #    errFiles="\"${i##*/}\", ${errFiles}";
        #  done
        #  RC="${EC}";
        #fi
        #Validate compiler control table errors if any at NON-IBM
        if [ -f "${APP_STG_IMPL_CWRK}.temp" ] && [ -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
          pushd "${APP_STG_IMPL_CWRK}" &> /dev/null;
            #shellcheck disable=SC2002
            _cntlError=( $(cat .temp | tr "\n" " ") );
            for i in "${_cntlError[@]}"
            do
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt -NON-IBM RC:$EC"
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt";
            done
            rm ./.temp &> /dev/null;
            RC="${EC}";
          popd &> /dev/null;
        elif [ ! -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND(NON-IBM) RC:$EC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND"; #Reserved word WARNING
          rm ./.temp &> /dev/null;
          RC="${EC}";
        fi
        #Validate compiler control table errors if any at IBM
        if [ -f "${SYS_STG_IMPL_CWRK}.temp" ] && [ -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
          pushd "${SYS_STG_IMPL_CWRK}" &> /dev/null
            #shellcheck disable=SC2002
            _cntlError=( $(cat .temp | tr "\n" " ") );
            for i in "${_cntlError[@]}";
            do
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt -IBM RC:$EC"
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt";
            done
            rm ./.temp &> /dev/null;
            RC="${EC}";
          popd &> /dev/null
        elif [ ! -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND(NON-IBM) RC:$EC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND"; #Reserved word WARNING
          rm ./.temp &> /dev/null;
          RC="${EC}";
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Build workspace not found - ${APP_STG_IMPL_CWRK} ${APP_STG_IMPL_CWRK} RC:$EC"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Build workspace not found - ${APP_STG_IMPL_CWRK} ${APP_STG_IMPL_CWRK}";
        RC="${EC}";
      fi
      #if [ "${RC}" -eq 0 ]; then
      #  execDate=$(date +%-S)
      #  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Build success - Store derived artifacts in progress RC:$RC"
      #  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Build success - Store derived artifacts in progress...";
      #  derivedLFS; RC=$?;
      #  if [ "${RC}" -eq 0 ]; then
      #    buildMSG="${USR_IMPL_PLAN^^}: Derived artifacts stored in Git repository for ${USR_IMPL_CORE}"
      #    sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
      #  fi
      #  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Store derived artifacts completed - $(($(date +%-S)-execDate))s"
      #else
      #  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Build failed - Store derived artifacts halt RC:$EC"
      #  echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Build failed - Store derived artifacts halt...";
      #  RC="${EC}";
      #fi
      execDate=$(date +%-S)
      if [ -z "${sabreErr}" ]; then
        if [ -z "${errFiles[0]}" ]; then
          loadErr="";
        else
          if [ -z "${errorMesUnres[0]}" ]; then
            loadErr="${errFiles[*]}. Please review the .err files and take corrective action."
          else
            loadErr="${errFiles[*]} ${errorMesUnres}. Please review the .err files and take corrective action."
          fi
          #loadErr="ERROR identified with ${errFiles[*]//\"/}";
        fi
      else
        loadErr="${sabreErr}"
        RC="${EC}";
      fi
      if [ -z "${loadErr}" ]; then
        loadErr="${printErr}"
      fi
      if [ -f "${APP_STG_IMPL_CWRK}TEMP.out" ]; then
        # shellcheck disable=SC2002
        makeErr=$(cat "${APP_STG_IMPL_CWRK}TEMP.out" | grep maketpf_checkeol | cut -d ' ' -f 2)
        loadErr="TEMP.so generated due to ${makeErr##*/} in MAK file or CNTL entry missing"
        RC="$EC"
      elif [ -f "${SYS_STG_IMPL_CWRK}TEMP.out" ]; then
        # shellcheck disable=SC2002
        makeErr=$(cat "${SYS_STG_IMPL_CWRK}TEMP.out" | grep maketpf_checkeol | cut -d ' ' -f 2)
        loadErr="TEMP.so generated due to ${makeErr##*/} in MAK file or CNTL entry missing"
        RC="$EC"
      fi
      if [ -d "${APP_STG_IMPL_CWRK}" ]; then
        appBuildErr=$(buildVerify "${APP_STG_IMPL_CWRK%/*}")
      fi
      if [ -d "${SYS_STG_IMPL_CWRK}" ]; then
        sysBuildErr=$(buildVerify "${SYS_STG_IMPL_CWRK%/*}")
      fi
      if [ -n "${appBuildErr// /}" ] || [ -n "${sysBuildErr// /}" ]; then
        if [[ -n "${appBuildErr// /}" ]] && [[ -n "${sysBuildErr// /}" ]]; then
          printErr="Source ${appBuildErr} in ${APP_STG_IMPL_CWRK} and ${sysBuildErr} in ${SYS_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
        elif [[ -z "${appBuildErr}" ]] && [[ -n "${sysBuildErr// /}" ]]; then
          printErr="Source ${sysBuildErr} in ${SYS_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
        elif [[ -n "${appBuildErr// /}" ]] && [[ -z "${sysBuildErr// /}" ]]; then
          printErr="Source ${appBuildErr} in ${APP_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
        fi
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${printErr} RC:$EC"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${printErr}";
        if [ -z "${loadErr// /}" ]; then
          loadErr="${printErr}"
        fi
        RC="$EC";
      fi
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Error validation in build directory completed - $(($(date +%-S)-execDate))s"
      if [ "${RC}" -eq 0 ]; then
        jobstatus="TRUE";
      elif [ "${RC}" -eq 4 ]; then
        jobstatus="TRUE";
        RC=0;
      else
        jobstatus="FALSE";
      fi
      echo -e "\\nJSON RESULT --> { \"totalCount\" :\"${#srcTotal[@]}\" , \"failedCount\" : \"${#errTotal[@]}\", \"failedFiles\" : [$failFiles] , \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\" , \"errorMessage\" : \"$loadErr\", \"jobStatus\" : \"$jobstatus\" }\n";
    else
      lockfile="/tmp/multiplebuild.lck"
      touch "${lockfile}"
      echo ${SPID} > "${lockfile}";
      USR_IMPL_DATE="${implementation##*_}";
      curl -k -s "${PRD_API_CHNL}://${PRD_API_HOST}:${PRD_API_PORT}/${PRD_API_BDB}?planId=${implementation}&runStatus=run" &> /dev/null;
      warnList="";
      getParmFromBranch "${implementation%_*}" "STG"; #RC=$?;
      if [ -d "${APP_STG_IMPL_CWRK}" ] || [ -d "${SYS_STG_IMPL_CWRK}" ]; then
        if [ -d "/ztpf/ibm/${implPutLevel}" ] && [ -d "/ztpfsys/${USR_IMPL_CORE,,}/${implPutLevel}" ]; then
          #NON-IBM Segments
          if [ -d "${APP_STG_IMPL_CWRK}" ]; then
            pushd "${APP_STG_IMPL_CWRK}" &> /dev/null; #Switch to project workspace
              rm ./*.cfg &> /dev/null;
              # shellcheck disable=2270,2185,1117
              appTotal=( $(find -type f -regex ".*/.*\.\(asm\|bak\|c\|cbl\|cms\|cpp\|for\|htm\|oco\|sbt\|scr\|java\|pl1\|mak\|cpy\|mac\|h\|hpp\|inc\|dfdl\|dat\|bsc\|dbc\|hfs\|jcl\|job\|200\|201\|ans\|ass\|lis\|loa\|log\|lsc\|oth\|pil\|rt\|tok\|uns\|vis\|xml\|xsd\|l\|ypp\|json\)") );
              execDate=$(date +%-S)
              if [ "${REF_COMPANY}" == tp ]; then
                #echo "Traveport"          #Get config for Travelport account
                CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/tp/nonibm/nonibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
                BLD_FLAG="APP";
                getConfig "nonibm_conf" ; RC=$?;
              elif [ "${REF_COMPANY}" == dl ]; then
                #echo "Delta"              #Get config for Delta account
                CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/dl/nonibm/nonibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
                getConfig "nonibm_conf" ; RC=$?;
              fi
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: NON-IBM configuration file generated - $(($(date +%-S)-execDate))s"
              if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                StgPath="${APP_STG_IMPL_CWRK}";
                execDate=$(date +%-S)
                sabrCompile; RC=$?;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sabretalk pre-process completed - $(($(date +%-S)-execDate))s"
                if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                  execDate=$(date +%-S)
                  tpfBuild; RC=$?;
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Completed TPF source file compilation process - $(($(date +%-S)-execDate))s"
                fi
                execDate=$(date +%-S)
                unResolved; RC=$?;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: TPF Build unresolved references validated - $(($(date +%-S)-execDate))s"
              fi
              if [[ -n "${warnList}" ]]; then
                appNonError=( $(find . -type f -name "*.err" ${warnList} ) );
                #change
              else
                appNonError=( $(find . -type f -name "*.err" ) );
              fi
              appError=();
              for verfErr in "${appNonError[@]}";
              do
                if [ -f "${verfErr}" ]; then
                  grep "^MTPF\w*E:" "${verfErr}"; _RC="$?";  # actually error files
                  if [ "${_RC}" -ne 0 ]; then
                    grep -w "directories do not exist:" "${verfErr}" &> /dev/null; _RC=$?
                    if [ "${_RC}" -ne 0 ]; then
                      appError+=("${verfErr} ")
                      sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Error file NON-IBM Segments ${appError[*]} RC:$RC"
                    else
                      grep "^MTPF\w*W:" "${verfErr}"| grep -v "MTPF1111W:"; _RC=$?
                      if [ "${_RC}" -ne 0 ]; then
                        echo -e "WARN: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}."
                        sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}. RC:$RC"
                      else
                        appError+=("${verfErr} ")
                      fi
                    fi
                  else
                    appError+=("${verfErr} ")
                    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file NON-IBM Segments ${appError[*]} RC:$RC"
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}."
                    sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verfErr}. RC:$RC"
                  fi
                fi
              done
            popd &> /dev/null;
          fi
          #IBM Segments compilation
          if [ -d "${SYS_STG_IMPL_CWRK}" ]; then
            pushd "${SYS_STG_IMPL_CWRK}" &> /dev/null; #Switch to project workspace
              #mkdir -p derived && chmod 777 derived
              rm ./*.cfg &> /dev/null;
              # shellcheck disable=2270,2185,1117
              sysTotal=( $(find -type f -regex ".*/.*\.\(asm\|bak\|c\|cbl\|cms\|cpp\|for\|htm\|oco\|sbt\|scr\|java\|pl1\|mak\|cpy\|mac\|h\|hpp\|inc\|dfdl\|dat\|bsc\|dbc\|hfs\|jcl\|job\|200\|201\|ans\|ass\|lis\|loa\|log\|lsc\|oth\|pil\|rt\|tok\|uns\|vis\|xml\|xsd\|l\|ypp\|json\)") );
              execDate=$(date +%-S)
              if [ "${implementation:0:1}" == "t" ]; then
                CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/tp/ibm/ibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
                BLD_FLAG="SYS";
                getConfig "ibm_conf"; RC=$?;
              elif [ "${implementation:0:1}" == "d" ]; then
                CFG_URL="${DEV_BIN_RURL}/gitblit/raw/tpf/dl/ibm/ibm_conf.git/master_${USR_IMPL_CORE}/maketpf.cfg";
                getConfig "ibm_conf"; RC=$?;
              fi
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: IBM configuration file generated - $(($(date +%-S)-execDate))s"
              if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                StgPath="${SYS_STG_IMPL_CWRK}";
                execDate=$(date +%-S)
                sabrCompile; RC=$?;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Sabretalk pre-process completed - $(($(date +%-S)-execDate))s"
                if [ "${RC}" -eq 0 ] && [ -f "maketpf.cfg" ]; then
                  execDate=$(date +%-S)
                  tpfBuild; RC=$?;
                  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Completed TPF source file compilation process - $(($(date +%-S)-execDate))s"
                fi
                execDate=$(date +%-S)
                unResolved; RC=$?;
                echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: TPF Build unresolved references validated - $(($(date +%-S)-execDate))s"
              fi
              if [[ -n "${warnList}" ]]; then
                sysIbmError=( $(find . -type f -name "*.err" ${warnList} ) );
              else
                sysIbmError=( $(find . -type f -name "*.err" ) );
              fi
              sysError=();
              for verIbmErr in "${sysIbmError[@]}";
              do
                if [ -f "${verIbmErr}" ]; then
                  grep "^MTPF\w*E:" "${verIbmErr}"; _RC=$?;
                  if [ "${_RC}" -ne 0 ]; then
                    grep -w "directories do not exist:" "${verIbmErr}" &> /dev/null; _RC=$?
                    if [ "${_RC}" -ne 0 ]; then
                      sysError+=("${verIbmErr} ")
                      sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Error file IBM Segments ${sysError[*]} RC:$RC"
                    else
                      grep "^MTPF\w*W:" "${verIbmErr}"| grep -v "MTPF1111W:"; _RC=$?
                      if [ "${_RC}" -ne 0 ]; then
                        echo -e "WARN: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}."
                        sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}. RC:$RC"
                      else
                        sysError+=("${verIbmErr} ")
                      fi
                    fi
                  else
                    sysError+=("${verIbmErr} ")
                    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file IBM Segments ${sysError[*]} RC:$RC"
                    echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}."
                    sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:Maketpf APPL or TPF ROOT do not exist in zlinux for ${verIbmErr}. RC:$RC"
                  fi
                fi
              done
            popd &> /dev/null;
          fi
        else
          printErr="$(date +"%Y-%m-%d %H:%M:%S") ERROR: zTPF level directory not found - ${implPutLevel}"
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${printErr} RC:$EC"
          echo -e "${printErr}"
          RC="${EC}"
        fi
        srcTotal=("${appTotal[@]}" "${sysTotal[@]}");
        errTotal=("${appError[@]}" "${sysError[@]}");
        if [ -n "${appError[0]// /}" ]; then
          for appErrs in "${appError[@]}";
          do
            appErrPath+="${APP_STG_IMPL_CWRK}${appErrs##*./},"
          done
        fi
        if [ -n "${sysError[0]// /}" ]; then
          for sysErrs in "${sysError[@]}";
          do
            sysErrPath+="${SYS_STG_IMPL_CWRK}${sysErrs##*./},"
          done
        fi
        if [ "${errTotal[0]}" != '' ] && [ -n "${appErrPath[0]// /}" ] || [ -n "${sysErrPath[0]// /}" ]; then
          if [ -z "${appErrPath[0]// /}" ] && [ -n "${sysErrPath[0]// /}" ]; then
            errFiles="${sysErrPath[*]}"
          elif [ -n "${appErrPath[0]// /}" ] && [ -z "${sysErrPath[0]// /}" ]; then
            errFiles="${appErrPath[*]}"
          elif [ -n "${appErrPath[0]// /}" ] && [ -n "${sysErrPath[0]// /}" ]; then
            errFiles="${appErrPath[*]}${sysErrPath[*]}"
          fi
          failFiles="\"${errFiles%*,}\""
          errFiles="${errFiles%*,}"
          RC="${EC}"
        fi
        #if [ "${errTotal[0]}" != '' ]; then
        #  errFiles="";
        #  for i in "${errTotal[@]}";
        #  do
        #    errFiles="\"${i##*/}\", ${errFiles}";
        #  done
        #  RC="${EC}";
        #fi
        #Validate compiler control table errors if any at NON-IBM
        if [ -f "${APP_STG_IMPL_CWRK}.temp" ] && [ -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
          pushd "${APP_STG_IMPL_CWRK}" &> /dev/null;
            #shellcheck disable=SC2002
            _cntlError=( $(cat .temp | tr "\n" " ") );
            for i in "${_cntlError[@]}"
            do
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt -NON-IBM RC:$EC"
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt";
            done
            rm ./.temp &> /dev/null;
            RC="${EC}";
          popd &> /dev/null;
        elif [ ! -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND(NON-IBM) RC:$EC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND"; #Reserved word WARNING
          rm ./.temp &> /dev/null;
          RC="${EC}";
        fi
        #Validate compiler control table errors if any at IBM
        if [ -f "${SYS_STG_IMPL_CWRK}.temp" ] && [ -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
          pushd "${SYS_STG_IMPL_CWRK}" &> /dev/null
            #shellcheck disable=SC2002
            _cntlError=( $(cat .temp | tr "\n" " ") );
            for i in "${_cntlError[@]}";
            do
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt -IBM RC:$EC"
              echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${i} has compiler override statements that are not present in the compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt";
            done
            rm ./.temp &> /dev/null;
            RC="${EC}";
          popd &> /dev/null
        elif [ ! -f "/home/loader/ztpf/${USR_IMPL_CORE}_compiler_control_table.txt" ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND(NON-IBM) RC:$EC"
          echo -e "$(date +"%Y-%m-%d %H:%M:%S") WARNING: Compiler control table ${USR_IMPL_CORE}_compiler_control_table.txt - NOT FOUND"; #Reserved word WARNING
          rm ./.temp &> /dev/null;
          RC="${EC}";
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Build workspace not found - ${APP_STG_IMPL_CWRK} ${APP_STG_IMPL_CWRK} RC:$EC"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Build workspace not found - ${APP_STG_IMPL_CWRK} ${APP_STG_IMPL_CWRK}";
        RC="${EC}";
      fi
      #if [ "${RC}" -eq 0 ]; then
      #  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Build success - Store derived artifacts in progress RC:$RC"
      #  echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Build success - Store derived artifacts in progress...";
      #  derivedLFS; RC=$?;
      #  if [ "${RC}" -eq 0 ]; then
      #    buildMSG="${USR_IMPL_PLAN^^}: Derived artifacts stored in Git repository for ${USR_IMPL_CORE}"
      #    sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
      #  fi
      #else
      #  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Build failed - Store derived artifacts halt RC:$EC"
      #  echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: Build failed - Store derived artifacts halt...";
      #  RC="${EC}";
      #fi
      execDate=$(date +%-S)
      if [ -z "${sabreErr}" ]; then
        if [ -z "${errFiles[0]}" ]; then
          loadErr="";
        else
          if [ -z "${errorMesUnres[0]}" ]; then
            loadErr="${errFiles[*]}. Please review the .err files and take corrective action."
          else
            loadErr="${errFiles[*]} ${errorMesUnres}. Please review the .err files and take corrective action."
          fi
          #loadErr="ERROR identified with ${errFiles[*]//\"/}";
        fi
      else
        loadErr="${sabreErr}"
        RC="${EC}";
      fi
      if [ -z "${loadErr}" ]; then
        loadErr="${printErr}"
      fi
      if [ -f "${APP_STG_IMPL_CWRK}TEMP.out" ]; then
        # shellcheck disable=SC2002
        makeErr=$(cat "${APP_STG_IMPL_CWRK}TEMP.out" | grep maketpf_checkeol | cut -d ' ' -f 2)
        loadErr="TEMP.so generated due to ${makeErr##*/} in MAK file or CNTL entry missing"
        RC="$EC"
      elif [ -f "${SYS_STG_IMPL_CWRK}TEMP.out" ]; then
        # shellcheck disable=SC2002
        makeErr=$(cat "${SYS_STG_IMPL_CWRK}TEMP.out" | grep maketpf_checkeol | cut -d ' ' -f 2)
        loadErr="TEMP.so generated due to ${makeErr##*/} in MAK file or CNTL entry missing"
        RC="$EC"
      fi
      if [ -d "${APP_STG_IMPL_CWRK}" ]; then
        appBuildErr=$(buildVerify "${APP_STG_IMPL_CWRK%/*}")
      fi
      if [ -d "${SYS_STG_IMPL_CWRK}" ]; then
        sysBuildErr=$(buildVerify "${SYS_STG_IMPL_CWRK%/*}")
      fi
      if [ -n "${appBuildErr// /}" ] || [ -n "${sysBuildErr// /}" ]; then
        if [[ -n "${appBuildErr// /}" ]] && [[ -n "${sysBuildErr// /}" ]]; then
          printErr="Source ${appBuildErr} in ${APP_STG_IMPL_CWRK} and ${sysBuildErr} in ${SYS_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
        elif [[ -z "${appBuildErr}" ]] && [[ -n "${sysBuildErr// /}" ]]; then
          printErr="Source ${sysBuildErr} in ${SYS_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
        elif [[ -n "${appBuildErr// /}" ]] && [[ -z "${sysBuildErr// /}" ]]; then
          printErr="Source ${appBuildErr} in ${APP_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please analyze/correct the issue and perform SUBMIT action again."
        fi
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${printErr} RC:$EC"
        echo -e "$(date +"%Y-%m-%d %H:%M:%S") ERROR: ${printErr}";
        if [ -z "${loadErr// /}" ]; then
          loadErr="${printErr}"
        fi
        RC="$EC";
      fi
      echo -e "$(date +"%Y-%m-%d %H:%M:%S") INFO: Analysis of error file in the build directory completed - $(($(date +%-S)-execDate))s"
      if [ "${RC}" -eq 0 ]; then
        jobstatus="TRUE";
      elif [ "${RC}" -eq 4 ]; then
        jobstatus="TRUE";
        RC=0;
      else
        jobstatus="FALSE";
      fi
      rm -f "${lockfile}"
      echo -e "\\nJSON RESULT --> { \"totalCount\" :\"${#srcTotal[@]}\" , \"failedCount\" : \"${#errTotal[@]}\", \"failedFiles\" : [$failFiles] , \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\" , \"errorMessage\" : \"$loadErr\", \"jobStatus\" : \"$jobstatus\" }\n";
    fi
  fi
else
  jobstatus="FALSE"
  loadErr="Invalid inputs"
  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Invalid inputs RC:$RC"
  echo -e "\\nJSON RESULT --> { \"totalCount\" :\"${#srcTotal[@]}\" , \"failedCount\" : \"${#errTotal[@]}\", \"failedFiles\" : [$errFiles] , \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\" , \"errorMessage\" : \"$loadErr\", \"jobStatus\" : \"$jobstatus\" }\n";
fi
#-----------------------------------------------------------------------------#
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:End ${implementation} ${implPutLevel} ${putStatus} ${implDependancyDvl} ${implDependancyStg} RC:$RC"
exit "${RC}";
#-----------------------------------------------------------------------------#
# vim: filetype=bash
