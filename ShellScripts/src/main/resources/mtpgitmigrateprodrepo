#!/bin/bash
# shellcheck disable=SC2206,SC2207,SC1117,SC2034,SC2179,SC2164,SC2007,SC2002
#*****************************************************************************#
#   SCRIPT NAME: mtpgitmigrateprodrepo                                        #
#                                                                             #
#   DESCRIPTION:                                                              #
#      Script to create production system branch in repositories and          #
#      to migrate the source code from given path to SCM GIT repository       #
#                                                                             #
#   NOTE: Script should run in the system where source code are extracted and #
#          kept.                                                              #
#         Changes in Code Structure will require modification table mapping   #
#         Don't alter CONSOLE messages                                        #
#                                                                             #
#   INPUT:                                                                    #
#      $1  - Migration type    (Ex. MCF or SYSTEM)                            #
#      $2  - Source Code path  (Ex. /ztpfsys/wsp/tools/wsp_migrate.txt) <-MCF #
#                              (Ex. /ztpfsys or /ztpfrepos)          <-SYSTEM #
#      $2  - GIT URL           (Ex. ssh://user@gitserv:8080/sample.git)       #
#      $3  - Core name         (Ex. apo)                                      #
#      $4  - PUT level         (Ex. put12a)                                   #
#                                                                             #
#   OUTPUT:                                                                   #
#      exit with 0, successfull code migration                                #
#      exit with 8, error message                                             #
#                                                                             #
#*****************************************************************************#
#*****************************************************************************#
#                                                                             #
#                            M A I N T E N A N C E                            #
#                                                                             #
#-----------------------------------------------------------------------------#
#   MMDDYYYY    INIT    COMMENT                                               #
#   --------    ----    ------------------------------------------------------#
#   09162016    UVAIS   Created the script                                    #
#   03292017    UVAIS   Code refactor as per new SCM structure                #
#   02122017    ARUL    Updated with local_mod and binary support             #
#   02282017    ARUL    Updated with MCF Migration support                    #
#   11152017    VINOTH  Updated to delete the Success case IBM/NONIBM folders #
#   02082018    ARUL    Plan level status tag support added                   #
#   03282018    ARUL    Migration MCF update support added                    #
#   04022018    VINOTH  To Handle .PULL and HASH codes                        #
#   05112018    VINOTH  Handle .PULL files in summary file                    #
#   07202018    VINOTH  Two char vaildation for same name for seg and version #
#   03102018    VINOTH  Splitting commit by status for O/F/P while migration  #
#   10042018    ARUL    Progress bar support enabled                          #
#   12102018    VINOTH  Migrate OCO/ECO fro non ibm series                    #
#   16052019    VINOTH  Migrate .rpt files to Derived repo                    #
#   04292019    GOWTHAM Updated with logger support                           #
#   02192020    VINOTH  prompt to pick unwanted files to remove               #
#*****************************************************************************#
#unset MTP_ENV                         #DEBUG
#source "${MTP_ENV:=$PWD}/.mtpconfig"
#shellcheck disable=SC1090
source "${MTP_ENV:=$PWD}/mtplibrary"
#-----------------------------------------------------------------------------#
declare -i _ExIP=4;                    #Expected number of input parms
declare -i _ReIP="$#";                 #Received number of input parms
#
MigrationType="$1";                    #Read migration
SourceCore="$2";                       #Read core data as inpu
SourcePath="$3";                       #Read source path as input
GitSSHRURL="$4";                       #Read Git remote repository ssh url
#
SPID=$$; #To get process id of the script
SPNM=$0; #To get script name
minInputValidation "${_ExIP}" "${_ReIP}"; RC="$?";
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Start ${MigrationType} ${SourceCore} ${SourcePath} ${GitSSHRURL} RC:$RC"
#
#-----------------------------------------------------------------------------#
function migrationAnalysis {
  local _RC="${RC}";
  if [[ "${PackageType}" =~ nonibm ]]; then
    if [ -d "${SourcePath}/${SourceCore}/${PackageName}" ]; then
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Given path containing IBM ${PackageName} directory structure - Process halt RC:$EC"
      echo -e "\\nERROR: Given path containing IBM ${PackageName} directory structure - Process halt."
      _RC="${EC}";
    elif [ -d "${SourcePath}/${SourceCore}" ]; then
      sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Given path containing valid directory structure RC:$RC"
      echo -e "\\nINFO: Given path containing valid directory structure"
      if [ -d "${SourcePath}/common" ]; then
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:'common' directory identified in the path RC:$RC"
        echo -e "\\nINFO: 'common' directory identified in the path"
      else
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:'common' directory not identified in the path - SKIPPED RC:$RC"
        echo -e "\\nINFO: 'common' directory not identified in the path - SKIPPED"
      fi
    fi
  elif [[ "${PackageType}" =~ ibm ]]; then
    if [ -d "${SourcePath}/${SourceCore}/${PackageName}" ]; then
      sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Given path containing valid directory structure RC:$RC"
      echo -e "\\nINFO: Given path containing valid directory structure"
      if [ -d "${SourcePath}/common/${PackageName}" ]; then
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:'common' directory identified in the path RC:$RC"
        echo -e "\\nINFO: 'common' directory identified in the path"
      else
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:'common' directory not identified in the path - SKIPPED RC:$RC"
        echo -e "\\nINFO: 'common' directory not identified in the path - SKIPPED"
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Given path containing no IBM directory structure - Process halt. RC:$EC"
      echo -e "\\nERROR: Given path containing no IBM directory structure - Process halt."
      _RC="${EC}";
    fi
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Invalid git repository url, provide IBM or NONIBM url for migration RC:$EC"
    echo -e "\\nERROR: Invalid git repository url, provide IBM or NONIBM url for migration."
    _RC="${EC}"
  fi
  if [ "${_RC}" -eq 0 ]; then
    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Migration data path analysis end RC:$RC"
    echo -e "\\nINFO: Migration data path analysis end.."
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Migration data path analysis end with fail RC:$EC"
    echo -e "\\nERROR: Migration data path analysis end with fail."
  fi
  return "${_RC}"
}
#-----------------------------------------------------------------------------#
function extensionCheck {
  case "${lastext}" in
    asm)
      if [[ ${lineout} =~ sbtasm ]]; then
        sbtasm=${lineout};
        grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_ASMSBT|${sbtasm}|" -i "${HOME}/MigrationSummary.csv"
      else
        asm=${lineout};
        grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_ASM|${asm}|" -i "${HOME}/MigrationSummary.csv"
      fi
    ;;
    c|cpp)
      if [[ ${lineout} =~ tpfarc ]]; then
        ccpp1=${lineout};
        grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_TPFARC|${ccpp1}|" -i "${HOME}/MigrationSummary.csv"
      else
        ccpp2=${lineout};
        grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_C_CPP|${ccpp2}|" -i "${HOME}/MigrationSummary.csv"
      fi
    ;;
    mak)
      mak=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_MAK|${mak}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    sbt)
      sbt=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_SBT|${sbt}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    h|hpp)
      hhpp=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_H_HPP|${hhpp}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    inc)
      inc=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_INC|${inc}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    mac)
      mac=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_MAC|${mac}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    include)
      include=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_INCLUDE|${include}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    o)
      o=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_OBJ|${o}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    lst)
      lst=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_LST|${lst}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    ztpfgivi)
      ztpfgivi=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_ZTPFGIVI|${ztpfgivi}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    sbtlst)
      sbtlst=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_SBTLST|${sbtlst}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    tpfarlst)
      tpfarlst=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_TPFARLST|${tpfarlst}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    so)
      so=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_SO|${so}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    map)
      map=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_MAP|${map}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    out)
      out=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_OUT|${out}|" -i "${HOME}/MigrationSummary.csv"
    ;;
    err)
      err=${lineout};
      grep "${MigrationData}" "${HOME}/MigrationSummary.csv" | sed "${count}s|NO_ERR|${err}|" -i "${HOME}/MigrationSummary.csv"
  esac
}
#-----------------------------------------------------------------------------#
function gitCreateBranch {
  local _RC="$1";
  local _RepoURL="$2";
  local _RepoType="$3";
  local _RepoWorkspace="$4";
  local _OrgName="$5";
  local _REF_DL_CORE;
  local _REF_TP_CORE;
  local _i;
  mkdir -p "${_RepoWorkspace}"
  pushd "${_RepoWorkspace}" &> /dev/null
    git branch -a | grep "master_${SourceCore}" ; _RC=$?;
    if [ "${_RC}" -ne 0 ]; then
      git branch -a | grep master | grep -v master_ ; _RC=$?
      if [ "${_RC}" -ne 0 ]; then
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:PROD REPOSITORY INITIALIZED > README.md RC:$_RC"
        echo "PROD REPOSITORY INITIALIZED" > README.md
        git init -q
        git add --all
        git commit -am "PROD REPOSITORY INITIALIZED"
        git remote -v | grep origin ; _RC=$?
        if [ "${_RC}" -ne 0 ]; then
          git remote add origin "${_RepoURL}"; _RC=$?
          if [ "${_RC}" -ne 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Failed to add remote origin url - ${_RepoURL} RC:$EC"
            echo -e "ERROR: Failed to add remote origin url - ${_RepoURL}"
            _RC="$EC";
          fi
        fi
        if [[ "${_RepoURL}" =~ https ]] && [ "${_RC}" -eq 0 ]; then
          GIT_SSL_NO_VERIFY=true git push -u origin "master" --tags &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            git checkout -b "master_${SourceCore}"
            if [[ "${_RepoWorkspace}" =~ derived ]] && [[ "${_RepoType}" =~ nonibm ]]; then
              mkdir -p build lib load lst obj derived/lib derived/load derived/lst derived/obj derived/sbtasm derived/tpfarc
              touch build/.gitignore lib/.gitignore load/.gitignore lst/.gitignore obj/.gitignore derived/.gitignore derived/lib/.gitignore
              touch derived/load/.gitignore derived/lst/.gitignore derived/obj/.gitignore derived/sbtasm/.gitignore derived/tpfarc/.gitignore
              git add --all
              git commit -am "DERIVED DIRECTORY INITIALIZED"
            fi
            GIT_SSL_NO_VERIFY=true git push -u origin "master_${SourceCore}" --tags &> /dev/null; _RC=$?;
            if [ "${_RC}" -ne 0 ]; then
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to push master_${SourceCore} branch to remote url RC:$EC"
              echo -e "\\nERROR: Unable to push master_${SourceCore} branch to remote url."
              _RC="${EC}";
            fi
          else
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to push master branch to remote url RC:$EC"
            echo -e "\\nERROR: Unable to push master branch to remote url."
            _RC="${EC}";
          fi
        else
          git push -u origin "master" --tags; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            git checkout -b "master_${SourceCore}"
            if [[ "${_RepoWorkspace}" != derived ]] && [[ "${_RepoType}" =~ nonibm ]]; then
              mkdir src macro include dataset command cp system_config other unknown
              touch src/.gitignore macro/.gitignore include/.gitignore dataset/.gitignore command/.gitignore cp/.gitignore
              touch system_config/.gitignore other/.gitignore unknown/.gitignore
              git add --all
              git commit -am "SOURCE DIRECTORY INITIALIZED"
            fi
            git push -u origin "master_${SourceCore}" --tags &> /dev/null; _RC=$?;
            if [ "${_RC}" -ne 0 ]; then
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to push master_${SourceCore} branch to remote url RC:$EC"
              echo -e "\\nERROR: Unable to push master_${SourceCore} branch to remote url."
              _RC="${EC}";
            fi
          else
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to push master branch to remote url RC:$EC"
            echo -e "\\nERROR: Unable to push master branch to remote url."
            _RC="${EC}";
          fi
        fi
      else
        git checkout master
        git checkout -b "master_${SourceCore}"
        if [[ "${_RepoURL}" =~ https ]]; then
          if [[ "${_RepoWorkspace}" =~ derived ]] && [[ "${_RepoType}" =~ nonibm ]]; then
            mkdir -p build lib load lst obj derived/lib derived/load derived/lst derived/obj derived/sbtasm derived/tpfarc
            touch build/.gitignore lib/.gitignore load/.gitignore lst/.gitignore obj/.gitignore derived/.gitignore derived/lib/.gitignore
            touch derived/load/.gitignore derived/lst/.gitignore derived/obj/.gitignore derived/sbtasm/.gitignore derived/tpfarc/.gitignore
            git add --all
            git commit -am "DERIVED DIRECTORY INITIALIZED"
          fi
          GIT_SSL_NO_VERIFY=true git push -u origin "master_${SourceCore}" --tags &> /dev/null; _RC=$?;
          if [ "${_RC}" -ne 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to push master_${SourceCore} branch to remote url RC:$EC"
            echo -e "\\nERROR: Unable to push master_${SourceCore} branch to remote url."
            _RC="${EC}";
          fi
        else
          if [[ "${_RepoWorkspace}" != derived ]] && [[ "${_RepoType}" =~ nonibm ]]; then
            mkdir src macro include dataset command cp system_config other unknown
            touch src/.gitignore macro/.gitignore include/.gitignore dataset/.gitignore command/.gitignore cp/.gitignore
            touch system_config/.gitignore other/.gitignore unknown/.gitignore
            git add --all
            git commit -am "SOURCE DIRECTORY INITIALIZED"
          fi
          git push -u origin "master_${SourceCore}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -ne 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to push master_${SourceCore} branch to remote url RC:$EC"
            echo -e "\\nERROR: Unable to push master_${SourceCore} branch to remote url."
            _RC="${EC}";
          fi
        fi
      fi
    else
      git checkout "master_${SourceCore}"
      if [[ "${_RepoURL}" =~ https ]]; then
        GIT_SSL_NO_VERIFY=true git pull -u origin "master_${SourceCore}" &> /dev/null; _RC=$?;
        GIT_SSL_NO_VERIFY=true git push -u origin "master_${SourceCore}" --tags &> /dev/null; _RC=$?;
      else
        git pull -u origin "master_${SourceCore}" &> /dev/null; _RC=$?;
        git push -u origin "master_${SourceCore}" --tags &> /dev/null; _RC=$?;
      fi
      if [ "${_RC}" -ne 0 ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to push master branch to remote RC:$EC"
        echo -e "\\nERROR: Unable to push master branch to remote."
        _RC="${EC}";
      fi
    fi
  popd &> /dev/null
  return "${_RC}";
}
#-----------------------------------------------------------------------------#
function nonIBM_MCF_Copy {
  local _RC="${RC}"
  local _fl="$1";                      #Input file path
  local _fv="$2";                      #Input file version
  local _loadPlan="$3";                #Input load plan
  local _loadDate="$4";                #Input load date
  local _dl="$_fl";                    #THIS WILL REMOVE
  local _ftSource=0;                   #FileType Source connter
  local _ftBinary=0;                   #FileType Binary counter
  local _ftComBinary=0;                #FileType Common Binary counter
  local _ftError=0;                    #FileCopy Error counter
  local _PULL
  local _flExt
  local _flSrc
  local _flFile
  local _flName

  #NONIBM handle for .PULL
  if [[ ${_fl} =~ .PULL ]]; then
    _PULL=${_fl};
    _fl="${_fl%.*}"            #Cut .PULL from the input
    _flExt="${_fl##*.}"         #Cut all the data execpt extension
    _flSrc="${_fl%.*}"         #Cut extestion from filename path to check version
    _flFile="${_flSrc##*/}"     #Cut file name from path
    _flName="${_flFile::-2}"    #Cut version from file name
  elif [[ ${_fl} != "A" ]]; then
    _flExt="${_fl##*.}"         #Cut all the data execpt extension
    _flSrc="${_fl%%.*}"         #Cut extestion from filename path to check version
    _flFile="${_flSrc##*/}"     #Cut file name from path
    if [ "${#_flFile}" -gt 4 ]; then
      _flName="${_flFile::-2}"    #Cut version from file name
    else
      _flName="${_flFile}"        # Added for segment should be more than 4 char
    fi
  fi
  case "${_fl}" in
    *\.asm|*\.bak|*\.c|*\.cbl|*\.cms|*\.cpp|*\.for|*\.htm|*\.oco|*\.sbt|*\.scr|*\.java|*\.pl1|*\.mak)
      #Source directory
      if [[ "${_dl}" =~ derived ]]; then
        if [[ "${_fl}" =~ .asm ]]; then #Derived ASM files
          mkdir -p "${DestBinPath}/derived/sbtasm/"
          if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
            #Over ride file name from version details
            if [[ "${_PULL}" =~ .PULL ]]; then
              cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/sbtasm/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
              if [ "${_RC}" -eq 0 ]; then
                #shellcheck disable=SC2086
                echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl}.PULL ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt} RC:$_RC"
                echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt}";
                _ftBinary=$((_ftBinary+1))
                [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
              fi
            else
            cp -rfpv "${_fl}" "${DestBinPath}/derived/sbtasm/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt} RC:$_RC"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
            fi
          else
             if [[ "${_PULL}" =~ .PULL ]]; then
              cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/sbtasm/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
              if [ "${_RC}" -eq 0 ]; then
                #shellcheck disable=SC2086
                echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl}.PULL ${DestBinPath}/derived/sbtasm/${_flFile}.${_flExt} RC:$_RC"
                echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/sbtasm/${_flFile}.${_flExt}";
                _ftBinary=$((_ftBinary+1))
                [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
              fi
            else
            #Store file name as it is
            cp -rfpv "${_fl}" "${DestBinPath}/derived/sbtasm/" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/ RC:$_RC"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          fi
          fi
          if [ "${_RC}" -ne 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/ RC:$EC"
            echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/"; _RC="${EC}";
            _ftError=$((_ftError+1))
          fi
        elif [[ "${_fl}" =~ .c ]]; then #Derived C files
          mkdir -p "${DestBinPath}/derived/tpfarc/"
          if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
            if [[ "${_PULL}" =~ .PULL ]]; then
              #Over ride file name from version details
              cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/tpfarc/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
              if [ "${_RC}" -eq 0 ]; then
                #shellcheck disable=SC2086
                echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl}.PULL ${DestBinPath}/derived/tpfarc/${_flName}.${_flExt} RC:$_RC"
                echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/tpfarc/${_flName}.${_flExt}";
                _ftBinary=$((_ftBinary+1))
                [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
              fi
            else
            #Over ride file name from version details
            cp -rfpv "${_fl}" "${DestBinPath}/derived/tpfarc/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/${_flName}.${_flExt} RC:$_RC"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
            fi
          else
            if [[ "${_PULL}" =~ .PULL ]]; then
              #Over ride file name from version details
              cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/tpfarc/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
              if [ "${_RC}" -eq 0 ]; then
                #shellcheck disable=SC2086
                echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl}.PULL ${DestBinPath}/derived/tpfarc/${_flFile}.${_flExt} RC:$_RC"
                echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/tpfarc/${_flFile}.${_flExt}";
                _ftBinary=$((_ftBinary+1))
                [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
              fi
            else
            #Store file name as it is
            cp -rfpv "${_fl}" "${DestBinPath}/derived/tpfarc/" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flFile}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/ RC:$_RC"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          fi
          fi
          if [ "${_RC}" -ne 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/ RC:$EC"
            echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/"; _RC="${EC}";
            _ftError=$((_ftError+1))
          fi
        fi
      else
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestSrcPath}/src/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl}.PULL ${DestSrcPath}/src/${_flName}.${_flExt} RC:$_RC"
              echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/src/${_flName}.${_flExt}";
              _ftSource=$((_ftSource+1))
              [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
            fi
          elif [[ "${_dl}" =~ sbtasm ]]; then                                  # This check only for when version and segment last two char get same value. for .sbt
            cp -rfpv "${_fl}" "${DestBinPath}/derived/sbtasm/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt} RC:$_RC"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestSrcPath}/src/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/src/${_flName}.${_flExt} RC:$_RC"
            echo "INFO: Source Copy ${_fl} ${DestSrcPath}/src/${_flName}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
          fi
        else
		      if [[ "${_dl}" =~ tpfarc ]]; then
              if [[ ${_PULL} =~ .PULL ]]; then
                cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/tpfarc/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
                if [ "${_RC}" -eq 0 ]; then
                  #shellcheck disable=SC2086
                  echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/${_flFile}.${_flExt} RC:$_RC"
                  echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/${_flFile}.${_flExt}";
                  _ftBinary=$((_ftBinary+1))
                  [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                fi
              else
            cp -rfpv "${_fl}" "${DestBinPath}/derived/tpfarc/" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/${_flName}.${_flExt} RC:$_RC"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
            fi
		      elif [[ "${_dl}" =~ sbtasm ]]; then
              if [[ ${_PULL} =~ .PULL ]]; then
                cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/sbtasm/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
                if [ "${_RC}" -eq 0 ]; then
                  #shellcheck disable=SC2086
                  echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl}.PULL ${DestBinPath}/derived/sbtasm/${_flFile}.${_flExt} RC:$_RC"
                  echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/sbtasm/${_flFile}.${_flExt}";
                  _ftBinary=$((_ftBinary+1))
                  [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                fi
              else
            cp -rfpv "${_fl}" "${DestBinPath}/derived/sbtasm/" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt} RC:$_RC"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
            fi
		      else
              if [[ "${_PULL}" =~ .PULL ]]; then
                cp -rfpv "${_fl}.PULL" "${DestSrcPath}/src/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
                if [ "${_RC}" -eq 0 ]; then
                  #shellcheck disable=SC2086
                  echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl}.PULL ${DestSrcPath}/src/${_flFile}.${_flExt} RC:$_RC"
                  echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/src/${_flFile}.${_flExt}";
                  _ftSource=$((_ftSource+1))
                  [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                fi
              else
            #Store file name as it is
            cp -rfpv "${_fl}" "${DestSrcPath}/src/" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/src/ RC:$_RC"
              echo "INFO: Source Copy ${_fl} ${DestSrcPath}/src/";
              _ftSource=$((_ftSource+1))
              [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
            fi
		      fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/src/ RC:$EC"
          echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/src/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *\.cpy|*\.mac)
      #Macro directory
      if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
        if [[ "${_PULL}" =~ .PULL ]]; then
        #Over ride file name from version details
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/macro/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${DestSrcPath}/macro/${_flName}.${_flExt} RC:$_RC"
            echo "INFO: Source Copy ${DestSrcPath}/macro/${_flName}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
          #Over ride file name from version details
        cp -rfpv "${_fl}" "${DestSrcPath}/macro/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${DestSrcPath}/macro/${_flName}.${_flExt} RC:$_RC"
          echo "INFO: Source Copy ${DestSrcPath}/macro/${_flName}.${_flExt}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
        fi
      else
        if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/macro/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${DestSrcPath}/macro/${_flFile}.${_flExt} RC:$_RC"
            echo "INFO: Source Copy ${DestSrcPath}/macro/${_flFile}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
        #Store file name as it is
        cp -rfpv "${_fl}" "${DestSrcPath}/macro/" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/macro/ RC:$_RC"
          echo "INFO: Source Copy ${_fl} ${DestSrcPath}/macro/";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/macro/ RC:$EC"
        echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/macro/"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.h|*\.hpp|*\.inc|*\.dfdl)
      #Include directory
      if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
        if [[ "${_PULL}" =~ .PULL ]]; then
        #Over ride file name from version details
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/include/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl}.PULL ${DestSrcPath}/include/${_flName}.${_flExt} RC:$_RC"
            echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/include/${_flName}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
          #Over ride file name from version details
          if [[ "${_fl}" =~ loads ]]; then
            cp -rfpv "${_fl}" "${DestSrcPath}/include/${_flName}${_fv}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}${_fv}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/include/${_flName}.${_flExt} RC:$_RC"
              echo "INFO: Source Copy ${_fl} ${DestSrcPath}/include/${_flName}.${_flExt}";
              _ftSource=$((_ftSource+1))
              [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
            fi
          else
            cp -rfpv "${_fl}" "${DestSrcPath}/include/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/include/${_flName}.${_flExt} RC:$_RC"
              echo "INFO: Source Copy ${_fl} ${DestSrcPath}/include/${_flName}.${_flExt}";
              _ftSource=$((_ftSource+1))
              [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
            fi
          fi
        fi
      else
        if [[ "${_PULL}" =~ .PULL ]]; then
        #Store file name as it is
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/include/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl}.PULL ${DestSrcPath}/include/ RC:$_RC"
            echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/include/";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
          #Store file name as it is
        cp -rfpv "${_fl}" "${DestSrcPath}/include/" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:ource Copy ${_fl} ${DestSrcPath}/include/ RC:$_RC"
          echo "INFO: Source Copy ${_fl} ${DestSrcPath}/include/";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/include/ RC:$EC"
        echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/include/"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.dat)
      #Dataset directory
      if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
        if [[ "${_PULL}" =~ .PULL ]]; then
        #Over ride file name from version details
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/dataset/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/dataset/${_flName}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
          #Over ride file name from version details
        cp -rfpv "${_fl}" "${DestSrcPath}/dataset/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source Copy ${_fl} ${DestSrcPath}/dataset/${_flName}.${_flExt}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
        fi
      else
        if [[ "${_PULL}" =~ .PULL ]]; then
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/dataset/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/dataset/${_flFile}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
      else
        cp -rfpv "${_fl}" "${DestSrcPath}/dataset/" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source Copy ${_fl} ${DestSrcPath}/dataset/";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/dataset/ RC:$EC"
        echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/dataset/"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.bsc|*\.dbc|*\.hfs|*\.jcl|*\.job)
      #System_config direcotry
      if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
        if [[ "${_PULL}" =~ .PULL ]]; then
        #Over ride file name from version details
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/system_config/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/system_config/${_flName}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
          #Over ride file name from version details
        cp -rfpv "${_fl}" "${DestSrcPath}/system_config/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source Copy ${_fl} ${DestSrcPath}/system_config/${_flName}.${_flExt}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
        fi
      else
        if [[ "${_PULL}" =~ .PULL ]]; then
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/system_config/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/system_config/";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
        cp -rfpv "${_fl}" "${DestSrcPath}/system_config/" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source Copy ${_fl} ${DestSrcPath}/system_config/";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/dataset/ RC:$EC"
        echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/dataset/"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.200|*\.201|*\.ans|*\.ass|*\.lis|*\.loa|*\.log|*\.lsc|*\.oth|*\.pil|*\.rt|*\.tok|*\.uns|*\.vis)
      #Unknown direcotry
      if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
        if [[ "${_PULL}" =~ .PULL ]]; then
        #Over ride file name from version details
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/unknown/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/unknown/${_flName}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
          #Over ride file name from version details
        cp -rfpv "${_fl}" "${DestSrcPath}/unknown/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source Copy ${_fl} ${DestSrcPath}/unknown/${_flName}.${_flExt}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
        fi
      else
        if [[ "${_PULL}" =~ .PULL ]]; then
          cp -rfpv "${_fl}.PULL" "${DestSrcPath}/unknown/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestSrcPath}/README.md"
            echo "INFO: Source Copy ${_fl}.PULL ${DestSrcPath}/unknown/${_flFile}.${_flExt}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
        cp -rfpv "${_fl}" "${DestSrcPath}/unknown/" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source Copy ${_fl} ${DestSrcPath}/unknown/";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Source Copy ${_fl} ${DestSrcPath}/unknown/ RC:$EC"
        echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/unknown/"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.out*|*\.err*)
      #Derived outputs
      if [[ "${_dl}" =~ derived ]]; then
        mkdir -p "${DestBinPath}/derived/build/"
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/build/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/build/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestBinPath}/derived/build/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/build/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}" "${DestBinPath}/derived/build/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/build/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/derived/build/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/build/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/build/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          #Over ride file name from version details
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/build/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/build/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/build/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/build/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/build/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/build/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
        else
          cp -rfpv "${_fl}" "${DestBinPath}/build/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            #echo -e "\\n${_flFile}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/build/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/build/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    lib*\.so)
      if [[ "${_dl}" =~ derived ]]; then
        mkdir -p "${DestBinPath}/derived/lib/"
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/lib/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/lib/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestBinPath}/derived/lib/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/lib/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/lib/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/lib/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/derived/lib/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/lib/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/build/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/lib/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/lib/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestBinPath}/lib/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/lib/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/lib/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/lib/${_flFile}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/lib/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/lib/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/lib/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *\.so)
      if [[ "${_dl}" =~ /oco/ ]]; then
        mkdir -p "${DestSrcPath}/oco/load/"
        cp -rfpv "${_fl}" "${DestSrcPath}/oco/load/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
        if [ ! -f "${DestSrcPath}/oco/load/.gitignore" ]; then
          touch "${DestSrcPath}/oco/load/.gitignore"
        fi
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source Copy ${DestSrcPath}/oco/load/";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      elif [[ "${_dl}" =~ derived ]]; then
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/load/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/load/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestBinPath}/derived/load/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flFile}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/load/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/load/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/derived/load/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/derived/load/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/load/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/load/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          #Over ride file name from version details
          if [[ "${_PULL}" =~ .PULL ]]; then
            #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/load/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/load/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/load/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flFile}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/load/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/load/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/load/${_flFile}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/load/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/load/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/load/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *\.lst|*\.map|*\.sbtlst|*\.tpfarlst)
      if [[ "${_dl}" =~ derived ]]; then
        mkdir -p "${DestBinPath}/derived/lst/"
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/lst/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flFile}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl}.PULL ${DestBinPath}/load/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestBinPath}/derived/lst/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/lst/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}" "${DestBinPath}/derived/lst/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/lst/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
        else
          cp -rfpv "${_fl}" "${DestBinPath}/derived/lst/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/lst/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/lst/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/lst/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/lst/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestBinPath}/lst/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/lst/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/lst/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/lst/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/lst/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/lst/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/lst/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *\.o|*\.ztpfgivi)
      if [[ "${_dl}" =~ derived ]]; then
        mkdir -p "${DestBinPath}/derived/obj/"
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/obj/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/obj/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestBinPath}/derived/obj/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/obj/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/derived/obj/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/obj/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/derived/obj/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/obj/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/obj/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
          if [[ "${_PULL}" =~ .PULL ]]; then
          #Over ride file name from version details
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/obj/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_flName}.${_flExt}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/obj/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
            #Over ride file name from version details
          cp -rfpv "${_fl}" "${DestBinPath}/obj/${_flName}.${_flExt}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_flName}.${_flExt} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/obj/${_flName}.${_flExt}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          fi
        else
          if [[ "${_PULL}" =~ .PULL ]]; then
            cp -rfpv "${_fl}.PULL" "${DestBinPath}/obj/${_flFile}.${_flExt}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fl##*/}.PULL ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl}.PULL lastModifiedID:$(stat -c %U ${_fl}.PULL) lastModifiedDate:$(stat -c %y ${_fl}.PULL)" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/obj/";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
          else
          cp -rfpv "${_fl}" "${DestBinPath}/obj/" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fl##*/} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived Copy ${_fl} ${DestBinPath}/obj/";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        fi
        if [ "${_RC}" -ne 0 ]; then
         sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Derived Copy ${_fl} ${DestBinPath}/obj/ RC:$EC"
          echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/obj/"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *)
     sendLOG "WARNR" "pid[${SPID}]" "${SPNM##*/}:Unrecognized file SKIPPED - ${_fl} RC:$EC"
     echo -e "\\nWARNING: Unrecognized file SKIPPED - ${_fl}"
    ;;
  esac
  return "${_RC}"
}
#-----------------------------------------------------------------------------#
function nonIBM_MCF_Del {
  local _RC="${RC}"
  local _fl="$1";                      #Input file path
  local _fv="$2";                      #Input file version
  local _loadPlan="$3";                #Input load plan
  local _loadDate="$4";                #Input load date
  local _dl="$_fl";                    #THIS WILL REMOVE
  local _ftSource=0;                   #FileType Source connter
  local _ftBinary=0;                   #FileType Binary counter
  local _ftComBinary=0;                #FileType Common Binary counter
  local _ftError=0;                    #FileCopy Error counter
  local _fileName="";                  #File name to get from version or file ref
  #
  _flExt="${_fl##*.}"         #Cut all the data execpt extension
  _flSrc="${_fl%%.*}"         #Cut extestion from filename path to check version
  _flFile="${_flSrc##*/}"     #Cut file name from path
  _flName="${_flFile: -2}"    #Cut version from file name
  if [[ "${_flFile: -2}" == "${_fv}" ]]; then #File version handled
    #Over ride file name from version details
    _fileName="${_flName}.${_flExt}";
  else
    _fileName="${_fl##*/}"
  fi
  #
  case "${_fl}" in
    *\.asm|*\.bak|*\.c|*\.cbl|*\.cms|*\.cpp|*\.for|*\.htm|*\.oco|*\.sbt|*\.scr|*\.java|*\.pl1|*\.mak)
      #Source directory
      if [[ "${_dl}" =~ derived ]]; then
        if [[ "${_fl}" =~ .asm ]] && [ -f "${DestBinPath}/derived/sbtasm/${_fileName}" ]; then #Derived ASM files
          rm -f "${DestBinPath}/derived/sbtasm/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - derived/sbtasm/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          if [ "${_RC}" -ne 0 ]; then
            echo -e "\\nERROR: Derived not found - derived/sbtasm/${_fileName}"; _RC="${EC}";
            _ftError=$((_ftError+1))
          fi
        elif [[ "${_fl}" =~ .c ]] && [ -f "${DestBinPath}/derived/tpfarc/${_fileName}" ]; then #Derived C files
          rm -f "${DestBinPath}/derived/tpfarc/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - derived/tpfarc/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
          if [ "${_RC}" -ne 0 ]; then
            echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/"; _RC="${EC}";
            _ftError=$((_ftError+1))
          fi
        fi
      else
        if [[ -f "${DestSrcPath}/src/${_fileName}" ]]; then
          rm -f "${DestSrcPath}/src/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
            echo "INFO: Source deleted - src/${_fileName}";
            _ftSource=$((_ftSource+1))
            [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
          fi
        else
		      if [[ "${_dl}" =~ tpfarc ]] && [ -f "${DestBinPath}/derived/tpfarc/${_fileName}" ]; then
            rm -f "${DestBinPath}/derived/tpfarc/${_fileName}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              echo "INFO: Derived deleted - derived/tpfarc/${_fileName}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
		      elif [[ "${_dl}" =~ sbtasm ]] && [ -f "${DestBinPath}/derived/sbtasm/${_fileName}" ]; then
            rm -f "${DestBinPath}/derived/sbtasm/${_fileName}" &> /dev/null; _RC=$?;
            if [ "${_RC}" -eq 0 ]; then
              #shellcheck disable=SC2086
              echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
              echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/${_flName}.${_flExt}";
              _ftBinary=$((_ftBinary+1))
              [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
            fi
		      fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Source not found - src/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *\.cpy|*\.mac)
      #Macro directory
      if [ -f "${DestSrcPath}/macro/${_fileName}" ]; then
        rm -f "${DestSrcPath}/macro/${_fileName}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source deleted - macro/${_fileName}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        echo -e "\\nERROR: Source not found - macro/${_fileName}"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.h|*\.hpp|*\.inc|*\.dfdl)
      if [ -f "${DestSrcPath}/include/${_fileName}" ]; then
        rm -f "${DestSrcPath}/include/${_fileName}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source deleted - include/${_fileName}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        echo -e "\\nERROR: Source not found - include/${_fileName}"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.dat)
      if [ -f "${DestSrcPath}/dataset/${_fileName}" ]; then
        rm -f "${DestSrcPath}/dataset/${_fileName}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source deleted - dataset/${_fileName}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        echo -e "\\nERROR: Source not found - dataset/${_fileName}"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.bsc|*\.dbc|*\.hfs|*\.jcl|*\.job)
      #System_config direcotry
      if [ -f "${DestSrcPath}/system_config/${_fileName}" ]; then
        rm -f "${DestSrcPath}/system_config/${_fileName}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source deleted - system_config/${_fileName}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        echo -e "\\nERROR: Source not found - dataset/${_fileName}"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.200|*\.201|*\.ans|*\.ass|*\.lis|*\.loa|*\.log|*\.lsc|*\.oth|*\.pil|*\.rt|*\.tok|*\.uns|*\.vis)
      #Unknown direcotry
      if [ -f "${DestSrcPath}/unknown/${_fileName}" ]; then
        rm -f "${DestSrcPath}/unknown/${_fileName}" &> /dev/null; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          #shellcheck disable=SC2086
          echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestSrcPath}/README.md"
          echo "INFO: Source deleted - unknown/${_fileName}";
          _ftSource=$((_ftSource+1))
          [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
        fi
      fi
      if [ "${_RC}" -ne 0 ]; then
        echo -e "\\nERROR: Source not found - unknown/${_fileName}"; _RC="${EC}";
        _ftError=$((_ftError+1))
      fi
    ;;
    *\.out*|*\.err*)
      #Derived outputs
      if [[ "${_dl}" =~ derived ]]; then
        if [ -f "${DestBinPath}/derived/build/${_fileName}" ]; then
          #Over ride file name from version details
          rm -f  "${DestBinPath}/derived/build/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - derived/build/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - derived/build/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [ -f "${DestBinPath}/build/${_fileName}" ]; then
          #Over ride file name from version details
          rm -f "${DestBinPath}/build/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - build/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - build/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    lib*\.so)
      if [[ "${_dl}" =~ derived ]]; then
        if [ -f "${DestBinPath}/derived/lib/${_fileName}" ]; then
          rm -f "${DestBinPath}/derived/lib/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - derived/lib/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - derived/build/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [[ -f "${DestBinPath}/lib/${_fileName}" ]]; then #File version handled
          #Over ride file name from version details
          rm -f "${DestBinPath}/lib/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - lib/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - lib/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *\.so)
      if [[ "${_dl}" =~ derived ]]; then
        if [ -f "${DestBinPath}/derived/load/${_fileName}" ]; then #File version handled
          rm -f "${DestBinPath}/derived/load/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - derived/load/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - derived/load/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [ -f "${DestBinPath}/load/${_fileName}" ]; then #File version handled
          rm -f "${DestBinPath}/load/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - load/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - load/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *\.lst|*\.map|*\.sbtlst|*\.tpfarlst)
      if [[ "${_dl}" =~ derived ]]; then
        if [ -f "${DestBinPath}/derived/lst/${_fileName}" ]; then
          rm -f "${DestBinPath}/derived/lst/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - derived/lst/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - derived/lst/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [ -f "${DestBinPath}/lst/${_fileName}" ]; then #File version handled
          #Over ride file name from version details
          rm -f "${DestBinPath}/lst/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - lst/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - lst/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
    *\.o|*\.ztpfgivi)
      if [[ "${_dl}" =~ derived ]]; then
        if [ -f "${DestBinPath}/derived/obj/${_fileName}" ]; then
          rm -f "${DestBinPath}/derived/obj/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - derived/obj/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - derived/obj/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      else
        if [ -f "${DestBinPath}/obj/${_fileName}" ]; then #File version handled
          rm -f "${DestBinPath}/obj/${_fileName}" &> /dev/null; _RC=$?;
          if [ "${_RC}" -eq 0 ]; then
            #shellcheck disable=SC2086
            echo -e "\\n${_fileName} ver:${_fv} LoadPlan:${_loadPlan} LoadDate:${_loadDate} linuxPath:${_fl} lastModifiedID:$(stat -c %U ${_fl}) lastModifiedDate:$(stat -c %y ${_fl})" >> "${DestBinPath}/README.md"
            echo "INFO: Derived deleted - obj/${_fileName}";
            _ftBinary=$((_ftBinary+1))
            [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
          fi
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Derived not found - obj/${_fileName}"; _RC="${EC}";
          _ftError=$((_ftError+1))
        fi
      fi
    ;;
  esac
  return "${_RC}"
}
#-----------------------------------------------------------------------------#
function mcfFileMigrate {
  local _RC="${RC}";
  local _TRC="${RC}";
  local _mcf;
  local _onlineTag="${USR_MASTER_CORE/master/online}";
  local _fallbackTag="${USR_MASTER_CORE/master/fallback}";
  local _UpdateInd;
  local _mcfLineVal;
  local _end;
  echo -e "\\nINFO: File copy in progress..."
  if [[ "${PackageType}" == nonibm ]]; then
    echo -e "NON-IBM Process"
    echo -e "PWD-$PWD"                 #DEBUG
    echo -e "SourcePath-${SourcePath}" #DEBUG
    # shellcheck disable=SC2002
    _end=$(cat "${SourcePath}" | wc -l)
    count=0;
    while IFS= read -r mcfLine
    do
      # Input file data structure
      #"${line[0]}" == OK
      #"${line[1]}" == _PackageStatus
      #"${line[2]}" == PackageName
      #"${line[3]}" == loadDate
      #"${line[4]}" == loadPlan
      #"${line[5]}" == _fileName
      #"${line[6]}" == _fileVersion
      #"${line[7]}" == _fileType
      #"${line[8]}" == planUser
      #"${line[9]}" == filespath
      #shellcheck disable=SC2053,SC2116
      line=($(echo "${mcfLine}"))       #Convert line data to array
      if [[ "${line[0]}" == OK ]]; then #Check migration condition
        echo -e "\\n[MIGRATE] DATA - ${mcfLine}"
        _PackageStatus="${line[1]}"    #It'll get package online status
        _fileVersion="${line[6]}"      #It'll get package online status
        mcfLineChar="${mcfLine: -2}"
        if [[ "${mcfLineChar}" == "A" ]] || [[ "${mcfLineChar}" == "R" ]] || [[ "${mcfLineChar}" == "D" ]] || [[ "${mcfLineChar}" == " A" ]] || [[ "${mcfLineChar}" == " R" ]] || [[ "${mcfLineChar}" == " D" ]]; then
          _mcfLineVal="${mcfLine: -2}"
        else
          _mcfLineVal="${_UpdateInd}"
        fi
        if [[ "${line[2]}" == "${PackageName^^}" ]]; then #Check pagake reference
          #Check load date new or same date as previously used
          if [[ "${line[3]}" == "${loadDate}" || ( -z "${loadDate}" ) ]] && [[ "${line[1]}" == "${PackageStatus1}" || ( -z "${PackageStatus1}") ]]; then
            #Check load plan new or same date as previously used for the load date
            if [[ ( "${line[4]}" == "${loadPlan}" ) || ( -z "${loadPlan}" ) ]] && [[ ( "${_mcfLineVal}" == "${_UpdateInd}" ) || ( -z "${_UpdateInd}" ) ]]; then
              planUser="${line[8]}";   #Get owner of this plan
              #Process file copy for this plan to git repos path
              count=$((count+1));
              MigrationData=$(echo "[MIGRATE]-DATA - ${mcfLine}"| awk '{print $1,$5,$6,$7,$8,$9,$10}');
              echo -e "${MigrationData} , MIGRATION , NO_ASM , NO_C_CPP , NO_MAK , NO_SBT , NO_H_HPP , NO_INC , NO_MAC , NO_INCLUDE , NO_OBJ , NO_LST , NO_ZTPFGIVI , NO_ASMSBT , NO_SBTLST , NO_TPFARC , NO_TPFARLST , NO_SO , NO_MAP , NO_OUT , NO_ERR" >> "${HOME}/MigrationSummary.csv"
              #shellcheck disable=SC2004
              if [[ "${line[9]}" == " A" ]] || [[ "${line[9]}" == " R" ]] || [[ "${line[9]}" == " D" ]] || [[ "${line[9]}" == "A" ]] || [[ "${line[9]}" == "R" ]] || [[ "${line[9]}" == "D" ]]; then
                echo "SKIP - ${line[9]}" &> /dev/null
              else
                if [[ "${mcfLine: -2}" == " R" ]]; then
                  for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Del "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass1="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass1}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail1="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail1}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=COPY_FAILED_${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                  #Source repository commit for the previous changes
                  pushd "${DestSrcPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n"; #Add empty space
                  #fi
                  popd &> /dev/null
                  #Derived repository commit for the previous changes
                  pushd "${DestBinPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n";       #Add empty space
                  #fi
                  popd &> /dev/null
                  for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Copy "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass1="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass1}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail1="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail1}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=COPY_FAILED_${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                elif [[ "${mcfLine: -2}" == " D" ]]; then
                  for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Del "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass1="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass1}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail1="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail1}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=COPY_FAILED_${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                  #Source repository commit for the previous changes
                  pushd "${DestSrcPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n"; #Add empty space
                  #fi
                  popd &> /dev/null
                  #Derived repository commit for the previous changes
                  pushd "${DestBinPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n";       #Add empty space
                  #fi
                  popd &> /dev/null
                else
                  for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Copy "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass1="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass1}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail1="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail1}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=COPY_FAILED_${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                fi
              fi
              loadPlan="${line[4]}"    #Store currunt load plan for matching
              PackageStatus="${_PackageStatus}"
              _UpdateInd="${mcfLine: -2}"
            else
              #Source repository commit for the previous changes
              pushd "${DestSrcPath}" &> /dev/null
                if [ -n "$(git status --porcelain)" ]; then
                  git add . &> /dev/null
                  if [[ "${PackageStatus}" == O ]]; then #ONLINE
                    echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                    git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:online"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "online-${loadPlan}-$(git log -1 --pretty=%h)" -m "online-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                  elif [[ "${PackageStatus}" == F ]]; then #FALLBACK
                    echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                    git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:fallback"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "fallback-${loadPlan}-$(git log -1 --pretty=%h)" -m "fallback-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                  elif [[ "${PackageStatus}" == P ]]; then #PENDING
                    echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                    git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:pending"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "pending-${loadPlan}-$(git log -1 --pretty=%h)" -m "pending-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                  else
                    echo -e "\\nERROR: Invalid package status reference : ${_PackageStatus} - ${mcfLine}."
                    _RC="${EC}"
                  fi
                  if [ "${_RC}" -ne 0 ]; then
                    echo -e "\\nERROR: Commit failed - ${mcfLine}."
                    _RC="${EC}"
                  elif [ "${_TRC}" -ne 0 ]; then
                    echo -e "\\nERROR: Tag failed - ${mcfLine}."
                    _RC="${EC}"
                  fi
                  echo -e "\\n"; #Add empty space
                fi
              popd &> /dev/null
              #Derived repository commit for the previous changes
              pushd "${DestBinPath}" &> /dev/null
                if [ -n "$(git status --porcelain)" ]; then
                  git add . &> /dev/null
                  if [[ "${PackageStatus}" == O ]]; then #ONLINE
                    echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                    git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:online"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "online-${loadPlan}-$(git log -1 --pretty=%h)" -m "online-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                  elif [[ "${PackageStatus}" == F ]]; then #FALLBACK
                    echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                    git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:fallback"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "fallback-${loadPlan}-$(git log -1 --pretty=%h)" -m "fallback-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                  elif [[ "${PackageStatus}" == P ]]; then #PENDING
                    echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                    git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:pending"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "pending-${loadPlan}-$(git log -1 --pretty=%h)" -m "pending-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                  else
                    echo -e "\\nERROR: Invalid package status reference : ${_PackageStatus} - ${mcfLine}."
                    _RC="${EC}"
                  fi
                  if [ "${_RC}" -ne 0 ]; then
                    echo -e "\\nERROR: Commit failed - ${mcfLine}."
                    _RC="${EC}"
                  elif [ "${_TRC}" -ne 0 ]; then
                    echo -e "\\nERROR: Tag failed - ${mcfLine}."
                    _RC="${EC}"
                  fi
                  echo -e "\\n";       #Add empty space
                fi
              popd &> /dev/null
              _UpdateInd=""; #Reset flag
              planUser="${line[8]}";   #Get owner of this plan
              #Process file copy for this plan to git repos path
              count=$((count+1));
              MigrationData=$(echo "[MIGRATE]-DATA - ${mcfLine}"| awk '{print $1,$5,$6,$7,$8,$9,$10}');
              echo -e "${MigrationData} , MIGRATION , NO_ASM , NO_C_CPP , NO_MAK , NO_SBT , NO_H_HPP , NO_INC , NO_MAC , NO_INCLUDE , NO_OBJ , NO_LST , NO_ZTPFGIVI , NO_ASMSBT , NO_SBTLST , NO_TPFARC , NO_TPFARLST , NO_SO , NO_MAP , NO_OUT , NO_ERR" >> "${HOME}/MigrationSummary.csv"
              if [[ "${line[9]}" == " A" ]] || [[ "${line[9]}" == " R" ]] || [[ "${line[9]}" == " D" ]] || [[ "${line[9]}" == "A" ]] || [[ "${line[9]}" == "R" ]] || [[ "${line[9]}" == "D" ]]; then
                echo "SKIP - ${line[9]}" &> /dev/null
              else
                if [[ "${mcfLine: -2}" == " R" ]]; then
                  for (( i = 9 ; i < ${#line[@]} ; i="${i}"+1 ))
                  do
                    nonIBM_MCF_Del "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass2="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass2}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail2="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail2}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=COPY_FAILED_${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                  #Source repository commit for the previous changes
                  pushd "${DestSrcPath}" &> /dev/null
                  if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n"; #Add empty space
                  fi
                  popd &> /dev/null
                  #Derived repository commit for the previous changes
                  pushd "${DestBinPath}" &> /dev/null
                  if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n";       #Add empty space
                  fi
                  popd &> /dev/null
                  for (( i = 9 ; i < ${#line[@]} ; i="${i}"+1 ))
                  do
                    nonIBM_MCF_Copy "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass2="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass2}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail2="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail2}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                elif [[ "${mcfLine: -2}" == " D" ]]; then
                  for (( i = 9 ; i < ${#line[@]} ; i="${i}"+1 ))
                  do
                    nonIBM_MCF_Del "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass2="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass2}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail2="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail2}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                      if [[ ${lineout} =~ .PULL ]]; then
                        lineout=COPY_FAILED_${lineout%.*}
                      fi
                      lastext="${line[$i]##*.}"
                      if [[ ${lastext} == PULL ]]; then
                        lastext1=${line[$i]%.*};
                        lastext="${lastext1##*.}"
                      fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                  #Source repository commit for the previous changes
                  pushd "${DestSrcPath}" &> /dev/null
                  if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n"; #Add empty space
                  fi
                  popd &> /dev/null
                  #Derived repository commit for the previous changes
                  pushd "${DestBinPath}" &> /dev/null
                  if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n";       #Add empty space
                  fi
                  popd &> /dev/null
                else
                  for (( i = 9 ; i < ${#line[@]} ; i="${i}"+1 ))
                  do
                    nonIBM_MCF_Copy "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass2="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass2}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail2="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail2}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                fi
              fi
              loadPlan="${line[4]}"    #Store currunt load plan for matching
              PackageStatus="${_PackageStatus}"
              _UpdateInd="${mcfLine: -2}"
            fi
            loadDate="${line[3]}"      #Store currunt load date for matching
            PackageStatus1="${line[1]}" #Store current online/fallback/pending status for matching
            _UpdateInd="${mcfLine: -2}"    #It'll get package update reference
          else
            #Source repository commit for the previous changes
            pushd "${DestSrcPath}" &> /dev/null
              if [ -n "$(git status --porcelain)" ]; then
                git add . &> /dev/null
                if [[ "${PackageStatus}" == O ]]; then
                  echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                  git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:online"; _RC=$?
                  if [ "${_RC}" -eq 0 ]; then
                    git tag -a "online-${loadPlan}-$(git log -1 --pretty=%h)" -m "online-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                  fi
                elif [[ "${PackageStatus}" == F ]]; then
                  echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                  git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:fallback"; _RC=$?
                  if [ "${_RC}" -eq 0 ]; then
                    git tag -a "fallback-${loadPlan}-$(git log -1 --pretty=%h)" -m "fallback-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                  fi
                elif [[ "${PackageStatus}" == P ]]; then
                  echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                  git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:pending"; _RC=$?
                  if [ "${_RC}" -eq 0 ]; then
                    git tag -a "pending-${loadPlan}-$(git log -1 --pretty=%h)" -m "pending-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                  fi
                else
                  echo -e "\\nERROR: Invalid package status refence : ${_PackageStatus} - ${mcfLine}."
                  _RC="${EC}"
                fi
                if [ "${_RC}" -ne 0 ]; then
                  echo -e "\\nERROR: Commit failed - ${mcfLine}."
                  _RC="${EC}"
                elif [ "${_TRC}" -ne 0 ]; then
                  echo -e "\\nERROR: Tag failed - ${mcfLine}."
                  _RC="${EC}"
                fi
                echo -e "\\n";         #Add empty space
              fi
            popd &> /dev/null
            #Derived repository commit for the previous changes
            pushd "${DestBinPath}" &> /dev/null
              if [ -n "$(git status --porcelain)" ]; then
                git add . &> /dev/null
                if [[ "${PackageStatus}" == O ]]; then
                  echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                  git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:online"; _RC=$?
                  if [ "${_RC}" -eq 0 ]; then
                    git tag -a "online-${loadPlan}-$(git log -1 --pretty=%h)" -m "online-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                  fi
                elif [[ "${PackageStatus}" == F ]]; then
                  echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                  git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:fallback"; _RC=$?
                  if [ "${_RC}" -eq 0 ]; then
                    git tag -a "fallback-${loadPlan}-$(git log -1 --pretty=%h)" -m "fallback-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                  fi
                elif [[ "${PackageStatus}" == P ]]; then
                  echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
                  git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:pending"; _RC=$?
                  if [ "${_RC}" -eq 0 ]; then
                    git tag -a "pending-${loadPlan}-$(git log -1 --pretty=%h)" -m "pending-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                  fi
                else
                  echo -e "\\nERROR: Invalid package status refence : ${_PackageStatus} - ${mcfLine}."
                  _RC="${EC}"
                fi
                if [ "${_RC}" -ne 0 ]; then
                  echo -e "\\nERROR: Commit failed - ${mcfLine}."
                  _RC="${EC}"
                elif [ "${_TRC}" -ne 0 ]; then
                  echo -e "\\nERROR: Tag failed - ${mcfLine}."
                  _RC="${EC}"
                fi
                echo -e "\\n";         #Add empty space
              fi
            popd &> /dev/null
            _UpdateInd="" #Reset
            if [[ "${line[4]}" == "${loadPlan}" ]] || [[ -z "${loadPlan}" ]]; then
              planUser="${line[8]}";   #Get owner of this plan
              #Process file copy for this plan to git repos path
              count=$((count+1));
              MigrationData=$(echo "[MIGRATE]-DATA - ${mcfLine}"| awk '{print $1,$5,$6,$7,$8,$9,$10}');
              echo -e "${MigrationData} , MIGRATION , NO_ASM , NO_C_CPP , NO_MAK , NO_SBT , NO_H_HPP , NO_INC , NO_MAC , NO_INCLUDE , NO_OBJ , NO_LST , NO_ZTPFGIVI , NO_ASMSBT , NO_SBTLST , NO_TPFARC , NO_TPFARLST , NO_SO , NO_MAP , NO_OUT , NO_ERR" >> "${HOME}/MigrationSummary.csv"
              #shellcheck disable=SC2004
              if [[ "${line[9]}" == " A" ]] || [[ "${line[9]}" == " R" ]] || [[ "${line[9]}" == " D" ]] || [[ "${line[9]}" == "A" ]] || [[ "${line[9]}" == "R" ]] || [[ "${line[9]}" == "D" ]]; then
                echo "SKIP - ${line[9]}" &> /dev/null
              else
                if [[ "${mcfLine: -2}" == " R" ]]; then
                  for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Del "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass3="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass3}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail3="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail3}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                  #Source repository commit for the previous changes
                  pushd "${DestSrcPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n"; #Add empty space
                  #fi
                  popd &> /dev/null
                  #Derived repository commit for the previous changes
                  pushd "${DestBinPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n";       #Add empty space
                  #fi
                  popd &> /dev/null
                  for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Copy "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass3="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass3}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail3="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail3}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                elif [[ "${mcfLine: -2}" == " D" ]]; then
                  for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Del "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass3="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass3}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail3="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail3}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                  #Source repository commit for the previous changes
                  pushd "${DestSrcPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n"; #Add empty space
                  #fi
                  popd &> /dev/null
                  #Derived repository commit for the previous changes
                  pushd "${DestBinPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n";       #Add empty space
                  #fi
                  popd &> /dev/null
                else
                  for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Copy "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass3="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass3}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail3="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail3}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
                  done
                fi
              fi
              loadPlan="${line[4]}"    #Store currunt load plan for matching
              PackageStatus="${_PackageStatus}"
            else
              planUser="${line[8]}";   #Get owner of this plan
              #Process file copy for this plan to git repos path
              count=$((count+1));
              MigrationData=$(echo "[MIGRATE]-DATA - ${mcfLine}"| awk '{print $1,$5,$6,$7,$8,$9,$10}');
              echo -e "${MigrationData} , MIGRATION , NO_ASM , NO_C_CPP , NO_MAK , NO_SBT , NO_H_HPP , NO_INC , NO_MAC , NO_INCLUDE , NO_OBJ , NO_LST , NO_ZTPFGIVI , NO_ASMSBT , NO_SBTLST , NO_TPFARC , NO_TPFARLST , NO_SO , NO_MAP , NO_OUT , NO_ERR" >> "${HOME}/MigrationSummary.csv"
              #shellcheck disable=SC2004
              if [[ "${line[9]}" == " A" ]] || [[ "${line[9]}" == " R" ]] || [[ "${line[9]}" == " D" ]] || [[ "${line[9]}" == "A" ]] || [[ "${line[9]}" == "R" ]] || [[ "${line[9]}" == "D" ]]; then
                echo "SKIP - ${line[9]}" &> /dev/null
              else
			          if [[ ( "${mcfLine: -2}" == " R" ) ]]; then
				          for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Del "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass4="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass4}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail4="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail4}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
				          done
                  #Source repository commit for the previous changes
                  pushd "${DestSrcPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n"; #Add empty space
                  #fi
                  popd &> /dev/null
                  #Derived repository commit for the previous changes
                  pushd "${DestBinPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n";       #Add empty space
                  #fi
                  popd &> /dev/null
				          for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Copy "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass4="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass4}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail4="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail4}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
				          done
                elif [[ "${mcfLine: -2}" == " D" ]]; then
				          for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
                  do
                    nonIBM_MCF_Del "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                    if [ "${_RC}" -eq 0 ]; then
                      echo -e "[MIGRATE] PASS - ${line[$i]}"
                      pass4="[MIGRATE]-PASS";
                      sed "${count}s#MIGRATION#${pass4}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                    else
                      echo -e "[MIGRATE] FAIL - ${line[$i]}"
                      fail4="[MIGRATE]-FAIL";
                      sed "${count}s#MIGRATION#${fail4}#" -i "${HOME}/MigrationSummary.csv"
                      lineout=COPY_FAILED_${line[$i]};
                        if [[ ${lineout} =~ .PULL ]]; then
                          lineout=COPY_FAILED_${lineout%.*}
                        fi
                      lastext="${line[$i]##*.}"
                        if [[ ${lastext} == PULL ]]; then
                          lastext1=${line[$i]%.*};
                          lastext="${lastext1##*.}"
                        fi
                      extensionCheck;
                      _RC="${EC}";
                      #break
                    fi
				          done
                  #Source repository commit for the previous changes
                  pushd "${DestSrcPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n"; #Add empty space
                  #fi
                  popd &> /dev/null
                  #Derived repository commit for the previous changes
                  pushd "${DestBinPath}" &> /dev/null
                  #if [ -n "$(git status --porcelain)" ]; then
                    git add . &> /dev/null
                    echo -e "[MIGRATE] GIT - Commit changes for delete segments."
                    git commit -am "Date:${line[3]}120000, Type:Load, PlanID:${line[4]}, PlanOwner:${line[8],,}, SourceRef:xxxxxxx, Status:deleted"; _RC=$?
                    if [ "${_RC}" -eq 0 ]; then
                      git tag -a "deleted-${line[4]}-$(git log -1 --pretty=%h)" -m "deleted-${line[4]}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
                    fi
                    if [ "${_RC}" -ne 0 ]; then
                      echo -e "\\nERROR: Commit failed - ${mcfLine}."
                      _RC="${EC}"
                    elif [ "${_TRC}" -ne 0 ]; then
                      echo -e "\\nERROR: Tag failed - ${mcfLine}."
                      _RC="${EC}"
                    fi
                    echo -e "\\n";       #Add empty space
                  #fi
                  popd &> /dev/null
                else
              for (( i = 9 ; i < ${#line[@]} ; i=$i+1 ))
              do
                #echo -e "DDATE_DPLAN_COPY-${line[$i]}" #DEBUG
                #echo -e "[MIGRATE-OK] - ${mcfLine}"
                nonIBM_MCF_Copy "${line[$i]}" "${_fileVersion}" "${line[4]}" "${line[3]}"; _RC=$? #Do file copy as per file ext
                if [ "${_RC}" -eq 0 ]; then
                  echo -e "[MIGRATE] PASS - ${line[$i]}"
                  pass4="[MIGRATE]-PASS";
                  sed "${count}s#MIGRATION#${pass4}#" -i "${HOME}/MigrationSummary.csv"
                  lineout=${line[$i]};
                    if [[ ${lineout} =~ .PULL ]]; then
                      lineout=${lineout%.*}
                    fi
                  lastext="${line[$i]##*.}"
                    if [[ ${lastext} == PULL ]]; then
                      lastext1=${line[$i]%.*};
                      lastext="${lastext1##*.}"
                    fi
                  extensionCheck;
                else
                  echo -e "[MIGRATE] FAIL - ${line[$i]}"
                  fail4="[MIGRATE]-FAIL";
                  sed "${count}s#MIGRATION#${fail4}#" -i "${HOME}/MigrationSummary.csv"
                  lineout=COPY_FAILED_${line[$i]};
                    if [[ ${lineout} =~ .PULL ]]; then
                      lineout=COPY_FAILED_${lineout%.*}
                    fi
                  lastext="${line[$i]##*.}"
                    if [[ ${lastext} == PULL ]]; then
                      lastext1=${line[$i]%.*};
                      lastext="${lastext1##*.}"
                    fi
                  extensionCheck;
                  _RC="${EC}";
                      #break
                fi
              done
              fi
              fi
              loadPlan="${line[4]}"    #Store currunt load plan for matching
              PackageStatus="${_PackageStatus}"
            fi
            loadDate="${line[3]}"      #Store currunt load date for matching
            PackageStatus1="${line[1]}" #Store current online/fallback/pending status for matching
            _UpdateInd="${mcfLine: -2}"
          fi
        else
          echo -e "\\n[SKIP] NOT_PACKAGE - ${mcfLine}"
        fi
      else
        echo -e "\\n[SKIP] NO_DATA - ${mcfLine}"
      fi
      ProgressBar "${count}" "${_end}" "${line[2]}"
    done < "${SourcePath}"
    #Source repository commit for the previous changes
    pushd "${DestSrcPath}" &> /dev/null
      if [ -n "$(git status --porcelain)" ]; then
        git add . &> /dev/null
        if [[ "${PackageStatus}" == O ]]; then
          echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
          git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:online"; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            git tag -a "online-${loadPlan}-$(git log -1 --pretty=%h)" -m "online-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
          fi
        elif [[ "${PackageStatus}" == F ]]; then
          echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
          git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:fallback"; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            git tag -a "fallback-${loadPlan}-$(git log -1 --pretty=%h)" -m "fallback-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
          fi
        elif [[ "${PackageStatus}" == P ]]; then
          echo -e "[MIGRATE] GIT - Commit changes for previous plan data due to new plan found."
          git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:pending"; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            git tag -a "pending-${loadPlan}-$(git log -1 --pretty=%h)" -m "pending-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
          fi
        else
          echo -e "\\nERROR: Invalid package status refence : ${_PackageStatus} - ${mcfLine}."
          _RC="${EC}"
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Commit failed - ${mcfLine}."
          _RC="${EC}"
        elif [ "${_TRC}" -ne 0 ]; then
          echo -e "\\nERROR: Tag failed - ${mcfLine}."
          _RC="${EC}"
        fi
        echo -e "\\n";                 #Add empty space
      fi
      #shellcheck disable=SC2143
      if [ -n "$(git status | grep push)" ]; then
        #Online tag reference
        _temp1Hash="$(git log --pretty=%h,%s | grep online | head -1)"
        _prodNewHash="${_temp1Hash%,*}"; #Get online commit point
        git tag -d "${_onlineTag}" &> /dev/null
        git push origin :refs/tags/"${_onlineTag}" &> /dev/null
        git tag "${_onlineTag}" "${_prodNewHash}" &> /dev/null
        #Fallback tag reference
        _temp2Hash="$(git log --pretty=%h,%s | grep fallback | head -1)"
        _fallbkNewHash="${_temp2Hash%,*}"
        git tag -d "${_fallbackTag}" &> /dev/null
        git push origin :refs/tags/"${_fallbackTag}" &> /dev/null
        git tag "${_fallbackTag}" "${_fallbkNewHash}" &> /dev/null
        #Git push changes to remote along with Tag reference
        git push -u origin "${USR_MASTER_CORE}" --tags; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          echo -e "\\nINFO: Source repository push to remote - SUCCESS."
          Source_RC="${_RC}";
        else
          echo -e "\\nERROR: Source repository push to remote - FAILED."
          popd &> /dev/null
          _RC="${EC}";
          Source_RC="${_RC}";
          #break
        fi
        echo -e "\\n";                 #Add empty space
      fi
    popd &> /dev/null
    #Derived repository commit for the previous changes
    pushd "${DestBinPath}" &> /dev/null
      if [ -n "$(git status --porcelain)" ]; then
        git add . &> /dev/null
        if [[ "${PackageStatus}" == O ]]; then
          git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:online"; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            git tag -a "online-${loadPlan}-$(git log -1 --pretty=%h)" -m "online-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
          fi
        elif [[ "${PackageStatus}" == F ]]; then
          git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:fallback"; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            git tag -a "fallback-${loadPlan}-$(git log -1 --pretty=%h)" -m "fallback-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
          fi
        elif [[ "${PackageStatus}" == P ]]; then
          git commit -am "Date:${loadDate}120000, Type:Load, PlanID:${loadPlan}, PlanOwner:${planUser,,}, SourceRef:xxxxxxx, Status:pending"; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            git tag -a "pending-${loadPlan}-$(git log -1 --pretty=%h)" -m "pending-${loadPlan}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
          fi
        else
          echo -e "\\nINFO: Invalid package status refence : ${_PackageStatus} - ${mcfLine}."
          _RC="${EC}"
        fi
        if [ "${_RC}" -ne 0 ]; then
          echo -e "\\nERROR: Commit failed - ${mcfLine}."
          _RC="${EC}"
        elif [ "${_TRC}" -ne 0 ]; then
          echo -e "\\nERROR: Tag failed - ${mcfLine}."
          _RC="${EC}"
        fi
      fi
      #shellcheck disable=SC2143
      if [ -n "$(git status | grep push)" ]; then
        #Online tag reference
        _temp1Hash="$(git log --pretty=%h,%s | grep online | head -1)"
        _prodNewHash="${_temp1Hash%,*}"; #Get online commit point
        git tag -d "${_onlineTag}" &> /dev/null
        GIT_SSL_NO_VERIFY=true git push origin :refs/tags/"${_onlineTag}" &> /dev/null
        git tag "${_onlineTag}" "${_prodNewHash}" &> /dev/null
        #Fallback tag reference
        _temp2Hash="$(git log --pretty=%h,%s | grep fallback | head -1)"
        _fallbkNewHash="${_temp2Hash%,*}"
        git tag -d "${_fallbackTag}" &> /dev/null
        GIT_SSL_NO_VERIFY=true git push origin :refs/tags/"${_fallbackTag}" &> /dev/null
        git tag "${_fallbackTag}" "${_fallbkNewHash}" &> /dev/null
        #Git push changes to remote along with Tag reference
        GIT_SSL_NO_VERIFY=true git push -u origin "${USR_MASTER_CORE}" --tags; _RC=$?;
        if [ "${_RC}" -eq 0 ]; then
          echo -e "\\nINFO: Derived repository push to remote - SUCCESS."
          Derived_RC="${_RC}";
        else
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Git URL not belongs to NON-IBM RC:$EC"
          echo -e "\\nERROR: Derived repositories push to remote - FAILED."
          popd &> /dev/null
          _RC="${EC}";
          Derived_RC="${_RC}";
          #break
        fi
        echo -e "\\n";                 #Add empty space
      fi
    popd &> /dev/null
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Git URL not belongs to NON-IBM RC:$EC"
    echo -e "\\nERROR: Git URL not belongs to NON-IBM."
    _RC="${EC}";
  fi
  if [[ "${Source_RC}" -eq "${EC}" ]] || [[ "${Derived_RC}" -eq "${EC}" ]]; then
    _RC="${EC}";
  fi
  return "${_RC}";
}
#-----------------------------------------------------------------------------#
function systemFileMigrate {
  local _RC="${RC}"
  local _TRC="${RC}"
  local _fileList;
  local _fileType;
  local _dirList;
  local _fl;
  local _flcount=0;
  local _ftBinary=0;
  local _ftSource=0;
  local _ftSkipped=0;
  local _fileTotalCount=0;
  local _ftSkipped=0;
  local _ftBinary=0;
  local _ftSource=0;
  local _ftComBinary=0;
  local _ftComSource=0;
  local _SourceTotalCount=0;
  local _DerivedTotalCount=0;
  local _SkippedTotalCount=0;
  local _ftComSkipped=0;
  local _ftError=0;
  local _ErrorTotalCount=0;
  local _DestBinPath;
  local _DestSrcPath;
  local _newSourceCount;
  local _gitSourceCount;
  local _newFileCount;
  local _gitFileCount;
  local _newBinaryCount;
  local _gitBinaryCount;
  echo -e "\\nINFO: File copy in progress..."
  #
  if [[ "${PackageType}" == nonibm ]]; then
    echo -e "NON-IBM Process"
    echo -e "PWD-$PWD"                 #DEBUG
    echo -e "SourcePath-${SourcePath}"   #DEBUG
    ls -ls                             #DEBUG
    declare -a _dirList=("${SourcePath}/common/${PackageName}" "${SourcePath}/common/${PackageName}/derived" "${SourcePath}/common/${PackageName}/local_mod" "${SourcePath}/common/${PackageName}/local_mod/derived" "${SourcePath}/${SourceCore}" "${SourcePath}/${SourceCore}/derived" "${SourcePath}/${SourceCore}/local_mod" "${SourcePath}/${SourceCore}/local_mod/derived")
    for _dl in "${_dirList[@]}"
    do
      echo "---------------------------------------------------------------------------"
      echo "INFO: Directory copy from - ${_dl}"
      echo "---------------------------------------------------------------------------"
      _fileList=""
      if [ -d "${_dl}" ]; then
        pushd "${_dl}" &> /dev/null
          if [[ "${_dl}" =~ local_mod ]]; then
            #shellcheck disable=SC2185
            _fileList=($(find -type f -not -path "*~" -not -path "./cntl*" -not -path "./derived*"))
          else
            #shellcheck disable=SC2185
            _fileList=($(find -type f -not -path "*~" -not -path "./cntl*" -not -path "./local_mod*" -not -path "./derived*"))
          fi
          _ftBinary=0;
          _ftSource=0;
          _ftComBinary=0;
          _ftComSource=0;
          _ftSkipped=0;
          _ftError=0;
          for _fl in "${_fileList[@]}"
          do
            case "${_fl}" in
              *\.asm|*\.bak|*\.c|*\.cbl|*\.cms|*\.cpp|*\.for|*\.htm|*\.oco|*\.sbt|*\.scr|*\.java|*\.pl1|*\.mak)
                #Source directory
                if [[ "${_dl}" =~ derived ]]; then
                  if [[ "${_fl}" =~ .asm ]]; then
                    mkdir -p "${DestBinPath}/derived/sbtasm/"
                    cp -rfpv "${_fl}" "${DestBinPath}/derived/sbtasm/" &> /dev/null; _RC=$?;
                    if [ "${_RC}" -eq 0 ]; then
                      echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/";
                      _ftBinary=$((_ftBinary+1))
                      [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                    else
                      echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/sbtasm/"; _RC="${EC}";
                      _ftError=$((_ftError+1))
                    fi
                  elif [[ "${_fl}" =~ .c ]]; then
                    mkdir -p "${DestBinPath}/derived/tpfarc/"
                    cp -rfpv "${_fl}" "${DestBinPath}/derived/tpfarc/" &> /dev/null; _RC=$?;
                    if [ "${_RC}" -eq 0 ]; then
                      echo "INFO: Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/";
                      _ftBinary=$((_ftBinary+1))
                      [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                    else
                      echo -e "\\nERROR: Derived Copy ${_fl} ${DestBinPath}/derived/tpfarc/"; _RC="${EC}";
                      _ftError=$((_ftError+1))
                    fi
                  fi
                else
                  cp -rfpv "${_fl}" "${DestSrcPath}/src/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Source Copy ${_fl} ${DestSrcPath}/src/";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                  else
                    echo -e "\\nERROR: Source Copy ${_fl} ${_DestSrcPath}/src/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
                ;;
              *\.cpy|*\.mac)
                #Macro directory
                cp -rfpv "${_fl}" "${DestSrcPath}/macro/" &> /dev/null; _RC=$?;
                if [ "${_RC}" -eq 0 ]; then
                  echo "INFO: Source Copy ${_fl} ${DestSrcPath}/macro/";
                  _ftSource=$((_ftSource+1))
                  [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                else
                  echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/macro/"; _RC="${EC}";
                  _ftError=$((_ftError+1))
                fi
                ;;
              *\.h|*\.hpp|*\.inc|*\.dfdl)
                #Include directory
                cp -rfpv "${_fl}" "${DestSrcPath}/include/" &> /dev/null; _RC=$?;
                if [ "${_RC}" -eq 0 ]; then
                  echo "INFO: Source Copy ${_fl} ${DestSrcPath}/include/";
                  _ftSource=$((_ftSource+1))
                  [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                else
                  echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/include/"; _RC="${EC}";
                  _ftError=$((_ftError+1))
                fi
                ;;
              *\.dat)
                #Dataset directory
                cp -rfpv "${_fl}" "${DestSrcPath}/dataset/" &> /dev/null; _RC=$?;
                if [ "${_RC}" -eq 0 ]; then
                  echo "INFO: Source Copy ${_fl} ${DestSrcPath}/dataset/";
                  _ftSource=$((_ftSource+1))
                  [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                else
                  echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/dataset/"; _RC="${EC}";
                  _ftError=$((_ftError+1))
                fi
                ;;
              *\.bsc|*\.dbc|*\.hfs|*\.jcl|*\.job)
                #System_config direcotry
                cp -rfpv "${_fl}" "${DestSrcPath}/system_config/" &> /dev/null; _RC=$?;
                if [ "${_RC}" -eq 0 ]; then
                  echo "INFO: Source Copy ${_fl} ${DestSrcPath}/system_config/";
                  _ftSource=$((_ftSource+1))
                  [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                else
                  echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/dataset/"; _RC="${EC}";
                  _ftError=$((_ftError+1))
                fi
                ;;
              *\.200|*\.201|*\.ans|*\.ass|*\.lis|*\.loa|*\.log|*\.lsc|*\.oth|*\.pil|*\.rt|*\.tok|*\.uns|*\.vis)
                #Unknown direcotry
                cp -rfpv "${_fl}" "${DestSrcPath}/unknown/" &> /dev/null; _RC=$?;
                if [ "${_RC}" -eq 0 ]; then
                  echo "INFO: Source Copy ${_fl} ${DestSrcPath}/unknown/";
                  _ftSource=$((_ftSource+1))
                  [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                else
                  echo -e "\\nERROR: Source Copy ${_fl} ${DestSrcPath}/unknown/"; _RC="${EC}";
                  _ftError=$((_ftError+1))
                fi
                ;;
              *\.out*|*\.err*)
                if [[ "${_dl}" =~ derived ]]; then
                  mkdir -p "${DestBinPath}/derived/build/"
                  cp -rfpv "${_fl}" "${DestBinPath}/derived/build/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/derived/build/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/derived/build/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  cp -rfpv "${_fl}" "${DestBinPath}/build/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/build/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/build/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
                ;;
              lib*\.so)
                if [[ "${_dl}" =~ derived ]]; then
                  mkdir -p "${DestBinPath}/derived/lib/"
                  cp -rfpv "${_fl}" "${DestBinPath}/derived/lib/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/derived/lib/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/derived/build/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  cp -rfpv "${_fl}" "${DestBinPath}/lib/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/lib/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/lib/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
                ;;
              *\.so)
                if [[ "${_dl}" =~ derived ]]; then
                  cp -rfpv "${_fl}" "${DestBinPath}/derived/load/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/derived/load/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/derived/load/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  cp -rfpv "${_fl}" "${DestBinPath}/load/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/load/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/load/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
                ;;
              *\.lst|*\.map|*\.sbtlst|*\.tpfarlst)
                if [[ "${_dl}" =~ derived ]]; then
                  mkdir -p "${DestBinPath}/derived/lst/"
                  cp -rfpv "${_fl}" "${DestBinPath}/derived/lst/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/derived/lst/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/derived/lst/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  cp -rfpv "${_fl}" "${DestBinPath}/lst/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/lst/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/lst/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
                ;;
              *\.o|*\.ztpfgivi)
                if [[ "${_dl}" =~ derived ]]; then
                  mkdir -p "${DestBinPath}/derived/obj/"
                  cp -rfpv "${_fl}" "${DestBinPath}/derived/obj/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/derived/obj/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/derived/obj/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  cp -rfpv "${_fl}" "${DestBinPath}/obj/" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Derived Copy ${_fl} ${DestSrcPath}/obj/";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Derived Copy ${_fl} ${DestSrcPath}/obj/"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
                ;;
            esac
          done
        popd &> /dev/null
        _SourceCommonCount=$[${_SourceCommonCount}+${_ftComSource}]
        _DerivedCommonCount=$[${_DerivedCommonCount}+${_ftComBinary}]
        _SkippedCommonCount=$[${_SkippedCommonCount}+${_ftComSkipped}]
        _SourceTotalCount=$[${_SourceTotalCount}+${_ftSource}]
        _DerivedTotalCount=$[${_DerivedTotalCount}+${_ftBinary}]
        _SkippedTotalCount=$[${_SkippedTotalCount}+${_ftSkipped}]
        _ErrorTotalCount=$[${_ErrorTotalCount}+${_ftError}]
        _fileTotalCount=$[${_fileTotalCount}+${#_fileList[@]}]
      fi
    done
  elif [[ "${PackageType}" == ibm ]]; then
    declare -a _dirList=("${SourcePath}/common/${PackageName}" "${SourcePath}/common/${PackageName}/local_mod" "${SourcePath}/${SourceCore}/${PackageName}" "${SourcePath}/${SourceCore}/${PackageName}/local_mod")
    for _dl in "${_dirList[@]}"
    do
      echo "---------------------------------------------------------------------------"
      echo "INFO: Directory copy from - ${_dl}"
      echo "---------------------------------------------------------------------------"
      _fileList=();                    #Empty array
      if [ -d "${_dl}" ]; then
        pushd "${_dl}" &> /dev/null
          if [[ "${_dl}" =~ local_mod ]]; then
            #shellcheck disable=SC2178,SC2185
            _fileList=($(find -type f -not -path "*~" -not -path "*.cntl" -not -path "*.cntl_*" -not -path "./cntl*"))
          else
            #shellcheck disable=SC2178,SC2185
            _fileList=($(find -type f -not -path "*~" -not -path "*.cntl" -not -path "*.cntl_*" -not -path "./cntl*" -not -path "./local_mod*"))
          fi
          _ftBinary=0;
          _ftSource=0;
          _ftComBinary=0;
          _ftComSource=0;
          _ftSkipped=0;
          _ftError=0;
          for _fl in "${_fileList[@]}"
          do
            if [[ "${_fl}" =~ /oco/ ]]; then      #Derived files /oco/ additional check to move source folder.
              _flTemp="${_fl%/*}"
              _flTemp="${_flTemp/./}"
              _DestSrcPath="${DestSrcPath}${_flTemp}/"
              mkdir -p "${_DestSrcPath}"
              cp -rfpv "${_fl}" "${_DestSrcPath}" &> /dev/null; _RC=$?;
               if [ "${_RC}" -eq 0 ]; then
                 echo "INFO: Source Copy ${_fl} ${_DestSrcPath}";
                 _ftSource=$((_ftSource+1))
                 [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
               else
                 echo -e "\\nERROR: Source Copy ${_fl} ${_DestSrcPath}"; _RC="${EC}";
                 _ftError=$((_ftError+1))
               fi
            else
              _fileType="$(file -i ${_fl})"
              if [[ "${_fileType}" =~ 'binary' ]] && [[ "${_fileType}" =~ 'application/' ]]; then
                #Binary file copy based on MIME
                _flTemp="${_fl%/*}"
                _flTemp="${_flTemp/./}"
                _DestBinPath="${DestBinPath}${_flTemp}/"
                mkdir -p "${_DestBinPath}"
                cp -rfpv "${_fl}" "${_DestBinPath}" &> /dev/null; _RC=$?; #SOURCE FILE COPY
                if [ "${_RC}" -eq 0 ]; then
                  echo "INFO: Binary Copy ${_fl} ${_DestBinPath}";
                  _ftBinary=$((_ftBinary+1))
                  [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                else
                  echo -e "\\nERROR: Binary Copy ${_fl} ${_DestBinPath}"; _RC="${EC}";
                  _ftError=$((_ftError+1))
                fi
              elif [[ "${_fileType}" =~ '-ascii' ]] && [[ "${_fileType}" =~ 'text/' ]]; then
                if [[ "${_fl: -4}" == '.lst' ]] || [[ "${_fl: -4}" == '.map' ]] || [[ "${_fl: -4}" == '.rpt' ]] ; then
                  #Source file copy based on MIME
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestBinPath="${DestBinPath}${_flTemp}/"
                  mkdir -p "${_DestBinPath}"
                  cp -rfpv "${_fl}" "${_DestBinPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Binary Copy ${_fl} ${_DestBinPath}";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Binary Copy ${_fl} ${_DestBinPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                elif [[ "${_fl: -4}" == '.out' ]] || [[ "${_fl: -5}" == .out* ]] || [[ "${_fl: -4}" == '.err' ]] || [[ "${_fl: -5}" == .err* ]] || [[ "${_fl: -5}" == '.load' ]]; then
                  #Source file copy based on MIME
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestBinPath="${DestBinPath}${_flTemp}/"
                  mkdir -p "${_DestBinPath}"
                  cp -rfpv "${_fl}" "${_DestBinPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Binary Copy ${_fl} ${_DestBinPath}";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: Binary Copy ${_fl} ${_DestBinPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  #Source file copy based on MIME
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestSrcPath="${DestSrcPath}${_flTemp}/"
                  mkdir -p "${_DestSrcPath}"
                  cp -rfpv "${_fl}" "${_DestSrcPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: Source Copy ${_fl} ${_DestSrcPath}";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                  else
                    echo -e "\\nERROR: Source Copy ${_fl} ${_DestSrcPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
              elif [[ "${_fileType}" =~ 'text/' ]] && [[ "${_fileType}" =~ 'iso-' ]]; then
                #Empty file copy based on recognized file extension
                if [[ "${_fileType}" =~ ($EXT_TPF_APP) ]]; then
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestSrcPath="${DestSrcPath}${_flTemp}/"
                  mkdir -p "${_DestSrcPath}"
                  cp -rfpv "${_fl}" "${_DestSrcPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Source Copy ${_fl} ${_DestSrcPath}";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                  else
                    echo -e "\\nERROR: EmptyFile Source Copy ${_fl} ${_DestSrcPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestBinPath="${DestBinPath}${_flTemp}/"
                  mkdir -p "${_DestBinPath}"
                  cp -rfpv "${_fl}" "${_DestBinPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Binary Copy ${_fl} ${_DestBinPath}";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: EmptyFile Binary Copy ${_fl} ${_DestBinPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
              elif [[ "${_fileType}" =~ 'text/' ]] && [[ "${_fileType}" =~ 'unknown-8bit' ]]; then
                #Empty file copy based on recognized file extension
                if [[ "${_fileType}" =~ ($EXT_TPF_APP) ]]; then
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestSrcPath="${DestSrcPath}${_flTemp}/"
                  mkdir -p "${_DestSrcPath}"
                  cp -rfpv "${_fl}" "${_DestSrcPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Source Copy ${_fl} ${_DestSrcPath}";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                  else
                    echo -e "\\nERROR: EmptyFile Source Copy ${_fl} ${_DestSrcPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestBinPath="${DestBinPath}${_flTemp}/"
                  mkdir -p "${_DestBinPath}"
                  cp -rfpv "${_fl}" "${_DestBinPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Binary Copy ${_fl} ${_DestBinPath}";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: EmptyFile Binary Copy ${_fl} ${_DestBinPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
              elif [[ "${_fileType}" =~ 'text/' ]] && [[ "${_fileType}" =~ 'utf-8' ]]; then
                #Empty file copy based on recognized file extension
                if [[ "${_fileType}" =~ ($EXT_TPF_APP) ]]; then
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestSrcPath="${DestSrcPath}${_flTemp}/"
                  mkdir -p "${_DestSrcPath}"
                  cp -rfpv "${_fl}" "${_DestSrcPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Source Copy ${_fl} ${_DestSrcPath}";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                  else
                    echo -e "\\nERROR: EmptyFile Source Copy ${_fl} ${_DestSrcPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestBinPath="${DestBinPath}${_flTemp}/"
                  mkdir -p "${_DestBinPath}"
                  cp -rfpv "${_fl}" "${_DestBinPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Binary Copy ${_fl} ${_DestBinPath}";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: EmptyFile Binary Copy ${_fl} ${_DestBinPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
              elif [[ "${_fileType}" =~ 'ascii' ]] && [[ "${_fileType}" =~ 'application/' ]]; then
                #Empty file copy based on recognized file extension
                if [[ "${_fileType}" =~ ($EXT_TPF_APP) ]]; then
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestSrcPath="${DestSrcPath}${_flTemp}/"
                  mkdir -p "${_DestSrcPath}"
                  cp -rfpv "${_fl}" "${_DestSrcPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Source Copy ${_fl} ${_DestSrcPath}";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                  else
                    echo -e "\\nERROR: EmptyFile Source Copy ${_fl} ${_DestSrcPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestBinPath="${DestBinPath}${_flTemp}/"
                  mkdir -p "${_DestBinPath}"
                  cp -rfpv "${_fl}" "${_DestBinPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Binary Copy ${_fl} ${_DestBinPath}";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: EmptyFile Binary Copy ${_fl} ${_DestBinPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
              elif [[ "${_fileType}" =~ 'binary' ]] && [[ "${_fileType}" =~ 'inode/x-empty' ]]; then
                #Empty file copy based on recognized file extension
                if [[ "${_fileType}" =~ ($EXT_TPF_APP) ]]; then
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestSrcPath="${DestSrcPath}${_flTemp}/"
                  mkdir -p "${_DestSrcPath}"
                  cp -rfpv "${_fl}" "${_DestSrcPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Source Copy ${_fl} ${_DestSrcPath}";
                    _ftSource=$((_ftSource+1))
                    [[ "${_dl}" =~ common ]] && _ftComSource=$((_ftComSource+1))
                  else
                    echo -e "\\nERROR: EmptyFile Source Copy ${_fl} ${_DestSrcPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                else
                  _flTemp="${_fl%/*}"
                  _flTemp="${_flTemp/./}"
                  _DestBinPath="${DestBinPath}${_flTemp}/"
                  mkdir -p "${_DestBinPath}"
                  cp -rfpv "${_fl}" "${_DestBinPath}" &> /dev/null; _RC=$?;
                  if [ "${_RC}" -eq 0 ]; then
                    echo "INFO: EmptyFile Binary Copy ${_fl} ${_DestBinPath}";
                    _ftBinary=$((_ftBinary+1))
                    [[ "${_dl}" =~ common ]] && _ftComBinary=$((_ftComBinary+1))
                  else
                    echo -e "\\nERROR: EmptyFile Binary Copy ${_fl} ${_DestBinPath}"; _RC="${EC}";
                    _ftError=$((_ftError+1))
                  fi
                fi
              else
                echo -e "\\nWARNING: Unrecognized file type SKIPPED - ${_fileType}"
                _ftSkipped=$((_ftSkipped+1))
                [[ "${_dl}" =~ common ]] && _ftComSkipped=$((_ftComSkipped+1))
              fi
            fi   #---/oco/ file type
          done
        popd &> /dev/null
        _SourceCommonCount=$[${_SourceCommonCount}+${_ftComSource}]
        _DerivedCommonCount=$[${_DerivedCommonCount}+${_ftComBinary}]
        _SkippedCommonCount=$[${_SkippedCommonCount}+${_ftComSkipped}]
        _SourceTotalCount=$[${_SourceTotalCount}+${_ftSource}]
        _DerivedTotalCount=$[${_DerivedTotalCount}+${_ftBinary}]
        _SkippedTotalCount=$[${_SkippedTotalCount}+${_ftSkipped}]
        _ErrorTotalCount=$[${_ErrorTotalCount}+${_ftError}]
        _fileTotalCount=$[${_fileTotalCount}+${#_fileList[@]}]
      fi
      #_fileTotalCount=$[${_fileTotalCount}+${#_fileList[@]}]
    done
    #echo -e "PWD-$PWD"                #DEBUG
  fi
  echo -e "\\nINFO: Git push data to remote repository in progress..."
  pushd "${DestSrcPath}" &> /dev/null
    #Source repository
    echo -e "base/oco/* binary\n" > .gitattributes
    git add --all &> /dev/null
    _newSourceCount=$(git status -u --short | wc -l)
    _gitSourceCount=$(find . -type f -not -path "./.g*" -not -path "./README*" | wc -l)
    #-----------------------Curling the put level date------------------------#
    Curl_core="${SourceCore}"         #apo
    ProdCurl="${GitSSHRURL}"          #Full URL "https://vhldvztdt001.tvlport.net:8443/gitblit/r/tpf/tp/ibm/ibm_put13b.git
    ProdURL="${ProdCurl#*//}"         #Dev URL  vhldvztdt001.tvlport.net:8443/gitblit/r/tpf/tp/ibm/ibm_put13b.git
    ProdHttp="${ProdURL%%:*}"         #Env URL  vhldvztdt001.tvlport.net
    ProdRgit="${ProdCurl%.*}"         #https://vhldvztdt001.tvlport.net:8443/gitblit/r/tpf/tp/ibm/ibm_put13b
    ProdPutCurl="${ProdRgit##*_}"     #put13a
    Curldate=$(curl -k "${PRD_API_RURL_SMOD}/${PRD_API_WKF}/common/getPutDeployDate?putName=${ProdPutCurl}&systemName=${Curl_core}")
    currentdate=( $(echo "$Curldate" | awk '{print $2}') )
      #shellcheck disable=SC2128
      if [ -z "${currentdate}" ]; then
         #shellcheck disable=SC2178
         currentdate="$(date +%Y%m%d%H%M%S)"
      fi
    #shellcheck disable=SC2128
    git commit -am "Date:${currentdate}, Type:Migrate, PlanID:${PackageName}, PlanOwner:${MTP_SUSR}, SourceRef:xxxxxxx, Status:online"; _RC=$?
    if [ "${_RC}" -eq 0 ]; then
      git tag -a "online-${PackageName}-$(git log -1 --pretty=%h)" -m "online-${PackageName}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
    fi
    if [ "${_RC}" -eq 0 ] && [ "${_TRC}" -eq 0 ]; then
      git push origin "master_${SourceCore}" --tags &> /dev/null; RC=$?;
      if [ "${_RC}" -eq 0 ]; then
        #Derived binary repository
        pushd "${DestBinPath}" &> /dev/null
          git add --all &> /dev/null
          _newBinaryCount=$(git status -u --short | wc -l)
          _gitBinaryCount=$(find . -type f -not -path "./.g*" -not -path "./README*" | wc -l)
          #git commit -am "Code migration - online" &> /dev/null; _RC=$?
          #shellcheck disable=SC2128
          git commit -am "Date:${currentdate}, Type:Migrate, PlanID:${PackageName}, PlanOwner:${MTP_SUSR}, SourceRef:xxxxxxx, Status:online" &> /dev/null; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            git tag -a "online-${PackageName}-$(git log -1 --pretty=%h)" -m "online-${PackageName}-$(git log -1 --pretty=%h)" "$(git log -1 --pretty=%h)"; _TRC=$?
          fi
          if [ "${_RC}" -eq 0 ] && [ "${_TRC}" -eq 0 ]; then
            GIT_SSL_NO_VERIFY=true git push origin "master_${SourceCore}" --tags &> /dev/null; RC=$?;
          elif [ "${_RC}" -ne 0 ]; then
            echo -e "\\nERROR: Failed to commit derived repository."
            _RC="${EC}"
          elif [ "${_TRC}" -ne 0 ]; then
            echo -e "\\nERROR: Tag failed - ${mcfLine}."
            _RC="${EC}"
          fi
        popd &> /dev/null
      else
       sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Failed to push source repository. RC:$EC"
        echo -e "\\nERROR: Failed to push source repository."
        _RC="${EC}"
      fi
    elif [ "${_RC}" -ne 0 ]; then
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Failed to commit source repository. RC:$EC"
      echo -e "\\nERROR: Failed to commit source repository."
      _RC="${EC}"
    elif [ "${_TRC}" -ne 0 ]; then
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Tag failed - ${mcfLine} RC:$EC"
      echo -e "\\nERROR: Tag failed - ${mcfLine}."
      _RC="${EC}"
    fi
  popd &> /dev/null
  echo -e "\\nINFO: Git push data to remote repository completed."
  if [ "${_RC}" -eq 0 ]; then
    _newFileCount=$[${_newSourceCount}+${_newBinaryCount}]
    _gitFileCount=$[${_gitSourceCount}+${_gitBinaryCount}]
    echo "|--------------------------------------------------------------------------"
    echo "|>>>>>>>>>>>>>>>>>>>>>> Code Migration Summary <<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "|--------------------------------------------------------------------------"
    echo "|> Total Source file path count        : ${_fileTotalCount} "
    echo "|> Total Destination SCM count         : ${_newFileCount} "
    echo "|> Newly added file count              : ${_gitFileCount}"
    echo "|> Error file copy count               : ${_ErrorTotalCount}"
    echo "|--------------------------------------------------------------------------"
    echo "|> Source files in Common dir          : ${_SourceCommonCount} "
    echo "|> Derived files in Common dir         : ${_DerivedCommonCount} "
    echo "|> Unknown files in Common dir         : ${_SkippedCommonCount} "
    echo "|> Total Source files in Core dir      : ${_SourceTotalCount} "
    echo "|> Total Derived files in Core dir     : ${_DerivedTotalCount} "
    echo "|> Total Unknown files in Core dir     : ${_SkippedTotalCount} "
    echo "|--------------------------------------------------------------------------"
    echo "| NOTE: *~ and *.cntl files ignored in this migration "
  else
    echo "|--------------------------------------------------------------------------"
    echo "|>>>>>>>>>>>>>>>>>>>>>> Code Migration Summary <<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "|--------------------------------------------------------------------------"
    echo "|>"
    echo "|>            Code migration failed due to previous error. "
    echo "|>"
    echo "|--------------------------------------------------------------------------"
    echo "| NOTE: *~ and *.cntl files ignored in this migration "
  fi
  return "${_RC}"
}
#-----------------------------------------------------------------------------#
#Start main execution if validation success
if [ "${RC}" -eq 0 ]; then
  loadGitURL
  GitRepoPath="${GitSSHRURL##*tpf/}"   #tp/ibm/ibm_put14a.git
  OrgRefName="${GitRepoPath%%/*}"      #tp
  PackageSrc=$(basename "${GitSSHRURL}" ".${GitSSHRURL##*.}") #ibm_put14a
  PackageName="${PackageSrc#*_}"       #put14a
  PackageBin="derived_${PackageName}"  #derived_put14a
  PackageType="${PackageSrc%%_*}"      #ibm
  USR_MASTER_CORE="master_${SourceCore}" #master branch of the core
  GitSourceURL="${PRD_SRC_RURL}/tpf/${GitRepoPath}" #
  GitBinaryURL="${PRD_BIN_RURL}/tpf/${OrgRefName}/${PackageType}/derived_${PackageName}.git"
  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Migration data analysis started RC:$RC"
  echo -e "\\nINFO: Migration data analysis started.."
  if [[ "${MigrationType}" == MCF ]]; then
    if [ -f "${SourcePath}" ] && [[ "${SourcePath}" =~ ${SourceCore} ]]; then
      #Restrict if the data having NOTOK (NK) data in the MCF file
      #shellcheck disable=SC2002
      MCF_DATA=($(cat "${SourcePath}" | awk '$1 == "OK" && $3 == "'"${PackageName^^}"'"'));
      if [ "${#MCF_DATA[@]}" -eq 0 ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Not valid data found in file - ${SourcePath} RC:$EC"
        echo -e "\\nERROR: Not valid data found in file - ${SourcePath}"
        RC="${EC}"
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Invalid file for migration - ${SourcePath} RC:$EC"
      echo -e "\\nERROR: Invalid file for migration - ${SourcePath}"
      RC="${EC}"
    fi
  elif [[ "${MigrationType}" == SYSTEM ]]; then
    migrationAnalysis; RC=$?;
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Try with correct migration type - MCF or SYSTEM RC:$EC"
    echo -e "\\nERROR: Try with correct migration type - MCF or SYSTEM"
    RC="${EC}";
  fi
  if [ "${RC}" -eq 0 ]; then
    #Source repository preparations
    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source migration initiated RC:$RC"
    echo -e "\\nINFO: Source migration initiated..."
    DestSrcPath="${HOME}/MIGRATE/${PackageSrc}"
    [ -d "${DestSrcPath}" ] && rm -rf "${DestSrcPath}"
    git clone "${GitSourceURL}" "${DestSrcPath}" &> /dev/null; RC=$?;
    gitCreateBranch "${RC}" "${GitSourceURL}" "${PackageType}" "${DestSrcPath}" "${OrgRefName}"; RC=$?
    if [ "${RC}" -eq 0 ]; then
      #Binary repository preparations
      sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Derived migration initiated RC:$RC"
      echo -e "\\nINFO: Derived migration initiated..."
      DestBinPath="${HOME}/MIGRATE/${PackageBin}"
      [ -d "${DestBinPath}" ] && rm -rf "${DestBinPath}"
      GIT_SSL_NO_VERIFY=true git clone "${GitBinaryURL}" "${DestBinPath}" &> /dev/null; RC=$?;
      gitCreateBranch "${RC}" "${GitBinaryURL}" "${PackageType}" "${DestBinPath}" "${OrgRefName}"; RC=$?
      if [ "${RC}" -eq 0 ]; then
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Derived repository prepared for migration RC:$EC"
        echo -e "\\nINFO: Derived repository prepared for migration."
        if [[ "${MigrationType}" == MCF ]]; then
          mcfFileMigrate; RC=$?
          ######ADDING THE FIRST HEADER LINE #NON-IBM
          if [ ! -f "${DestSrcPath}/MigrationSummary.csv" ]; then
          headerCSV="MIGRATION-DATA , MIGRATION-STATUS , .asm , .c/.cpp , .mak , .sbt , .h/.hpp , .inc , .mac , .include , .o , .lst , .ztpfgivi , .asm(sbt) , .sbtlst , .c(tpfar) , .tpfarlst , .so , .map , .out , .err"
          sed -i "1i ${headerCSV}" "${HOME}/MigrationSummary.csv"
          fi
          pushd "${DestSrcPath}" &> /dev/null
            if [[ "${PWD}" == "${DestSrcPath}" ]]; then
              git checkout "master_${SourceCore}"
              #cp -rfpv "${HOME}/MigrationSummary.csv" . &> /dev/null
              if [ -f "${HOME}/MigrationSummary.csv" ]; then
                if [ -f "/migrate/ztpfsys/${SourceCore}/tools/${SourceCore}_migrate_scm.txt" ]; then
                  cat "/migrate/ztpfsys/${SourceCore}/tools/${SourceCore}_migrate_scm.txt" | grep -v "OK" | grep -w "${PackageName^^}" >> Missingnotok.txt
                elif [ -f "/ztpfsys/${SourceCore}/tools/${SourceCore}_migrate_scm.txt" ]; then
                  cat "/ztpfsys/${SourceCore}/tools/${SourceCore}_migrate_scm.txt" | grep -v "OK" | grep -w "${PackageName^^}" >> Missingnotok.txt
                fi
                if [ -s Missingnotok.txt ]; then
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:MCF SEGMENTS MIGRATION NK LIST:- $(date) >> Missingnotok.txt RC:$RC"
                  echo -e "" >> Missingnotok.txt
                  echo -e "MCF SEGMENTS MIGRATION NK LIST:- $(date)" >> Missingnotok.txt
                  git add Missingnotok.txt
                  git commit -am "MCF SEGMENTS NOT CONSIDER FOR MIGRATION"
                fi
                cat "${HOME}/MigrationSummary.csv" >> MigrationSummary.csv
                git add MigrationSummary.csv
                git commit -am "MIGRATION SUMMARY FILE ADDED TO GIT"
                GIT_SSL_NO_VERIFY=true git push -u origin "master_${SourceCore}" --tags &> /dev/null; RC1=$?;
              if [ "${RC1}" -ne 0 ]; then
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to push MIGRATION SUMMARY FILE to master_${SourceCore} branch to remote url RC:$EC"
                echo -e "\\nERROR: Unable to push MIGRATION SUMMARY FILE to master_${SourceCore} branch to remote url."
              else
                true > "${HOME}/MigrationSummary.csv"
              fi
            fi
            fi
          popd &> /dev/null
          ###Migration file added and cleared if git push done.
        elif [[ "${MigrationType}" == SYSTEM ]]; then
          systemFileMigrate; RC=$?
        fi
        if [ "${RC}" -eq 0 ]; then
          rm -rf "${DestSrcPath}" "${DestBinPath}"
          rm -f "${DestSrcPath}/MigrationSummary.csv"
        fi
      fi
    fi
  fi
else
  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Invalid inputs RC:$RC"
fi
#-----------------------------------------------------------------------------#
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:END ${MigrationType} ${SourceCore} ${SourcePath} ${GitSSHRURL} RC:$RC"
exit "${RC}"
#-----------------------------------------------------------------------------#
# vim: filetype=bash
