#!/bin/bash
# shellcheck disable=SC2206,SC2207,SC1117,SC2034,SC2179,SC2164
#*****************************************************************************#
#   SCRIPT NAME: mtpgitcmddvlexport                                           #
#                                                                             #
#   DESCRIPTION:                                                              #
#      Script to export the source from implementation plan master core       #
#             remote branch                                                   #
#                                                                             #
#   NOTE: Don't alter CONSOLE messages                                        #
#                                                                             #
#   INPUT:                                                                    #
#      $1  - Project directory path                                           #
#      $2  - Branch name                                                      #
#      $3  - User id (Linux)                                                  #
#                                                                             #
#   OUTPUT:                                                                   #
#      exit with 0, successfull process                                       #
#      exit with 8, error message                                             #
#                                                                             #
#*****************************************************************************#
#*****************************************************************************#
#                                                                             #
#                            M A I N T E N A N C E                            #
#                                                                             #
#-----------------------------------------------------------------------------#
#   MMDDYYYY    INIT      COMMENT                                             #
#   --------    ----      ----------------------------------------------------#
#   01062017    ARUL      Created script                                      #
#   05212018    ARUL      Re-try added to git operations                      #
#   04222019    GOWTHAM   Updated with logger support                         #
#   05022019    VINOTH    Retry method changed with curl                      #
#*****************************************************************************#
#unset MTP_ENV                          #DEBUG
#source "${MTP_ENV:=$PWD}/.mtpconfig"
#shellcheck disable=SC1090
source "${MTP_ENV:=$PWD}/mtplibrary"
shopt -s extglob nullglob              #Expand BASH options
#-----------------------------------------------------------------------------#
declare -i _ExIP=3;                    #Expected number of input parms
declare -i _ReIP="$#";                 #Received number of input parms
#
ProjectDir="$1";                       #Read actual path of prject dir
LocalBranchName="$2"                   #Read local branch name
LocalUserID="$3"                       #Read Linux User ID for workspace
#
SPID=$$; #To get process id of the script
SPNM=$0; #To get script name
minInputValidation "${_ExIP}" "${_ReIP}"; RC="$?";
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Start ${ProjectDir} ${LocalBranchName} ${LocalUserID} RC:$RC"
#
#-----------------------------------------------------------------------------#
#Start main execution if validation success
if [ "$RC" -eq 0 ]; then
  if [[ "$LocalUserID" == "$MTP_SUSR" ]]; then
      getParmFromBranch "$LocalBranchName" "DVL";
      if [ -n "${SYS_DVL_IMPL_CWRK}" ] && [ -n "${APP_DVL_IMPL_CWRK}" ]; then
        activeRepo="$( git config --get remote.origin.url )";
        originRepo="${activeRepo/\/*@///${MTP_SUSR}@}";
        tempDir="${HOME}/mtpGit_$LocalUserID/$LocalBranchName";
        rm -rf "$tempDir";
        retryCMD "git clone -b master_${USR_IMPL_CORE} ${originRepo} ${tempDir}" "${tempDir}" "N" "Company=${REF_COMPANY}&pRepoName=${USR_IMPL_PLAN}&pisSource=true"; RC=$?;
        if [ "$RC" -eq 0 ]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Source export in progress... RC:$RC"
          echo -e "INFO: Source export in progress...\n";              #CONSOLE
          if [ ${#tempDir[@]} -gt 0 ]; then
            pushd "$tempDir" &> /dev/null
              rm -rf .git*
              if [ -d "${SYS_DVL_IMPL_CWRK}" ]; then
                # shellcheck disable=SC2086
                mv -fu !($DIR_TPF_APP|.*) "${SYS_DVL_IMPL_CWRK}" &> /dev/null;
                #Remove SYS workspace if it's empty
                if [ ! "$(ls -A "$SYS_DVL_IMPL_CWRK")" ]; then
                  rm -rf "$SYS_DVL_IMPL_CWRK";
                  if [ ! "$(ls -A "${DVL_TPF_SYS}/${USR_IMPL_PLAN}")" ]; then
                    rm -rf "${DVL_TPF_SYS:?}/${USR_IMPL_PLAN}";
                  fi
                else
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Export to ${SYS_DVL_IMPL_CWRK} RC:$RC"
                  echo -e "INFO: Export to ${SYS_DVL_IMPL_CWRK}";      #CONSOLE
                fi
              else
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Workspace doesn't exist - ${SYS_DVL_IMPL_CWRK} RC:$RC"
                echo -e "INFO: Workspace doesn't exist - ${SYS_DVL_IMPL_CWRK}"; #CONSOLE
              fi
              # Application data export to DVL workspace
              if [ -d "${APP_DVL_IMPL_CWRK}" ]; then
                if [ ${#tempDir[@]} -gt 0 ]; then
                  if [ "$(ls -A)" ]; then
                    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Export to ${APP_DVL_IMPL_CWRK} RC:$RC"
                    echo -e "INFO: Export to ${APP_DVL_IMPL_CWRK}";    #CONSOLE
                    #mv -f !(.*) "${APP_DVL_IMPL_CWRK}";
                    shopt -s dotglob; mv -- * "${APP_DVL_IMPL_CWRK}";
                  fi
                  #Remove APP workspace if it's empty
                  if [ ! "$(ls -A "${APP_DVL_IMPL_CWRK}")" ]; then
                    rm -rf "${APP_DVL_IMPL_CWRK}";
                    if [ ! "$(ls -A "${DVL_TPF_APP}/${USR_IMPL_PLAN}")" ]; then
                      rm -rf "${DVL_TPF_APP:?}/${USR_IMPL_PLAN}";
                    fi
                  fi
                fi
              else
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Workspace doesn't exist - ${APP_DVL_IMPL_CWRK} RC:$RC"
                echo -e "INFO: Workspace doesn't exist - ${APP_DVL_IMPL_CWRK}"; #CONSOLE
              fi
            popd &> /dev/null
          else
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Nothing to export. RC:"
            echo -e "INFO: Nothing to export.";                        #CONSOLE
          fi
        else
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to reach remote repository. RC:$EC"
          echo -e "ERROR: Unable to reach remote repository."; RC="$EC"; #CONSOLE
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Unable to build DVL workspace path. RC:$EC"
        echo -e "ERROR: Unable to build DVL workspace path."; RC="$EC"; #CONSOLE
      fi
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Requested service user invalid. RC:$EC"
    echo -e "ERROR: Requested service user invalid."; RC="$EC";        #CONSOLE
  fi
else
  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Invalid inputs RC:$RC"
fi
#-----------------------------------------------------------------------------#
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:END ${ProjectDir} ${LocalBranchName} ${LocalUserID} RC:$RC"
exit "$RC";
#-----------------------------------------------------------------------------#
# vim: filetype=bash
