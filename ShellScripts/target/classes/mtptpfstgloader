#!/bin/bash
#shellcheck disable=SC2207,SC2128,SC2046,SC2164,SC1117,SC2143,SC2035,SC2002,SC2178
#*****************************************************************************#
#   SCRIPT NAME: mtptpfstgloader                                              #
#                                                                             #
#   DESCRIPTION:                                                              #
#      Create .oldr/.tldr for STG shared object                               #
#                                                                             #
#   NOTE: Don't alter CONSOLE messages                                        #
#                                                                             #
#   INPUT:                                                                    #
#      $1  - Read Implementation plan with date and core info                 #
#      $2  - Load type                                                        #
#      $3  - loadset as per core and load catagory                            #
#      $4  - List of previous impl.plans                                      #
#                                                                             #
#   OUTPUT:                                                                   #
#      exit with 0, successfull process                                       #
#      exit with 8, error message                                             #
#                                                                             #
#*****************************************************************************#
#*****************************************************************************#
#                                                                             #
#                            M A I N T E N A N C E                            #
#                                                                             #
#-----------------------------------------------------------------------------#
#   MMDDYYYY    INIT         COMMENT                                          #
#   --------    ----------   -------------------------------------------------#
#   06232017    NARASHIMAN   created the script                               #
#   09072017    ARUL         Fallback loadset creation                        #
#   10132017    ARUL         maketpf.cfg check updated                        #
#   12022017    ARUL         @KEYPOINT Updated                                #
#   12092017    ARUL         OLDR/TLDR Bug fix                                #
#   11072018    VINOTH       .json file added to .load                        #
#   07132018    ARUL         Sabre Talk Compilation warning excluded          #
#   11082018    ARUL         Error files handling fix                         #
#   04252019    GOWTHAM      Updated with logger support                      #
#   05202019    GOWTHAM      Fallback loadset created for new files           #
#   06042019    GOWTHAM      Fallback loadset created for dfdl files          #
#   07222019    VINOTH       err allow even if failed cause of path notfound  #
#*****************************************************************************#
#unset MTP_ENV                          #DEBUG
#source "${MTP_ENV:=$PWD}/.mtpconfig"
#shellcheck disable=SC1090
source "${MTP_ENV:=$PWD}/mtplibrary"
#-----------------------------------------------------------------------------#
declare -i _MxIP=4;                    #Expected number of input parms
declare -i _ReIP="$#";                 #Received number of input parms
#
Implementation="$1";                   #Implementation id with core and date
LoadType="$2";                         #Implementation plan load catagory
LoadsetName="$3";                      #Implementation plan loadset name
ListFallback="$4";                     #List of impl.plan for fallback
#
SPID=$$; #To get process id of the script
SPNM=$0; #To get script name
minInputValidation "${_MxIP}" "${_ReIP}"; RC="$?";
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Start ${Implementation} ${LoadType} ${LoadsetName} ${ListFallback} RC:$RC"
startDate=$(date +%Y%m%d%H%M%S)
#
#-----------------------------------------------------------------------------#
# This function used to create fallback loadset of the .so
#
function addfile {
  local _RC=0;
  local xsd;
  local xml;
  local jar;
  local kpt;
  local sob;
  local json;
  local path;
  local path1;
  local path2;
  local Jpath;
  local i;
  local _execDate;
  if [ -d "${APP_STG_IMPL_CWRK}" ] && [ -d "${SYS_STG_IMPL_CWRK}" ]; then
    _execDate=$(date +%Y%m%d%H%M%S)
    pushd "${APP_STG_IMPL_CWRK}" &> /dev/null
    if [ -f "maketpf.cfg" ]; then
      xsd=( $(find . -type f -name "*\.xsd" 2> /dev/null | sed "s|^\./||" | sort -u) )
      xml=( $(find . -type f -name "*\.xml" 2> /dev/null | sed "s|^\./||" | sort -u) )
      jar=( $(find . -type f -name "*\.jar" 2> /dev/null | sed "s|^\./||" | sort -u) )
      kpt=( $(find . -type f -name "*\.kpt" 2> /dev/null | sed "s|^\./||" | sort -u) )
      sob=( $(find . -type f -name "*\.so" 2> /dev/null | sed "s|^\./||" | sort -u) )
      json=( $(find . -type f -name "*\.json" 2> /dev/null | sed "s|^\./||" | sort -u) )
      if [ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${kpt[0]// /}" ] || [ -n "${sob[0]// /}" ] || [ -n "${json[0]// /}" ]; then
        #@APPLICATION entry
        if [ $(grep -o @APPLICATION "${LoadsetName}.load") ] && [ -n "${sob[0]// /}" ] && [[ "${LoadType}" == A ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@APPLICATION skip to add and it's already available RC:$_RC"
          echo -e "INFO: @APPLICATION skip to add and it's already available" &> /dev/null
        elif [ -n "${sob[0]// /}" ] && [[ "$PWD" =~ ztpfsys ]] && [[ "${LoadType}" == A ]]; then
          sed -i "$ a @APPLICATION" "${LoadsetName}.load"
        fi
        #@FILE entry sections
        # shellcheck disable=SC2235
        if [ $(grep -o @FILE *.load) ] && ([ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${json[0]// /}" ]); then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@FILE skip to add and it's already available RC:$_RC"
          echo -e "INFO: @FILE skip to add and it's already available" &> /dev/null
        elif [ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${json[0]// /}" ]; then
          sed -i "$ a @FILE -p ${TPF_CHMOD} -g ${TPF_USER} -o ${TPF_GROUP}" "${LoadsetName}.load"
        fi
        for((i=0; i<${#xsd[*]}; i++));           #XSD File process
        do
          if [ -f "${APP_STG_IMPL_CWRK}${xsd[i]} " ]; then
            sed -i "$ a ${APP_STG_IMPL_CWRK}${xsd[i]} /sys/tpf_pbfiles/${xsd[i]}" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#xml[*]}; i++));           #XML File process
        do
          if [ -f "${APP_STG_IMPL_CWRK}${xml[i]}" ]; then
            sed -i "$ a ${APP_STG_IMPL_CWRK}${xml[i]} /sys/tpf_pbfiles/${xml[i]}" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#jar[*]}; i++));           #JAR File process
        do
          if [ -f "${APP_STG_IMPL_CWRK}${jar[i]}" ]; then
            path=${jar[i]//derived/}
            path1=${path%/*}
            path2=${path1%/*}
            Jpath=${path2%/*}
            sed -i "$ a ${APP_STG_IMPL_CWRK}${jar[i]} /sys/tpf_pbfiles/apps$Jpath/${jar[i]##*/}" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#json[*]}; i++));          #JSON File process
        do
          if [ -f "${APP_STG_IMPL_CWRK}${json[i]} " ]; then
            sed -i "$ a ${APP_STG_IMPL_CWRK}${json[i]} /sys/tpf_pbfiles/${json[i]}" "${LoadsetName}.load"
          fi
        done
        #@KEYPOINT entry sections
        if [ "$1" == TLDR ] && [ -f "${LoadsetName}.load" ];then
          if [ $(grep -o @KEYPOINT *.load) ] && [ "$kpt" != '' ]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@FILE skip to add and it's already available RC:$_RC"
            echo -e "INFO: @FILE skip to add and it's already available" &> /dev/null
          elif [ "$kpt" != '' ]; then
            sed -i "$ a @KEYPOINT" "${LoadsetName}.load"
          fi
          for((i=0; i<${#kpt[*]}; i++));         #KPT File process
          do
            if [ -f "${APP_STG_IMPL_CWRK}${kpt[i]}" ]; then
              if [[ "${USR_IMPL_CORE}" == air ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == res ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %G" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == oss ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %O" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %P" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == wsp ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %G" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %H" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == apo ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == pgr ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == pre ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
              fi
            fi
          done
        fi
        if [ "$1" == OLDR ] && [ -f "${LoadsetName}.load" ];then
          loadtpf -debugfiles YES -old "${LoadsetName}.load" -o "${LoadsetName}.oldr" -r "${LoadsetName}.report" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${APP_STG_IMPL_CWRK} - loadtpf OLDR creation failed RC:$EC"
            echo -e "\nERROR: ${APP_STG_IMPL_CWRK} - loadtpf OLDR creation failed."
            _RC="$EC";
          fi
        elif [ "$1" == TLDR ] && [ -f "${LoadsetName}.load" ];then
          loadtpf -debugfiles YES -tld "${LoadsetName}.load" -o "${LoadsetName}.tldr" -r "${LoadsetName}.report" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${APP_STG_IMPL_CWRK} - loadtpf TLDR creation failed RC:$EC"
            echo -e "\nERROR: ${APP_STG_IMPL_CWRK} - loadtpf TLDR creation failed."
            _RC="$EC";
          fi
        fi
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${APP_STG_IMPL_CWRK} RC:$EC"
      echo -e "\nERROR: maketpf.cfg not found at ${APP_STG_IMPL_CWRK}."
      _RC="$EC";
    fi
    popd &> /dev/null
    pushd "${SYS_STG_IMPL_CWRK}" &> /dev/null
    if [ -f "maketpf.cfg" ]; then
      xsd=( $(find . -type f -name "*\.xsd" 2> /dev/null | sed "s|^\./||" | sort -u) )
      xml=( $(find . -type f -name "*\.xml" 2> /dev/null | sed "s|^\./||" | sort -u) )
      jar=( $(find . -type f -name "*\.jar" 2> /dev/null | sed "s|^\./||" | sort -u) )
      kpt=( $(find . -type f -name "*\.kpt" 2> /dev/null | sed "s|^\./||" | sort -u) )
      sob=( $(find . -type f -name "*\.so" 2> /dev/null | sed "s|^\./||" | sort -u) )
      json=( $(find . -type f -name "*\.json" 2> /dev/null | sed "s|^\./||" | sort -u) )
      cd "${APP_STG_IMPL_CWRK}"
      if [ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${kpt[0]// /}" ] || [ -n "${sob[0]// /}" ] || [ -n "${json[0]// /}" ]; then
        #@APPLICATION entry sections
        if [ $(grep -o @APPLICATION "${LoadsetName}.load") ] && [ -n "${sob[0]// /}" ] && [[ "${LoadType}" == A ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@APPLICATION skip to add and it's already available RC:$_RC"
          echo -e "INFO: @APPLICATION skip to add and it's already available" &> /dev/null
        elif [ "$sob" != '' ] && [[ "$PWD" =~ ztpfsys ]]; then
          sed -i "$ a @APPLICATION" "${LoadsetName}.load"
        fi
        #@FILE entry sections
        # shellcheck disable=SC2235
        if [ $(grep -o @FILE *.load) ] && ([ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${json[0]// /}" ]); then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@FILE skip to add and it's already available RC:$_RC"
          echo -e "INFO: @FILE skip to add and it's already available" &> /dev/null
        elif [ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${json[0]// /}" ]; then
          sed -i "$ a @FILE -p ${TPF_CHMOD} -g ${TPF_USER} -o ${TPF_GROUP}" "${LoadsetName}.load"
        fi
        for((i=0; i<${#xsd[*]}; i++));           #XSD file process
        do
          if [ -f "${SYS_STG_IMPL_CWRK}${xsd[i]}" ]; then
            path=${xsd[i]//base/}
            sed -i "$ a ${SYS_STG_IMPL_CWRK}${xsd[i]} /sys/tpf_pbfiles/$path" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#xml[*]}; i++));           #XML file process
        do
          if [ -f "${SYS_STG_IMPL_CWRK}${xml[i]}" ]; then
            path=${xml[i]//base/}
            sed -i "$ a ${SYS_STG_IMPL_CWRK}${xml[i]} /sys/tpf_pbfiles/$path" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#jar[*]}; i++));           #JAR file process
        do
          if [ -f "${SYS_STG_IMPL_CWRK}${jar[i]}" ]; then
            path=${jar[i]//derived/}
            path1=${path%/*}
            path2=${path1%/*}
            Jpath=${path2%/*}
            sed -i "$ a ${SYS_STG_IMPL_CWRK}${jar[i]} /sys/tpf_pbfiles/apps$Jpath/${jar[i]##*/}" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#json[*]}; i++));          #JSON file process
        do
          if [ -f "${SYS_STG_IMPL_CWRK}${json[i]}" ]; then
            path=${json[i]//base/}
            sed -i "$ a ${SYS_STG_IMPL_CWRK}${json[i]} /sys/tpf_pbfiles/$path" "${LoadsetName}.load"
          fi
        done
        #@KEYPOINT sections
        if [ "$1" == TLDR ] && [ -f "${LoadsetName}.load" ];then
          if [ $(grep -o @KEYPOINT *.load) ] && [ "$kpt" != '' ]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@KEYPOINT skip to add and it's already available RC:$_RC"
            echo -e "INFO: @KEYPOINT skip to add and it's already available" &> /dev/null
          elif [ "$kpt" != '' ]; then
            sed -i "$ a @KEYPOINT" "${LoadsetName}.load"
          fi
          for((i=0; i<${#kpt[*]}; i++));         #KPT File process
          do
            if [ -f "${SYS_STG_IMPL_CWRK}${kpt[i]}" ]; then
              path=${xsd[i]//base/}
              if [[ "${USR_IMPL_CORE}" == air ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == res ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %G" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == oss ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %O" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %P" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == wsp ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %G" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %H" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == apo ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == pgr ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == pre ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
              fi
            fi
          done
        fi
        if [ "$1" == OLDR ] && [ -f "${LoadsetName}.load" ];then
          loadtpf -debugfiles YES -old "${LoadsetName}.load" -o "${LoadsetName}.oldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${SYS_STG_IMPL_CWRK} - loadtpf OLDR creation failed RC:$EC"
            echo -e "\nERROR: ${SYS_STG_IMPL_CWRK} - loadtpf OLDR creation failed."
            _RC="$EC";
          fi
        elif [ "$1" == TLDR ] && [ -f "${LoadsetName}.load" ];then
          loadtpf -debugfiles YES -tld "${LoadsetName}.load" -o "${LoadsetName}.tldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${SYS_STG_IMPL_CWRK} - loadtpf TLDR creation failed RC:$EC"
            echo -e "\nERROR: ${SYS_STG_IMPL_CWRK} - loadtpf TLDR creation failed."
            _RC="$EC";
          fi
        fi
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${SYS_STG_IMPL_CWRK} RC:$EC"
      echo -e "\nERROR: maketpf.cfg not found at ${SYS_STG_IMPL_CWRK}."
      _RC="$EC";
    fi
    popd &> /dev/null
    echo -e "INFO:$(date +%Y%m%d%H%M%S) NON Object files analyzed in ${APP_DVL_IMPL_CWRK} and ${SYS_DVL_IMPL_CWRK} path to add files completed - $(($(date +%Y%m%d%H%M%S)-_execDate))s"
  elif [ -d "${APP_STG_IMPL_CWRK}" ]; then
    _execDate=$(date +%Y%m%d%H%M%S)
    pushd "${APP_STG_IMPL_CWRK}" &> /dev/null
    if [ -f "maketpf.cfg" ]; then
      xsd=( $(find . -type f -name "*\.xsd" | sed "s|^\./||" | sort -u) )
      xml=( $(find . -type f -name "*\.xml" | sed "s|^\./||" | sort -u) )
      jar=( $(find . -type f -name "*\.jar" | sed "s|^\./||" | sort -u) )
      kpt=( $(find . -type f -name "*\.kpt" | sed "s|^\./||" | sort -u) )
      sob=( $(find . -type f -name "*\.so" | sed "s|^\./||" | sort -u) )
      json=( $(find . -type f -name "*\.json" | sed "s|^\./||" | sort -u) )
      if [ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${kpt[0]// /}" ] || [ -n "${sob[0]// /}" ] || [ -n "${json[0]// /}" ] ; then
        #@APPLICATION entry sections
        if [ $(grep -o @APPLICATION "${LoadsetName}.load") ] && [ -n "${sob[0]// /}" ] && [[ "${LoadType}" == A ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@APPLICATION skip to add and it's already available RC:$RC"
          echo -e "INFO: @APPLICATION skip to add and it's already available" &> /dev/null
        elif [ -n "${sob[0]// /}" ] && [[ "$PWD" =~ ztpfsys ]] && [[ "${LoadType}" == A ]]; then
          sed -i "$ a @APPLICATION" "${LoadsetName}.load"
        fi
        #@FILE entry sections
        # shellcheck disable=SC2235
        if [ $(grep -o @FILE *.load) ] && ([ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${json[0]// /}" ]); then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@FILE skip to add and it's already available RC:$RC"
          echo -e "INFO: @FILE skip to add and it's already available"
        elif [ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${json[0]// /}" ]; then
          sed -i "$ a @FILE -p ${TPF_CHMOD} -g ${TPF_USER} -o ${TPF_GROUP}" "${LoadsetName}.load"
        fi
        for((i=0; i<${#xsd[*]}; i++));           #XSD file process
        do
          if [ -f "${APP_STG_IMPL_CWRK}${xsd[i]}" ]; then
            sed -i "$ a ${APP_STG_IMPL_CWRK}${xsd[i]} /sys/tpf_pbfiles/${xsd[i]}" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#xml[*]}; i++));           #XML file process
        do
          if [ -f "${APP_STG_IMPL_CWRK}${xml[i]}" ]; then
            sed -i "$ a ${APP_STG_IMPL_CWRK}${xml[i]} /sys/tpf_pbfiles/${xml[i]}" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#jar[*]}; i++));           #JAR file process
        do
          if [ -f "${APP_STG_IMPL_CWRK}${jar[i]}" ]; then
            path=${jar[i]//derived/}
            path1=${path%/*}
            path2=${path1%/*}
            Jpath=${path2%/*}
            sed -i "$ a ${APP_STG_IMPL_CWRK}${jar[i]} /sys/tpf_pbfiles/apps$Jpath/${jar[i]##*/}" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#json[*]}; i++));          #JSON file process
        do
          if [ -f "${APP_STG_IMPL_CWRK}${json[i]}" ]; then
            sed -i "$ a ${APP_STG_IMPL_CWRK}${json[i]} /sys/tpf_pbfiles/${json[i]}" "${LoadsetName}.load"
          fi
        done
        #@KEYPOINT entry sections
        if [ "$1" == TLDR ] && [ -f "${LoadsetName}.load" ];then
          if [ $(grep -o @KEYPOINT *.load) ] && [ "$kpt" != '' ]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@KEYPOINT skip to add and it's already available RC:$RC"
            echo -e "INFO: @KEYPOINT skip to add and it's already available"
          elif [ "$kpt" != '' ]; then
            sed -i "$ a @KEYPOINT" "${LoadsetName}.load"
          fi
          for((i=0; i<${#kpt[*]}; i++));         #KPT file process
          do
            if [ -f "${APP_STG_IMPL_CWRK}${kpt[i]}" ]; then
              if [[ "${USR_IMPL_CORE}" == air ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == res ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %G" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == oss ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %O" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %P" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == wsp ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %G" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %H" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == apo ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == pgr ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == pre ]]; then
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${APP_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
              fi
            fi
          done
        fi
        if [ "$1" == OLDR ] && [ -f "${LoadsetName}.load" ];then
          loadtpf -debugfiles YES -old "${LoadsetName}.load" -o "$LoadsetName.oldr" -l "${LoadsetName}.load" -r "$LoadsetName.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${APP_STG_IMPL_CWRK} - loadtpf OLDR creation failed RC:$EC"
            echo -e "\nERROR: ${APP_STG_IMPL_CWRK} - loadtpf OLDR creation failed."
            _RC="$EC";
          fi
        elif [ "$1" == TLDR ] && [ -f "${LoadsetName}.load" ];then
          loadtpf -debugfiles YES -tld "${LoadsetName}.load" -o "$LoadsetName.tldr" -l "${LoadsetName}.load" -r "$LoadsetName.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${APP_STG_IMPL_CWRK} - loadtpf TLDR creation failed RC:$EC"
            echo -e "\nERROR: ${APP_STG_IMPL_CWRK} - loadtpf TLDR creation failed."
            _RC="$EC";
          fi
        fi
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${APP_STG_IMPL_CWRK} RC:$EC"
      echo -e "\nERROR: maketpf.cfg not found at ${APP_STG_IMPL_CWRK}."
      _RC="$EC";
    fi
    popd &> /dev/null
    echo -e "INFO:$(date +%Y%m%d%H%M%S) NON Object files analyzed in ${APP_DVL_IMPL_CWRK} path to add files completed - $(($(date +%Y%m%d%H%M%S)-_execDate))s"
  elif [ -d "${SYS_STG_IMPL_CWRK}" ]; then
    _execDate=$(date +%Y%m%d%H%M%S)
    pushd "$SYS_STG_IMPL_CWRK" &> /dev/null
    if [ -f "maketpf.cfg" ]; then
      xsd=( $(find . -type f -name "*\.xsd" | sed "s|^\./||" | sort -u) )
      xml=( $(find . -type f -name "*\.xml" | sed "s|^\./||" | sort -u) )
      jar=( $(find . -type f -name "*\.jar" | sed "s|^\./||" | sort -u) )
      kpt=( $(find . -type f -name "*\.kpt" | sed "s|^\./||" | sort -u) )
      sob=( $(find . -type f -name "*\.so" | sed "s|^\./||" | sort -u) )
      json=( $(find . -type f -name "*\.json" | sed "s|^\./||" | sort -u) )
      if [ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${kpt[0]// /}" ] || [ -n "${sob[0]// /}" ] || [ -n "${json[0]// /}" ]; then
        #@APPLICATION entry sections
        if [ $(grep -o @APPLICATION "${LoadsetName}.load") ] && [ -n "${sob[0]// /}" ] && [[ "${LoadType}" == A ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@APPLICATION skip to add and it's already available RC:$RC"
          echo -e "INFO: @APPLICATION skip to add and it's already available" &> /dev/null
        elif [ -n "${sob[0]// /}" ] && [[ "$PWD" =~ ztpfsys ]] && [[ "${LoadType}" == A ]]; then
          sed -i "$ a @APPLICATION" "${LoadsetName}.load"
        fi
        #@FILE entry sections
        # shellcheck disable=SC2235
        if [ $(grep -o @FILE *.load) ] && ([ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${json[0]// /}" ]); then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@FILE skip to add and it's already available RC:$RC"
          echo -e "INFO: @FILE skip to add and it's already available" &> /dev/null
        elif [ -n "${xml[0]// /}" ] || [ -n "${xsd[0]// /}" ] || [ -n "${jar[0]// /}" ] || [ -n "${json[0]// /}" ]; then
          sed -i "$ a @FILE -p ${TPF_CHMOD} -g ${TPF_USER} -o ${TPF_GROUP}" "${LoadsetName}.load"
        fi
        for((i=0; i<${#xsd[*]}; i++));           #XSD file process
        do
          if [ -f "${SYS_STG_IMPL_CWRK}${xsd[i]}" ]; then
            path=${xsd[i]//base/}
            sed -i "$ a ${SYS_STG_IMPL_CWRK}${xsd[i]} /sys/tpf_pbfiles/$path" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#xml[*]}; i++));           #XML file process
        do
          if [ -f "${SYS_STG_IMPL_CWRK}${xml[i]}" ]; then
            path=${xml[i]//base/}
            sed -i "$ a ${SYS_STG_IMPL_CWRK}${xml[i]} /sys/tpf_pbfiles/$path" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#jar[*]}; i++));           #JAR file process
        do
          if [ -f "${SYS_STG_IMPL_CWRK}${jar[i]}" ]; then
            path=${jar[i]//derived/}
            path1=${path%/*}
            path2=${path1%/*}
            Jpath=${path2%/*}
            sed -i "$ a ${SYS_STG_IMPL_CWRK}${jar[i]} /sys/tpf_pbfiles/apps$Jpath/${jar[i]##*/}" "${LoadsetName}.load"
          fi
        done
        for((i=0; i<${#json[*]}; i++));          #JSON file process
        do
          if [ -f "${SYS_STG_IMPL_CWRK}${json[i]}" ]; then
            path=${json[i]//base/}
            sed -i "$ a ${SYS_STG_IMPL_CWRK}${json[i]} /sys/tpf_pbfiles/$path" "${LoadsetName}.load"
          fi
        done
        #@KEYPOINT entry sections
        if [ "$1" == TLDR ] && [ -f "${LoadsetName}.load" ];then
          if [ $(grep -o @KEYPOINT *.load) ] && [ "$kpt" != '' ]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:@KEYPOINT skip to add and it's already available RC:$RC"
            echo -e "INFO: @KEYPOINT skip to add and it's already available"
          elif [ "$kpt" != '' ]; then
            sed -i "$ a @KEYPOINT" "${LoadsetName}.load"
          fi
          for((i=0; i<${#kpt[*]}; i++));         #KPT file process
          do
            if [ -f "${SYS_STG_IMPL_CWRK}${kpt[i]}" ]; then
              path=${kpt[i]//base/}
              if [[ "${USR_IMPL_CORE}" == air ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == res ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %G" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == oss ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %O" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %P" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == wsp ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %G" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %H" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == apo ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == pgr ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
              elif [[ "${USR_IMPL_CORE}" == pre ]]; then
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %A" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %B" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %C" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %D" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %E" "${LoadsetName}.load"
                sed -i "$ a ${SYS_STG_IMPL_CWRK}${kpt[i]} %F" "${LoadsetName}.load"
              fi
            fi
          done
        fi
        if [ "$1" == OLDR ] && [ -f "${LoadsetName}.load" ];then
          loadtpf -debugfiles YES -old "${LoadsetName}.load" -o "${LoadsetName}.oldr" -l "${LoadsetName}.load" -r "$LoadsetName.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${SYS_STG_IMPL_CWRK} - loadtpf TLDR creation failed RC:$EC"
            echo -e "\nERROR: ${SYS_STG_IMPL_CWRK} - loadtpf TLDR creation failed."
            _RC="$EC";
          fi
        elif [ "$1" == TLDR ] && [ -f "${LoadsetName}.load" ];then
          loadtpf -debugfiles YES -tld "${LoadsetName}.load" -o "${LoadsetName}.tldr" -l "${LoadsetName}.load" -r "$LoadsetName.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${SYS_STG_IMPL_CWRK} - loadtpf TLDR creation failed RC:$EC"
            echo -e "\nERROR: ${SYS_STG_IMPL_CWRK} - loadtpf TLDR creation failed."
            _RC="$EC";
          fi
        fi
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${SYS_STG_IMPL_CWRK} RC:$EC"
      echo -e "\nERROR: maketpf.cfg not found at ${SYS_STG_IMPL_CWRK}."
      _RC="$EC";
    fi
    echo -e "INFO:$(date +%Y%m%d%H%M%S) NON Object files analyzed in ${SYS_DVL_IMPL_CWRK} path to add files completed - $(($(date +%Y%m%d%H%M%S)-_execDate))s"
  fi
  return "$_RC"
}
#
#-----------------------------------------------------------------------------#
function ldrFallback {
  #$1 - LDR reference either OLDR or TLDR
  local _RC=0;                         #Local Return Code 0
  local _LdrRef;                       #Local LDR Reference Flag OLDR/TLDR
  local _ListFB;                       #Local Fallback Plan List
  local _ListSO;                       #Local Fallback .SO List
  local _FalRef=0;                     #Local Fallback Reference Flag 0/8
  local _ListFindPath;                 #Local List of Dir Paths
  local _ListSOPath;                   #Local List of SO path
  local _LegacyAppFlag=0;              #Local ZTPFREPOS Status Flag
  local _LegacySysFlag=0;              #Local ZTPFSYS Status Flag
  local _execDate;
  _LdrRef="$1";
  #shellcheck disable=SC2001
  FallbackName=( $(echo "${LoadsetName}" | sed s/./B/2)) #Set fallback name
  IFS=', ' read -r -a _ListFB <<< "$ListFallback"  #Read imp.plans as array
  #shellcheck disable=SC2022
  _ListSO=( $(find "${APP_STG_IMPL_CWRK}" "${SYS_STG_IMPL_CWRK}" -type f -name "*\.so" -o -name "*\.xml" -o -name "*\.xsd" -o -name "*\.json" | grep -v "lib*" 2> /dev/null ) ) #Get list of .so
  if [ "${#_ListSO[@]}" -ge 1 ]; then  #Check do we have any fallback .so's?
    for x in "${_ListSO[@]}"           #Do for specific .so
    do
      for y in "${_ListFB[@]}"         #Do for each imp.plans actual path apend
      do
        #Apend with IBM and NON-IBM actual path
        y="${y%_*}"
        if [[ "${y}" == "_no_plan_name_" ]]; then
          _ListFindPath="${_ListFindPath} ${STG_TPF_APP}/${USR_IMPL_CORE}"
        fi
        if [ -d "${STG_TPF_APP}/${y}/${USR_IMPL_CORE}" ]; then
          _ListFindPath="${_ListFindPath} ${STG_TPF_APP}/${y}/${USR_IMPL_CORE}"
        fi
        if [ -d "${TPF_APP}/loads/${y}/${USR_IMPL_CORE}" ]; then
          _ListFindPath="${_ListFindPath} ${TPF_APP}/loads/${y}/${USR_IMPL_CORE}"
        else
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Path not found ${TPF_APP}/loads/${y}/${USR_IMPL_CORE} RC:$RC"
          echo -e "INFO: Path not found ${TPF_APP}/loads/${y}/${USR_IMPL_CORE}"
          _LegacyAppFlag=1;
        fi
        if [ -d "${STG_TPF_SYS}/${y}/${USR_IMPL_CORE}" ]; then
          _ListFindPath="${_ListFindPath} ${STG_TPF_SYS}/${y}/${USR_IMPL_CORE}"
        fi
        if [ -d "${TPF_SYS}/loads/${y}/${USR_IMPL_CORE}" ]; then
          _ListFindPath="${_ListFindPath} ${TPF_SYS}/loads/${y}/${USR_IMPL_CORE}"
        else
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Path not found ${TPF_SYS}/loads/${y}/${USR_IMPL_CORE} RC:$RC"
          echo -e "INFO: Path not found ${TPF_SYS}/loads/${y}/${USR_IMPL_CORE}"
          _LegacySysFlag=1;
        fi
        if [ -d "${TPF_SYS}/${USR_IMPL_CORE}/${y}/derived" ]; then
          _ListFindPath="${_ListFindPath} ${TPF_SYS}/${USR_IMPL_CORE}/${y}/derived"
        elif [ -d "${TPF_SYS}/${USR_IMPL_CORE}/${y}" ]; then
          _ListFindPath="${_ListFindPath} ${TPF_SYS}/${USR_IMPL_CORE}/${y}"
        fi
        if [ "${_LegacyAppFlag}" -ne 0 ] || [ "${_LegacySysFlag}" -ne 0 ]; then
         sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Fallback loadset will be create from the production path RC:$RC"
         echo -e "INFO: Fallback loadset will be create from the production path"
        fi
      done
      _ListFindPath="${_ListFindPath} ${PRD_ORIGIN_APP} ${PRD_ORIGIN_SYS} ${PRD_ORIGIN_IBM}" #Append code production path
      #Get first .so of the impl path
      #shellcheck disable=SC2086
      _ListSOPath="${_ListSOPath} $(find ${_ListFindPath} -type f -name "${x##*/}" 2> /dev/null | grep -FZ "$(echo ${x} |rev | cut -d '/' -f 1,2 | rev)" 2> /dev/null | head -n 1 )"
    done
  else
    _FalRef="${EC}"; #Set errot code for Fallback Reference
  fi
  if [ "${_LdrRef}" == "TLDR" ]; then
    _execDate=$(date +%Y%m%d%H%M%S)
    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Fallback loadset creation initiated - TLDR RC:$RC"
    echo -e "\nINFO: Fallback loadset creation initiated - TLDR.";
    if [ "${_FalRef}" -eq 0 ]; then    #Fallback loadset .SO Check
      if [[ -n "${_ListSOPath// /}" ]]; then #Do LOADTPF if having valif path
        #shellcheck disable=SC2086
        loadtpf -debugfiles YES -tld ${_ListSOPath} -s "${FallbackName}" -o "${FallbackName}.tldr" -l "${FallbackName}.load" -r "${FallbackName}.report" &> "${LoadsetName}.out"; _RC=$?;
        cat "${LoadsetName}.out";
        if [ "$_RC" -ne 0 ]; then      #Error code required if build failed
          loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Fallback loadset creation failed - TLDR RC:$EC"
          _RC="$EC";
          echo -e "\nERROR:$(date +%Y%m%d%H%M%S) TLDR Fallback loadset creation failed - $(($(date +%Y%m%d%H%M%S)-_execDate))s";
        elif [ "${_RC}" -eq 0 ]; then
          buildMSG="${USR_IMPL_PLAN^^}: Fallback Loadset ${FallbackName} generated for ${USR_IMPL_CORE}"
          sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
          echo -e "\nINFO:$(date +%Y%m%d%H%M%S) Fallback Loadset ${FallbackName} generated for ${USR_IMPL_CORE} - $(($(date +%Y%m%d%H%M%S)-_execDate))s";
        fi
        if [ "$_RC" -eq 0 ]; then      #Add file only for TLDR Type
          addfile "OLDR"; _RC=$?;
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Fallback directory not found - TLDR RC:$EC"
        echo -e "\nERROR:$(date +%Y%m%d%H%M%S) TLDR Fallback directory not found - $(($(date +%Y%m%d%H%M%S)-_execDate))s";
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Fallback loadset creation failed - TLDR. RC:$EC"
      echo -e "\nERROR:$(date +%Y%m%d%H%M%S) TLDR Fallback loadset creation failed - $(($(date +%Y%m%d%H%M%S)-_execDate))s";
    fi
  elif [ "${_LdrRef}" == "OLDR" ]; then
    _execDate=$(date +%Y%m%d%H%M%S)
    sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Fallback loadset creation initiated - OLDR. RC:$RC"
    echo -e "\nINFO: Fallback loadset creation initiated - OLDR.";
    if [ "${_FalRef}" -eq 0 ]; then    #Fallback loadset .SO Check
      if [[ -n "${_ListSOPath// /}" ]]; then #Do LOADTPF if having valif path
        #shellcheck disable=SC2086
        if [[ "${_ListSOPath}" =~ .xsd ]] || [[ "${_ListSOPath}" =~ .xml ]] || [[ "${_ListSOPath}" =~ .json ]]; then
           echo "@DEFINE" > "${FallbackName}.load"
           sed -i "$ a SYSID=BSS" "${FallbackName}.load"
           sed -i "$ a DEBUGFILES=YES" "${FallbackName}.load"
           sed -i "$ a @LOADSET ${FallbackName}" "${FallbackName}.load"
         for _listSoPath in ${_ListSOPath}
         do
           if [[ "${_listSoPath}" == *.so ]]; then
            sed -i "$ a ${_listSoPath}" "${FallbackName}.load"
           fi
         done
            sed -i "$ a @FILE -p ${TPF_CHMOD} -g ${TPF_USER} -o ${TPF_GROUP}" "${FallbackName}.load"
         for _listSoPath in ${_ListSOPath}
         do
           if [[ "${_listSoPath}" == *.xml ]] || [[ "${_listSoPath}" == *.xsd ]] || [[ "${_listSoPath}" == *.json ]]; then
            path=${_listSoPath/*base/}
            sed -i "$ a ${_listSoPath} /sys/tpf_pbfiles/$path" "${FallbackName}.load"
           fi
         done
           loadtpf -debugfiles YES -old "${FallbackName}.load" -o "${FallbackName}.oldr" -l "${FallbackName}.load" -r "${FallbackName}.report" &> "${LoadsetName}.out"; _RC=$?;
        else
          loadtpf -debugfiles YES -old ${_ListSOPath} -s "${FallbackName}" -o "${FallbackName}.oldr" -l "${FallbackName}.load" -r "${FallbackName}.report" &> "${LoadsetName}.out"; _RC=$?;
        fi
        cat "${LoadsetName}.out";
        if [ "$_RC" -ne 0 ]; then      #Error code required if build failed
          loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Fallback loadset creation failed - OLDR RC:$EC"
          _RC="$EC";
          echo -e "\nERROR:$(date +%Y%m%d%H%M%S) OLDR Fallback loadset creation failed - $(($(date +%Y%m%d%H%M%S)-_execDate))s";
        elif [ "${_RC}" -eq 0 ]; then
          buildMSG="${USR_IMPL_PLAN^^}: Fallback Loadset ${FallbackName} generated for ${USR_IMPL_CORE}"
          sendBLDWSMSG "${buildMSG}" "${USR_IMPL_PLAN}" "SH_BUILD_STATUS"
          echo -e "\nERROR:$(date +%Y%m%d%H%M%S) OLDR Fallback Loadset ${FallbackName} generated for ${USR_IMPL_CORE} - $(($(date +%Y%m%d%H%M%S)-_execDate))s";
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Fallback directory not found - OLDR RC:$EC"
        echo -e "\nERROR:$(date +%Y%m%d%H%M%S) OLDR Fallback directory not found - $(($(date +%Y%m%d%H%M%S)-_execDate))s";
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Fallback loadset creation failed - OLDR RC:$EC"
      echo -e "\nERROR:$(date +%Y%m%d%H%M%S) OLDR Fallback loadset creation failed - $(($(date +%Y%m%d%H%M%S)-_execDate))s";
    fi
  fi
  return "$_RC";
}
#
#-----------------------------------------------------------------------------#
#
function oldrBuild {
  local errSeg;
  local _errList=' ';
  local _RC=0;
  local _errExclude;
  local err;
  local sbr;
  local errFNFT;
  local errFN;
  local sbrFNFT;
  local sbrFN;
  local _execDate;
  warningExclude;
  #shellcheck disable=SC2001
  FallbackName=( $(echo "${LoadsetName}" | sed s/./B/2)) #Set fallback name
  if [ -d "${APP_STG_IMPL_CWRK}" ] && [ -d "${SYS_STG_IMPL_CWRK}" ]; then
    #Error file handling
    err=( $(find "${APP_STG_IMPL_CWRK}" "${SYS_STG_IMPL_CWRK}" -type f -name "*\.err" 2> /dev/null) )
    sbr=( $(find "${APP_STG_IMPL_CWRK}/sbtasm" -type f 2> /dev/null) )
    for errFile in "${err[@]}"
    do
      errFNFT="${errFile##*/}"
      errFN="${errFNFT%.*}"
      if [[ "${errFNFT}" == +($ERR_EXCL) ]] && [ "${#sbr[@]}" -eq 0 ]; then
        _errExclude="${_errExclude/ /} ${errFile}"
      elif [[ "${errFNFT}" != +($ERR_EXCL) ]] && [ "${#sbr[@]}" -eq 0 ]; then
        grep -w "directories do not exist:" "${errFile}"; _RC=$?
        if [ "${_RC}" -eq 0 ]; then
          _errExclude="${_errExclude/ /} ${errFile}"
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFile} The error created due to following APPL or TPF ROOT directories do not exist RC:$_RC"
        else
          _errList="${_errList/ /} ${errFNFT}"
        fi
      elif [[ "${errFNFT}" != +($ERR_EXCL) ]] && [ "${#sbr[@]}" -ne 0 ]; then
        for sbrFile in "${sbr[@]}"
        do
          sbrFNFT="${sbrFile##*/}"
          sbrFN="${sbrFNFT%.*}"
          if [[ "${errFN,,}" == "${sbrFN,,}" ]]; then
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${errFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING RC:$_RC"
            echo -e "INFO: File ${errFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING";
            _errExclude="${_errExclude/ /} ${errFile}"
            _errList="${_errList//${errFNFT}/}"
            break
          elif [[ ! "${_errList}" =~ ${errFNFT} ]]; then
            grep -w "directories do not exist:" "${errFile}"; _RC=$?
            if [ "${_RC}" -eq 0 ]; then
              _errExclude="${_errExclude/ /} ${errFile}"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFile} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
            else
              _errList="${_errList/ /} ${errFNFT}"
            fi
          fi
        done
      fi
    done
    if [[ "${_errList}" == ' ' ]]; then
      cd "$APP_STG_IMPL_CWRK"
      if [ -f "maketpf.cfg" ]; then
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Loadset creation initiated - OLDR RC:$_RC"
        echo -e "\nINFO: Loadset creation initiated - OLDR.";
        so=( $(find "${APP_STG_IMPL_CWRK}" "${SYS_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
        if [ "${so[0]}" != '' ]; then
          so_app=( $(find "${APP_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
          so_sys=( $(find "${SYS_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
          if [ "${so_app[0]}" != '' ] && [ "${so_sys[0]}" != '' ]; then
            loadtpf -debugfiles YES -old "${so_app[@]}" "${so_sys[@]}" -s "${LoadsetName}" -o "$LoadsetName.oldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
            cat "${LoadsetName}.out";
            if [ "$_RC" -ne 0 ]; then
              loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${APP_STG_IMPL_CWRK} and ${SYS_STG_IMPL_CWRK} - OLDR creation failed RC:$EC"
              echo -e "ERROR: LOADTPF include paths ${APP_STG_IMPL_CWRK} and ${SYS_STG_IMPL_CWRK} - OLDR creation failed."
              _RC="$EC";
            fi
          elif [ "${so_app[0]}" != '' ]; then
            loadtpf -debugfiles YES -old "${so_app[@]}" -s "${LoadsetName%.}" -o "$LoadsetName.oldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
            cat "${LoadsetName}.out";
            if [ "$_RC" -ne 0 ]; then
              loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${APP_STG_IMPL_CWRK} - OLDR creation failed RC:$EC"
              echo -e "ERROR: LOADTPF include paths ${APP_STG_IMPL_CWRK} - OLDR creation failed."
              _RC="$EC";
            fi
          elif [ "${so_sys[0]}" != '' ]; then
            loadtpf -debugfiles YES -old "${so_sys[@]}" -s "${LoadsetName%.}" -o "$LoadsetName.oldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
            cat "${LoadsetName}.out";
            if [ "$_RC" -ne 0 ]; then
              loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${SYS_STG_IMPL_CWRK} - OLDR creation failed RC:$EC"
              echo -e "ERROR: LOADTPF include paths ${SYS_STG_IMPL_CWRK} - OLDR creation failed."
              _RC="$EC";
            fi
          else
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF .SO NOT FOUND - ${APP_STG_IMPL_CWRK} ${SYS_STG_IMPL_CWRK} RC:$EC"
            echo -e "ERROR: LOADTPF .SO NOT FOUND - ${APP_STG_IMPL_CWRK} ${SYS_STG_IMPL_CWRK}"
            _RC="$EC";
          fi
          if [ "$_RC" -eq 0 ]; then
            addfile "OLDR"; _RC=$?;
          fi
        else
          echo "@DEFINE" > "${LoadsetName}.load"
          sed -i "$ a SYSID=BSS" "${LoadsetName}.load"
          sed -i "$ a DEBUGFILES=YES" "${LoadsetName}.load"
          sed -i "$ a @LOADSET ${LoadsetName}" "${LoadsetName}.load"
          addfile "OLDR"; _RC=$?;
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${APP_STG_IMPL_CWRK} RC:$EC"
        echo -e "\nERROR: maketpf.cfg not found at ${APP_STG_IMPL_CWRK}."
        _RC="$EC";
      fi
      if [ "$_RC" -eq 0 ]; then
        _execDate=$(date +%Y%m%d%H%M%S)
        ldrFallback "OLDR"; _RC=$?;
        echo -e "INFO:$(date +%Y%m%d%H%M%S) OLDR Fallback loadset creation completed - $(($(date +%Y%m%d%H%M%S)-execDate))s"
      fi
    else
      errSeg="${_errList}"
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file identified in this project - ${errSeg} RC:$EC"
      echo -e "\nERROR: Error file identified in this project - ${errSeg}";
      loadErr="Error file identified in this project"
      _RC="$EC";
    fi
  elif [ -d "${APP_STG_IMPL_CWRK}" ]; then
    cd "$APP_STG_IMPL_CWRK"
    if [ -f "maketpf.cfg" ]; then
      err=( $(find . -type f -name "*\.err" 2> /dev/null) )
      sbr=( $(find sbtasm -type f 2> /dev/null) )
      for errFile in "${err[@]}"
      do
        errFNFT="${errFile##*/}"
        errFN="${errFNFT%.*}"
        if [[ "${errFNFT}" == +($ERR_EXCL) ]] && [ "${#sbr[@]}" -eq 0 ]; then
          _errExclude="${_errExclude/ /} ${errFile}"
        elif [[ "${errFNFT}" != +($ERR_EXCL) ]] && [ "${#sbr[@]}" -eq 0 ]; then
          grep -w "directories do not exist:" "${errFNFT}"; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            _errExclude="${_errExclude/ /} ${errFile}"
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFNFT} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
          else
            _errList="${_errList/ /} ${errFNFT}"
          fi
        elif [[ "${errFNFT}" != +($ERR_EXCL) ]] && [ "${#sbr[@]}" -ne 0 ]; then
          for sbrFile in "${sbr[@]}"
          do
            sbrFNFT="${sbrFile[0]##*/}"
            sbrFN="${sbrFNFT%.*}"
            if [[ "${errFN,,}" == "${sbrFN,,}" ]]; then
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${errFN,,} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
              echo -e "INFO: File ${errFN,,} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n";
              _errExclude="${_errExclude/ /} ${errFile}"   #Add to exclusion list
              _errList="${_errList//${errFNFT}/}"          #Remove this error file from list
              break;
            elif [[ ! "${_errList}" =~ ${errFNFT} ]]; then
              grep -w "directories do not exist:" "${errFNFT}"; _RC=$?
              if [ "${_RC}" -eq 0 ]; then
                _errExclude="${_errExclude/ /} ${errFile}"
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFNFT} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
              else
                _errList="${_errList/ /} ${errFNFT}"
              fi
            fi
          done
        fi
      done
      if [[ "${_errList}" == ' ' ]]; then
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Loadset creation initiated - OLDR RC:$_RC"
        echo -e "\nINFO: Loadset creation initiated - OLDR.";
        so=( $(find "${APP_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
        if [ "${so[0]}" != '' ]; then
          loadtpf -debugfiles YES -old "${so[@]}" -s "${LoadsetName%.}" -o "$LoadsetName.oldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${APP_STG_IMPL_CWRK} - OLDR creation failed RC:$EC"
            echo -e "ERROR: LOADTPF include paths ${APP_STG_IMPL_CWRK} - OLDR creation failed."
            _RC="$EC";
          fi
          if [ "$_RC" -eq 0 ]; then
            addfile "OLDR"; _RC=$?;
          fi
        else
          echo "@DEFINE" > "${LoadsetName}.load"
          sed -i "$ a SYSID=BSS" "${LoadsetName}.load"
          sed -e "$ a DEBUGFILES=YES" "${LoadsetName}.load"
          sed -i -e "$ a @LOADSET ${LoadsetName}" "${LoadsetName}.load"
          addfile "OLDR"; _RC=$?;
        fi
        if [ "$_RC" -eq 0 ]; then
          _execDate=$(date +%Y%m%d%H%M%S)
          ldrFallback "OLDR"; _RC=$?;
          echo -e "INFO:$(date +%Y%m%d%H%M%S) OLDR Fallback loadset creation completed - $(($(date +%Y%m%d%H%M%S)-execDate))s"
        fi
      else
        errSeg="${_errList}"
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file identified in this project - ${errSeg} RC:$EC"
        echo -e "\nERROR: Error file identified in this project - ${errSeg}";
        loadErr="Error file identified in this project"
        _RC="$EC";
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${APP_STG_IMPL_CWRK} RC:$EC"
      echo -e "\nERROR: maketpf.cfg not found at ${APP_STG_IMPL_CWRK}."
      _RC="$EC";
    fi
  elif [ -d "${SYS_STG_IMPL_CWRK}" ]; then
    cd "$SYS_STG_IMPL_CWRK"
    if [ -f "maketpf.cfg" ]; then
      #Error handling
      err=( $(find . -type f -name "*\.err" 2> /dev/null) )
      for errFile in "${err[@]}"
      do
        errFNFT="${errFile#*/}"
        errFN="${errFNFT%.*}"
        if [[ "${errFNFT}" == +($ERR_EXCL) ]]; then
          _errExclude="${_errExclude/ /} ${errFNFT}"
        elif [[ "${errFNFT}" != +($ERR_EXCL) ]]; then
          grep -w "directories do not exist:" "${errFNFT}"; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            _errExclude="${_errExclude/ /} ${errFile}"
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFNFT} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
          else
            _errList="${_errList/ /} ${errFNFT}"
          fi
        fi
      done
      if [[ "${_errList}" == ' ' ]]; then
        sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Loadset creation initiated - OLDR RC:$RC"
        echo -e "\nINFO: Loadset creation initiated - OLDR.";
        so=( $(find "${SYS_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
        if [ "${so[0]}" != '' ]; then
          loadtpf -debugfiles YES -old "${so[@]}" -s "${LoadsetName%.}" -o "$LoadsetName.oldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
          cat "${LoadsetName}.out";
          if [ "$_RC" -ne 0 ]; then
            loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${SYS_STG_IMPL_CWRK} - OLDR creation failed RC:$EC"
            echo -e "ERROR: LOADTPF include paths ${SYS_STG_IMPL_CWRK} - OLDR creation failed."
            _RC="$EC";
          fi
          if [ "$_RC" -eq 0 ]; then
            addfile "OLDR"; _RC=$?;
          fi
        else
          echo "@DEFINE" > "${LoadsetName}.load"
          sed -i "$ a SYSID=BSS" "${LoadsetName}.load"
          sed -i "$ a DEBUGFILES=YES" "${LoadsetName}.load"
          sed -i -e "$ a @LOADSET ${LoadsetName}" "${LoadsetName}.load"
          addfile "OLDR"; _RC=$?;
        fi
        if [ "$_RC" -ne 0 ]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Loadset creation failed - OLDR RC:$EC"
          echo -e "\nERROR: Loadset creation failed - OLDR.";
          _RC="$EC";
        fi
        if [ "$_RC" -eq 0 ]; then
          _execDate=$(date +%Y%m%d%H%M%S)
          ldrFallback "OLDR"; _RC=$?;
          echo -e "INFO:$(date +%Y%m%d%H%M%S) OLDR Fallback loadset creation completed - $(($(date +%Y%m%d%H%M%S)-execDate))s"
        fi
      else
        errSeg="${_errList}"
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file identified in this project - ${errSeg} RC:$EC"
        echo -e "\nERROR: Error file identified in this project - ${errSeg}";
        loadErr="Error file identified in this project"
        _RC="$EC";
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${SYS_STG_IMPL_CWRK} RC:$EC"
      echo -e "\nERROR: maketpf.cfg not found at ${SYS_STG_IMPL_CWRK}."
      _RC="$EC";
    fi
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Workspace not found at ${STG_TPF_APP} and ${STG_TPF_SYS} RC:$EC"
    echo -e "\nERROR: Workspace not found at ${STG_TPF_APP} and ${STG_TPF_SYS}."
    _RC="$EC";
  fi
  #
  #Move LDR files to loadsets Directory
  if [ "$_RC" -eq 0 ]; then
    rm -f "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}"/*
    mkdir -p "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}"
    if [ -f "${LoadsetName}.load" ] && [ -f "${LoadsetName}.report" ]; then
      #Move LOADSET and it's support files
      cp --preserve=all "${LoadsetName}"* "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}/" 2> /dev/null
      rm "${LoadsetName}"* 2> /dev/null
      #Move Fallback LOADSET and it's support files
      cp --preserve=all "${FallbackName}"* "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}/" 2> /dev/null
      rm "${FallbackName}"* 2> /dev/null
      chmod +x "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}"/*
    else
      rm -f "${LoadsetName}"* 2> /dev/null
      rm -f "${FallbackName}"* 2> /dev/null
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF Failed to create RC:$EC"
      echo -e "ERROR: LOADTPF Failed to create"
      _RC="$EC"
    fi
    echo -e "\\nLOG { \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\"}\n"
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Loadset realted files unable to move due to previous error RC:$EC"
    echo -e "\nERROR: Loadset realted files unable to move due to previous error.";
    echo -e "\\nLOG { \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\"}\n"
    echo -e "\\nJSON RESULT --> { \"errorMessage\" : \"${loadErr[*]//\"/}\", \"errorFiles\" : \"$errSeg\" }\n"
    _RC="$EC";
  fi
  return "$_RC";
}
#
#-----------------------------------------------------------------------------#
#
function tldrBuild {
  local errSeg;
  local _errList=' ';
  local _RC=0;
  local _errExclude;
  local err;
  local sbr;
  local Csv;
  local so;
  local errFNFT;
  local errFN;
  local sbrFNFT;
  local sbrFN;
  local so_app;
  local so_sys;
  local _execDate;
  warningExclude;
  #shellcheck disable=SC2001
  FallbackName=( $(echo "${LoadsetName}" | sed s/./B/2)) #Set fallback name
  if [ -d "${APP_STG_IMPL_CWRK}" ] && [ -d "${SYS_STG_IMPL_CWRK}" ]; then
    err=( $(find "${APP_STG_IMPL_CWRK}" "${SYS_STG_IMPL_CWRK}" -type f -name "*\.err" 2> /dev/null) )
    sbr=( $(find "${APP_STG_IMPL_CWRK}sbtasm" "${SYS_STG_IMPL_CWRK}" -type f 2> /dev/null) )
    Csv=( $(find "${APP_STG_IMPL_CWRK}" "${SYS_STG_IMPL_CWRK}" -type f -name "*\.csv" 2> /dev/null) )
    if [ "${Csv[0]}" == '' ]; then
      for errFile in "${err[@]}"
      do
        errFNFT="${errFile##*/}"
        errFN="${errFNFT%.*}"
        if [[ "${errFNFT}" == +($ERR_EXCL) ]] && [ "${#sbr[@]}" -eq 0 ]; then
          _errExclude="${_errExclude/ /} ${errFile}"
        elif [[ "${errFNFT}" != +($ERR_EXCL) ]] && [ "${#sbr[@]}" -eq 0 ]; then
          grep -w "directories do not exist:" "${errFile}" ; _RC=$?
          if [ "${_RC}" -eq 0 ]; then
            _errExclude="${_errExclude/ /} ${errFile}"
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFNFT} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
          else
            _errList="${_errList/ /} ${errFNFT}"
          fi
        elif [[ "${errFNFT}" != +($ERR_EXCL) ]] && [ "${#sbr[@]}" -ne 0 ]; then
          for sbrFile in "${sbr[@]}"
          do
            sbrFNFT="${sbrFile##*/}"
            sbrFN="${sbrFNFT%.*}"
            if [[ "${errFN,,}" == "${sbrFN,,}" ]]; then
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${errFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n RC:$_RC"
              echo -e "INFO: File ${errFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n";
              _errExclude="${_errExclude/ /} ${errFile}"
              _errList="${_errList//${errFNFT}/}"
              break;
            elif [[ ! "${_errList}" =~ ${errFNFT} ]]; then
              grep -w "directories do not exist:" "${errFile}"; _RC=$?
              if [ "${_RC}" -eq 0 ]; then
                _errExclude="${_errExclude/ /} ${errFile}"
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFNFT} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
              else
                _errList="${_errList/ /} ${errFNFT}"
              fi
            fi
          done
        fi
      done
      if [[ "${_errList}" == ' ' ]]; then
        cd "$APP_STG_IMPL_CWRK"
        if [ -f "maketpf.cfg" ]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Loadset creation initiated - TLDR RC:$_RC"
          echo -e "\nINFO: Loadset creation initiated - TLDR.";
          so=( $(find "${APP_STG_IMPL_CWRK}" "${SYS_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
          if [ "${so[0]}" != '' ]; then
            so_app=( $(find "${APP_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
            so_sys=( $(find "${SYS_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
            if [ "${so_app[0]}" != '' ] && [ "${so_sys[0]}" != '' ]; then
              loadtpf -debugfiles YES -tld "${so_app[@]}" "${so_sys[@]}" -s "${LoadsetName}" -o "${LoadsetName}.tldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
              cat "${LoadsetName}.out";
              if [ "$_RC" -ne 0 ]; then
                loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${APP_STG_IMPL_CWRK} and ${SYS_STG_IMPL_CWRK} - TLDR creation failed RC:$EC"
                echo -e "ERROR: LOADTPF include paths ${APP_STG_IMPL_CWRK} and ${SYS_STG_IMPL_CWRK} - TLDR creation failed."
                _RC="$EC";
              fi
            elif [ "${so_app[0]}" != '' ]; then
              loadtpf -debugfiles YES -tld "${so_app[@]}" -s "${LoadsetName%.}" -o "$LoadsetName.tldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
              cat "${LoadsetName}.out";
              if [ "$_RC" -ne 0 ]; then
                loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${APP_STG_IMPL_CWRK} - TLDR creation failed RC:$EC"
                echo -e "ERROR: LOADTPF include paths ${APP_STG_IMPL_CWRK} - TLDR creation failed."
                _RC="$EC";
              fi
            elif [ "${so_sys[0]}" != '' ]; then
              loadtpf -debugfiles YES -tld "${so_sys[@]}" -s "${LoadsetName%.}" -o "$LoadsetName.tldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
              cat "${LoadsetName}.out";
              if [ "$_RC" -ne 0 ]; then
                loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
                sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${SYS_STG_IMPL_CWRK} - TLDR creation failed RC:$EC"
                echo -e "ERROR: LOADTPF include paths ${SYS_STG_IMPL_CWRK} - TLDR creation failed."
                _RC="$EC";
              fi
            else
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF .SO NOT FOUND - ${APP_STG_IMPL_CWRK} ${SYS_STG_IMPL_CWRK} RC:$EC"
              echo -e "ERROR: LOADTPF .SO NOT FOUND - ${APP_STG_IMPL_CWRK} ${SYS_STG_IMPL_CWRK}"
              _RC="$EC";
            fi
            if [ "$_RC" -eq 0 ]; then
              addfile "TLDR"; _RC=$?;
            fi
          else
            echo "@DEFINE" > "$LoadsetName.load"
            sed -i "$ a SYSID=BSS" "$LoadsetName.load"
            sed -i "$ a DEBUGFILES=YES" "${LoadsetName}.load"
            addfile "TLDR"; _RC=$?;
          fi
          if [ "$_RC" -ne 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${APP_STG_IMPL_CWRK} - loadtpf failed RC:$EC"
            echo -e "\nERROR: ${APP_STG_IMPL_CWRK} - loadtpf failed."
            _RC="$EC";
          fi
          if [ "$_RC" -eq 0 ]; then
            # NO TLDR Fallback loader creation for AUX type load
            sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Fallabck loadset creation skip due to AUX type load - SKIP RC:$RC"
            echo -e "INFO: Fallabck loadset creation skip due to AUX type load - SKIP"
          fi
        else
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${APP_STG_IMPL_CWRK} RC:$EC"
          echo -e "\nERROR: maketpf.cfg not found at ${APP_STG_IMPL_CWRK}."
          _RC="$EC";
        fi
      else
        errSeg="${_errList}"
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file identified in this project - ${errSeg} RC:$EC"
        echo -e "\nERROR: Error file identified in this project - ${errSeg}";
        loadErr="Error file identified in this project"
        _RC="$EC";
      fi
    else
      _RC="$EC";
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:CSV file included, so generate .TLDR and ftp .TLDR Manually RC:$EC"
      echo -e "\nERROR: CSV file included, so generate .TLDR and ftp .TLDR Manually."
    fi
  elif [ -d "${APP_STG_IMPL_CWRK}" ]; then
    cd "$APP_STG_IMPL_CWRK"
    Csv=( $(find "${APP_STG_IMPL_CWRK}" -type f -name "*\.csv" 2> /dev/null) )
    if [ "${Csv[0]}" == '' ]; then
      if [ -f "maketpf.cfg" ]; then
        err=( $(find . -type f -name "*\.err" 2> /dev/null) )
        sbr=( $(find sbtasm -type f 2> /dev/null) )
        for errFile in "${err[@]}"
        do
          errFNFT="${errFile##*/}"
          errFN="${errFNFT%.*}"
          if [[ "${errFNFT}" == +($ERR_EXCL) ]] && [ "${#sbr[@]}" -eq 0 ]; then
            _errExclude="${_errExclude/ /} ${errFile}"
          elif [[ "${errFNFT}" != +($ERR_EXCL) ]] && [ "${#sbr[@]}" -eq 0 ]; then
            grep -w "directories do not exist:" "${errFNFT}"; _RC=$?
            if [ "${_RC}" -eq 0 ]; then
              _errExclude="${_errExclude/ /} ${errFile}"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFNFT} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
            else
              _errList="${_errList/ /} ${errFNFT}"
            fi
          elif [[ "${errFNFT}" != +($ERR_EXCL) ]] && [ "${#sbr[@]}" -ne 0 ]; then
            for sbrFile in "${sbr[@]}"
            do
              sbrFNFT="${sbrFile##*/}"
              sbrFN="${sbrFNFT%.*}"
              if [[ "${errFN,,}" == "${sbrFN,,}" ]]; then
                sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:File ${errFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n RC:$RC"
                echo -e "INFO: File ${errFile} part of sabretalk warning exception - PROCEEDED WITH COMPILER WARNING\n";
                _errExclude="${_errExclude/ /} ${errFile}"
                _errList="${_errList//${errFNFT}/}"
                break;
              elif [[ ! "${_errList}" =~ ${errFNFT} ]]; then
                grep -w "directories do not exist:" "${errFNFT}"; _RC=$?
                if [ "${_RC}" -eq 0 ]; then
                  _errExclude="${_errExclude/ /} ${errFile}"
                  sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFNFT} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
                else
                  _errList="${_errList/ /} ${errFNFT}"
                fi
              fi
            done
          fi
        done
        if [[ "${_errList}" == ' ' ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Loadset creation initiated - TLDR RC:$RC"
          echo -e "\nINFO: Loadset creation initiated - TLDR.";
          so=( $(find "${APP_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
          if [ "${so[0]}" != '' ]; then
            loadtpf -debugfiles YES -tld "${so[@]}" -s "${LoadsetName%.}" -o "$LoadsetName.tldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
            cat "${LoadsetName}.out";
            if [ "$_RC" -ne 0 ]; then
              loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
               sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${APP_STG_IMPL_CWRK} - TLDR creation failed RC:$EC"
              echo -e "\nERROR: LOADTPF include paths ${APP_STG_IMPL_CWRK} - TLDR creation failed."
              _RC="$EC";
            fi
            if [ "$_RC" -eq 0 ]; then
              addfile "TLDR"; _RC=$?
            fi
          else
            echo "@DEFINE" > "${LoadsetName}.load"
            sed -i "$ a SYSID=BSS" "${LoadsetName}.load"
            sed -i "$ a DEBUGFILES=YES" "${LoadsetName}.load"
            addfile "TLDR"; _RC=$?;
          fi
          if [ "$_RC" -ne 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${APP_STG_IMPL_CWRK} - TLDR creation failed RC:$EC"
            echo -e "ERROR: LOADTPF include paths ${APP_STG_IMPL_CWRK} - TLDR creation failed."
            _RC="$EC";
          fi
        else
          errSeg="${_errList}"
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file identified in this project - ${errSeg} RC:$EC"
          echo -e "\nERROR: Error file identified in this project - ${errSeg}";
          loadErr="Error file identified in this project"
          _RC="$EC";
        fi
        if [ "$_RC" -eq 0 ]; then
          # NO TLDR Fallback loader creation for AUX type load
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Fallabck loadset creation skip due to AUX type load - SKIP RC:$_RC"
          echo -e "INFO: Fallabck loadset creation skip due to AUX type load - SKIP"
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file identified in this project RC:$EC"
        echo -e "\nERROR: Error file identified in this project.";
        _RC="$EC";
      fi
    else
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:CSV file included, so generate .TLDR and ftp .TLDR Manually RC:$EC"
      echo -e "\nERROR: CSV file included, so generate .TLDR and ftp .TLDR Manually."
      _RC="$EC";
    fi
  elif [ -d "${SYS_STG_IMPL_CWRK}" ]; then
    cd "$SYS_STG_IMPL_CWRK"
    Csv=( $(find "${SYS_STG_IMPL_CWRK}" -type f -name "*\.csv" 2> /dev/null) )
    if [ "${Csv[0]}" == '' ]; then
      if [ -f "maketpf.cfg" ]; then
        #Error handling
        err=( $(find . -type f -name "*\.err" 2> /dev/null) )
        for errFile in "${err[@]}"
        do
          errFNFT="${errFile#*/}"
          errFN="${errFNFT%.*}"
          if [[ "${errFNFT}" == +($ERR_EXCL) ]]; then
            _errExclude="${_errExclude/ /} ${errFile}"
          else
            grep -w "directories do not exist:" "${errFNFT}"; _RC=$?
            if [ "${_RC}" -eq 0 ]; then
              _errExclude="${_errExclude/ /} ${errFile}"
              sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${errFNFT} The error created due to following APPL or TPF ROOT directories do not exist: RC:$_RC"
            else
              _errList="${_errList/ /} ${errFNFT}"
            fi
          fi
        done
        if [[ "${_errList}" == ' ' ]]; then
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Loadset creation initiated - TLDR RC:$RC"
          echo -e "\nINFO: Loadset creation initiated - TLDR.";
          so=( $(find "${SYS_STG_IMPL_CWRK}" -type f -name "*\.so" -not -name "lib*" -not -path "*/lib/*" 2> /dev/null) )
          if [ "${so[0]}" != '' ]; then
            loadtpf -debugfiles YES -tld "${so[@]}" -s "${LoadsetName%.}" -o "$LoadsetName.tldr" -l "${LoadsetName}.load" -r "${LoadsetName}.report" &> "${LoadsetName}.out"; _RC=$?;
            cat "${LoadsetName}.out";
            if [ "$_RC" -ne 0 ]; then
              loadErr=( $(cat "${LoadsetName}.out"| grep -v "[MTP]*[I]\|halted") )
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF include paths ${APP_STG_IMPL_CWRK} and ${SYS_STG_IMPL_CWRK} - TLDR creation failed RC:$EC"
              echo -e "ERROR: LOADTPF include paths ${APP_STG_IMPL_CWRK} and ${SYS_STG_IMPL_CWRK} - TLDR creation failed."
              _RC="$EC";
            fi
            if [ "$_RC" -eq 0 ]; then
              addfile "TLDR"; _RC=$?;
            fi
          else
            echo "@DEFINE" > "${LoadsetName}.load"
            sed -i "$ a SYSID=BSS" "$LoadsetName.load"
            sed -i "$ a DEBUGFILES=YES" "${LoadsetName}.load"
            addfile "TLDR"; _RC=$?;
          fi
          if [ "$_RC" -ne 0 ]; then
            sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Loadset creation failed - TLDR RC:$EC"
            echo -e "\nERROR: Loadset creation failed - TLDR.";
            _RC="$EC";
          fi
        else
          errSeg="${_errList}"
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Error file identified in this project - ${errSeg} RC:$EC"
          echo -e "\nERROR: Error file identified in this project - ${errSeg}";
          loadErr="Error file identified in this project"
          _RC="$EC";
        fi
        if [ "$_RC" -eq 0 ]; then
          # NO TLDR Fallback loader creation for AUX type load
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Fallabck loadset creation skip due to AUX type load - SKIP RC:$_RC"
          echo -e "INFO: Fallabck loadset creation skip due to AUX type load - SKIP"
        fi
      else
        sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:maketpf.cfg not found at ${SYS_STG_IMPL_CWRK} RC:$EC"
        echo -e "\nERROR: maketpf.cfg not found at ${SYS_STG_IMPL_CWRK}."
        _RC="$EC";
      fi
    else
      _RC="$EC";
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:CSV file included, so generate .TLDR and ftp .TLDR Manually RC:$EC"
      echo -e "\nERROR: CSV file included, so generate .TLDR and ftp .TLDR Manually."
    fi
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Workspace not found at ${APP_STG_IMPL_CWRK} and ${SYS_STG_IMPL_CWRK} RC:$EC"
    echo -e "\nERROR: Workspace not found at ${APP_STG_IMPL_CWRK} and ${SYS_STG_IMPL_CWRK}."
    _RC="$EC";
  fi
  #
  #
  #Move LDR files to loadset Directory
  if [ "$_RC" == 0 ]; then
    #shellcheck disable=SC2115
    rm -rf "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}"/*
    mkdir -p "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}"
    if [ -f "${LoadsetName}.load" ] && [ -f "${LoadsetName}.report" ]; then
      #Move LOADSET and it's support files
      cp --preserve=all "${LoadsetName}"* "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}/" 2> /dev/null
      rm "${LoadsetName}"* 2> /dev/null
      #Move Fallback LOADSET and it's support files
      cp --preserve=all "${FallbackName}"* "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}/" 2> /dev/null
      rm "${FallbackName}"* 2> /dev/null
      sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Loadset realted files moved to /ztpfrepos/loadsets directory RC:$_RC"
      echo -e "\nINFO: Loadset realted files moved to /ztpfrepos/loadsets directory.";
    else
      rm -f "${LoadsetName}"* 2> /dev/null
      rm -f "${FallbackName}"* 2> /dev/null
      sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:LOADTPF Failed to create RC:$EC"
      echo -e "ERROR: LOADTPF Failed to create"
      _RC="$EC"
    fi
    echo -e "\\nLOG { \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\"}\n"
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Loadset realted files unable to move due to previous error RC:$EC"
    echo -e "\nERROR: Loadset realted files unable to move due to previous error.";
    echo -e "\\nLOG { \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\"}\n"
    echo -e "\\nJSON RESULT --> { \"errorMessage\" : \"${loadErr[*]//\"/}\", \"errorFiles\" : \"$errSeg\" }\n"
    _RC="$EC";
  fi
  return "$_RC";
}
#
#-----------------------------------------------------------------------------#
#Fallback loadset creation for new files "fallback_log.txt"
function fallbackLogFile {
  local _execDate;
  pushd "${STG_TPF_LOD}/${Implementation%%_*}/${USR_IMPL_CORE}/" &> /dev/null
    _fileList=$(curl -s -k "${PRD_API_RURL_SMOD_USR}/${PRD_API_WKF}/common/getNewFileList?planId=${USR_IMPL_PLAN^^}&pSystem=${USR_IMPL_CORE^^}")
    if [ -n "${_fileList[0]// /}" ]; then
      while IFS= read -r line
      do
        echo "${line%%,*}"
        nFile="${line%%,*}";
        if [[ "${nFile}" != "NOT_FOUND" ]]; then
          touch "fallback_log.txt"
          sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${nFile} is a new source artifact and did not have a previous version in the fallback loadset RC:$RC"
          echo -e "${nFile} is a new source artifact and did not have a previous version in the fallback loadset" >> fallback_log.txt
        fi
      done < <(printf '%s\n' "$_fileList")
    fi
#   echo -e "${_fileList[*]}"
#   for nFile in $(echo "${_fileList}")
#   do
#     echo -e "${nFile}"
#     if [[ "${nFile}" != "NOT_FOUND" ]]; then
#       touch "fallback_log.txt"
#       sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:${nFile} is a new source artifact and did not have a previous version in the fallback loadset RC:$RC"
#       echo -e "${nFile} is a new source artifact and did not have a previous version in the fallback loadset" >> fallback_log.txt
#     fi
#   done
  popd &> /dev/null
}
#
#-----------------------------------------------------------------------------#
#Start main execution if validation success
if [ "$RC" -eq 0 ]; then
  warningExclude
  getParmFromBranch "${Implementation%_*}" "STG"; RC=$?;
  execDate=$(date +%Y%m%d%H%M%S)
  if [ -d "${APP_STG_IMPL_CWRK}" ]; then
    appBuildErr=$(buildVerify "${APP_STG_IMPL_CWRK%/*}")
  fi
  if [ -d "${SYS_STG_IMPL_CWRK}" ]; then
    sysBuildErr=$(buildVerify "${SYS_STG_IMPL_CWRK%/*}")
  fi
  if [ -z "${appBuildErr}" ] && [ -z "${sysBuildErr}" ]; then
    echo -e "INFO:$(date +%Y%m%d%H%M%S) Existing build workspace validation completed - $(($(date +%Y%m%d%H%M%S)-execDate))s"
    case "$LoadType" in
      A)
        execDate=$(date +%Y%m%d%H%M%S)
        tldrBuild "$Implementation";
        echo -e "INFO:$(date +%Y%m%d%H%M%S) TLDR Loadset creation completed including fallback loadset - $(($(date +%Y%m%d%H%M%S)-execDate))s"
        RC=$?;                         #TLDR Creations
        ;;
      E)
        execDate=$(date +%Y%m%d%H%M%S)
        oldrBuild "$Implementation";
        echo -e "INFO:$(date +%Y%m%d%H%M%S) OLDR Loadset creation completed including fallback loadset - $(($(date +%Y%m%d%H%M%S)-execDate))s"
        RC=$?;                         #OLDR Creation
        ;;
      *)
        RC="$EC";
        ;;
    esac
    if [ "$RC" -eq 0 ]; then
      execDate=$(date +%Y%m%d%H%M%S)
      fallbackLogFile;
      echo -e "INFO:$(date +%Y%m%d%H%M%S) New segments added into fallbacklog files completed - $(($(date +%Y%m%d%H%M%S)-execDate))s"
    fi
    echo -e "\\nLOG { \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\"}\n"
  else
    if [[ -n "${appBuildErr// /}" ]] && [[ -n "${sysBuildErr// /}" ]]; then
      SegErr="${appBuildErr},${sysBuildErr}"
      printErr="Source ${appBuildErr} in ${APP_STG_IMPL_CWRK} and ${sysBuildErr} in ${SYS_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please perform create build and then attempt loadset generation again."
    elif [[ -z "${appBuildErr}" ]] && [[ -n "${sysBuildErr// /}" ]]; then
      SegErr="${sysBuildErr}"
      printErr="Source ${SegErr} in ${SYS_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please perform create build and then attempt loadset generation again."
    elif [[ -n "${appBuildErr// /}" ]] && [[ -z "${sysBuildErr// /}" ]]; then
      SegErr="${appBuildErr}"
      printErr="Source ${SegErr} in ${APP_STG_IMPL_CWRK} build directory might not have associated .O and/or .SO derived artefacts. Please perform create build and then attempt loadset generation again."
    fi
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:${printErr} RC:$EC"
    echo -e "\nERROR: ${printErr}.";
    if [ -z "${loadErr// /}" ]; then
      loadErr="${printErr}"
    fi
    RC="$EC";
    echo -e "INFO:$(date +%Y%m%d%H%M%S) Existing build workspace validation completed - $(($(date +%Y%m%d%H%M%S)-execDate))s"
    echo -e "\\nLOG { \"startTime\" : \"$startDate\" , \"endTime\" : \"$(date +%Y%m%d%H%M%S)\"}\n"
    echo -e "\\nJSON RESULT --> { \"errorMessage\" : \"ERROR: ${printErr}\", \"errorFiles\" : \"${SegErr}\" }\n"
  fi
else
  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Invalid inputs RC:$RC"
fi
#-----------------------------------------------------------------------------#
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:END ${Implementation} ${LoadType} ${LoadsetName} ${ListFallback} RC:$RC"
exit "$RC"
#-----------------------------------------------------------------------------#
# vim: filetype=bash
