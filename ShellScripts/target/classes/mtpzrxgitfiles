#!/bin/bash
#shellcheck disable=SC2164,SC2207
#*****************************************************************************#
#   SCRIPT NAME: mtpzrxgitfiles                                               #
#                                                                             #
#   DESCRIPTION:                                                              #
#      Script to get list of files from NONIBM Production repository          #
#                                                                             #
#   NOTE: Don't alter CONSOLE messages                                        #
#                                                                             #
#   INPUT:                                                                    #
#      $1  - List of Core                                                     #
#                                                                             #
#   OUTPUT:                                                                   #
#      exit with 0, successfull process                                       #
#      exit with 8, error message                                             #
#                                                                             #
#*****************************************************************************#
#*****************************************************************************#
#                                                                             #
#                            M A I N T E N A N C E                            #
#                                                                             #
#-----------------------------------------------------------------------------#
#   MMDDYYYY    INIT    COMMENT                                               #
#   --------    ----    ------------------------------------------------------#
#   06262018    Arul    Created the script                                    #
#   04252019    GOWTHAM Updated with logger support                           #
#*****************************************************************************#
#unset MTP_ENV                          #DEBUG
#source "${MTP_ENV:=$PWD}/.mtpconfig"
MTP_ENV="/opt/mtp"                     #Remote EXEC call from VM not resolve
#shellcheck disable=SC1090
source "${MTP_ENV:=$PWD}/mtplibrary"
#-----------------------------------------------------------------------------#
#declare -i _ExIP=1;                    #Expected number of input parms
#declare -i _ReIP="$#";                 #Received number of input parms
#
LIST_CORE="${1,,}";                    #Read Local Dest path from input
CORE_SERV="${2,,}";                    #Read Local Dest path from input
#
SPID=$$; #To get process id of the script
SPNM=$0; #To get script name
#minInputValidation "${_ExIP}" "${_ReIP}"; RC="$?";
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:Start ${LIST_CORE} ${CORE_SERV} RC:$RC"
#
#-----------------------------------------------------------------------------#
#Start main execution if validation success
if [ "$RC" -eq 0 ]; then
  if [ -d /ztpfarch ] && [ -w /ztpfarch ]; then
    mkdir -p ~/GITRETRIVE
    pushd ~/GITRETRIVE &> /dev/null
      if [[ "${CORE_SERV}" == dv ]]; then
        PRD_RHOST="vhldvztdt001.tvlport.net"
        PRD_BIN_PORT="8443"
        PRD_BIN_RURL="${PRD_BIN_CHNL}://$(echo "${MTP_SSAL}" | base64 --decode)@${PRD_RHOST}:${PRD_BIN_PORT}"
      elif [[ "${CORE_SERV}" == qa ]]; then
        PRD_RHOST="ztpfdevopstoolchain.dv.tvlport.com"
        PRD_BIN_PORT="8443"
        PRD_BIN_RURL="${PRD_BIN_CHNL}://$(echo "${MTP_SSAL}" | base64 --decode)@${PRD_RHOST}:${PRD_BIN_PORT}"
      elif [[ "${CORE_SERV}" == pp ]] && [[ ( "${LIST_CORE}" == +($REF_T4_CORE) ) || ( "${LIST_CORE}" == +($REF_WS_CORE) ) ]]; then
        PRD_RHOST="ztpfdevopstoolchain.pp.tvlport.com"
        PRD_BIN_PORT="8442"
        PRD_BIN_RURL="${PRD_BIN_CHNL}://$(echo "${MTP_SSAL}" | base64 --decode)@${PRD_RHOST}:${PRD_BIN_PORT}"
        PRD_API_GIT="TPJGitAPI/jgit"
      elif [[ "${CORE_SERV}" == pp ]]  && [[ "${LIST_CORE}" == +($REF_DL_CORE) ]]; then
        PRD_RHOST="ztpfdevopstoolchaindl.pp.tvlport.com"
        PRD_BIN_PORT="8443"
        PRD_BIN_RURL="${PRD_BIN_CHNL}://$(echo "${MTP_SSAL}" | base64 --decode)@${PRD_RHOST}:${PRD_BIN_PORT}"
        PRD_API_GIT="DLJGitAPI/jgit"
      elif [[ "${CORE_SERV}" == pn ]] && [[ ( "${LIST_CORE}" == +($REF_T4_CORE) ) || ( "${LIST_CORE}" == +($REF_WS_CORE) ) ]]; then
        PRD_RHOST="ztpfdevopstoolchain.prod.tvlport.com"
        PRD_BIN_PORT="8443"
        PRD_BIN_RURL="${PRD_BIN_CHNL}://$(echo "${MTP_SSAL}" | base64 --decode)@${PRD_RHOST}:${PRD_BIN_PORT}"
      elif [[ "${CORE_SERV}" == pn ]] && [[ "${LIST_CORE}" == +($REF_DL_CORE) ]]; then
        PRD_RHOST="ztpfdevopstoolchaindl.prod.tvlport.com"
        PRD_BIN_PORT="8443"
        PRD_BIN_RURL="${PRD_BIN_CHNL}://$(echo "${MTP_SSAL}" | base64 --decode)@${PRD_RHOST}:${PRD_BIN_PORT}"
      fi
      i="";
      host="$(hostname)"
      for i in {0..2}                  #Retry if it's failed
      do
        if [[ "${LIST_CORE}" == +($REF_T4_CORE) ]] || [[ "${LIST_CORE}" == +($REF_WS_CORE) ]]; then
          if [[ "${host}" =~ pp ]]; then
            repoIndex=( $(curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/JGitAPI/jgit/getProductionRepoList?nickName=tp") )
          else
            repoIndex=( $(curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/getProductionRepoList?nickName=tp") )
          fi
        elif [[ "${LIST_CORE}" == +($REF_DL_CORE) ]]; then
          if [[ "${host}" =~ pp ]]; then
            repoIndex=( $(curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/JGitAPI/jgit/getProductionRepoList?nickName=dl") )
          else
            repoIndex=( $(curl -k -s --request GET --url "${PRD_BIN_CHNL}://${PRD_RHOST}:${PRD_BIN_PORT}/${PRD_API_GIT}/getProductionRepoList?nickName=dl") )
          fi
        else
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Requested core name invlaid - ${LIST_CORE}. RC:$EC"
          echo -e "ERROR: Requested core name invlaid - ${LIST_CORE}"
          RC="$EC";
        fi
        if [[ -z "${repoIndex[0]}" ]]; then
          sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Git API not accessible or return no data RC:$EC"
          echo -e "ERROR: Git API not accessible or return no data"
          sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:git remote re-try - $i RC:$RC"
          echo -e "WARNING: git remote re-try - $i" &> /dev/null; #DEBUG
          sleep 3;
          RC="$EC";
        else
          break;
        fi
      done
      if [ "$RC" -eq 0 ]; then
        CORELIST="${LIST_CORE/,/|}"
        temp1="${repoIndex/[/}"
        declare -a repoIndex="${temp1/]/}"
        #Delete existing file
        IFS=',' read -r -a coreList <<< "${LIST_CORE[@]}"
        for cList in "${coreList[@]}"
        do
          rm -f /ztpfarch/"${cList}_programs.txt"
        done
        unset IFS
        IFS=',' read -r -a repoList <<< "${repoIndex[@]}"
        for rList in "${repoList[@]}"
        do
          if [[ "${rList}" =~ 'nonibm' ]] && [[ ! "${rList}" =~ 'ibm_conf' ]] && [[ ! "${rList}" =~ 'derived' ]]; then
            repoPath="${rList//\"/}"
            temp1="${repoPath##*/}"
            repoName="${temp1%.*}"
            i="";
            for i in {0..2}            #Retry if it's failed
            do
              [ -d ~/GITRETRIVE/"${repoName}" ] && rm -rf ~/GITRETRIVE/"${repoName}"
              GIT_SSL_NO_VERIFY=true git clone "${PRD_BIN_RURL}/gitblit/r/${repoPath}" &> /dev/null; RC=$?;
              if [ "${RC}" -eq 0 ]; then
                break;
              elif [ "${RC}" -eq 128 ]; then
                sendLOG "WARN" "pid[${SPID}]" "${SPNM##*/}:git remote re-try - $i RC:$RC"
                echo -e "WARNING: git remote re-try - $i" &> /dev/null; #DEBUG
                sleep 3;
                RC="$EC";
              else
                RC="$EC";
              fi
            done
            if [ "$RC" -eq 0 ]; then
              pushd ~/GITRETRIVE/"${repoName}" &> /dev/null
                for bList in $(git branch -a | grep "origin/master_")
                do
                  branchName="${bList##*/}"
                  if [[ "${branchName##*_}" == +(${CORELIST/ /}) ]]; then
                    git checkout "${branchName}" &> /dev/null
                    #shellcheck disable=SC1083
                    find . -type f -not -path "*.git*" -exec basename \{} \; | grep -v README | grep -v MigrationSummary >> /ztpfarch/"${branchName##*_}_programs.txt"
                  fi
                done
              popd &> /dev/null
              rm -rf ~/GITRETRIVE/"${repoName}"
            else
              sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Failed to get ${repoName} repository from git server RC:$EC"
              echo -e "ERROR: Failed to get ${repoName} repository from git server"
              RC="$EC"
            fi
          fi
        done
      fi
    popd &> /dev/null
  else
    sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:/ztpfarch directory not found or not write permission RC:$EC"
    echo -e "ERROR: /ztpfarch directory not found or not write permission"
  fi
else
  sendLOG "ERROR" "pid[${SPID}]" "${SPNM##*/}:Invalid inputs RC:$RC"
fi
#-----------------------------------------------------------------------------#
sendLOG "INFO" "pid[${SPID}]" "${SPNM##*/}:END ${LIST_CORE} ${CORE_SERV} RC:$RC"
exit "$RC"
#-----------------------------------------------------------------------------#
# vim: filetype=bash
