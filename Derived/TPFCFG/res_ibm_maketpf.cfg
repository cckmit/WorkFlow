#**********************************************************************
#          Licensed Materials - Property of IBM                       *
#          "Restricted Materials of IBM"                              *
#          5748-T15                                                   *
#          Copyright IBM Corp. 2004, 2015                             *
#          All Rights Reserved                                        *
#          US Government Users Restricted Rights - Use, duplication   *
#          or disclosure restricted by GSA ADP Schedule Contract      *
#          with IBM Corp.                                             *
#**********************************************************************
#  --START OF APAR HISTORY------------------------------------------  *
#    APAR    DATE      DESCRIPTION                                    *
#  PJ30594 20061205 Added loadtpf TLD support                         *
#  PJ31262 20060726 Added control file lookup support                 *
#  PJ31697 20061227 Add support for TPF_BAS_DIRNAME                   *
#  PJ32022 20070629 Add program level version support and             *
#                   and output message level filtering                *
#  PJ32149 20070727 Set default MAKETPF_MSG_LEVEL to I                *
#  PJ32328 20071217 Add TPF_KEEP_ADATA                                *
#  PJ33274 20080416 Add LOADTPF_CHECK_UNRESOLVED                      *
#  PJ33788 20080620 Add LOADTPF_USER                                  *
#  PJ34141 20080724 Add maketpf_env_user                              *
#  PJ34354 20080818 Add USRSTUB as a TPF standard library             *
#  PJ34986 20081117 Add MAKETPF_UCST_LIBRARY_NAME support             *
#  PJ34903 20081106 Add LOADTPF_LOADSET_COMMENT support               *
#  PJ37111 20081106 Add example for setting USS and Linux versions    *
#                   of compile/assemble flags. Add sample common      *
#                   configuration dependent system variables          *
#  PJ37437 20100331 Additional z/TPF compiler support                 *
#  PJ37458 20100430 Add MAKETPF_WARN_FLAG support                     *
#  PJ37366 20100515 Add MAKETPF_OMIT_UCST_LIBRARY_LIST support        *
#  PJ38194 20101005 Add MAKETPF_GEN_SIP_FILES support                 *
#                   Add MAKETPF_ROOT_AUDIT support                    *
#  PJ40021 20120418 Add MAKETPF_TOOLKIT_NO_EVENTS_PGMS support        *
#  PJ39969 20120928 GCC 4.6 compatibility                             *
#  PJ42081 20140310 Add TPF_LOCAL_MOD_SEARCH_ORDER support            *
#  PJ43440 20151112 Add TPF_DFDL_DIR                                  *
#                                                                     *
#  --END OF APAR HISTORY--------------------------------------------  *
#**********************************************************************
#                  Travelport  Modification  Log                      *
#                  -----------------------------                      *
#  2013Mar11   Changed ASMFLAG from 'NOCONT' to 'CONT'        RXB     *
#                                                                     *
#**********************************************************************
################################################################################
################################################################################
# Sample maketpf.cfg file
################################################################################
################################################################################

################################################################################
# This file defines the "build space" for the MakeTPF tools
# To be recognized, the file can:
# - be copied to the directory the build is being run from,
#   under the name maketpf.cfg
# - be stored under any path/file name and then identified using
#   the TPF_CFG environment variable (export TPF_CFG=/pathname/filename)
# Note that the value specified in the TPF_CFG will take precedence
# over a file named maketpf.cfg in the current directory
################################################################################


################################################################################
# Warning:  DO NOT use the ~ character in the TPF_ROOT or APPL_ROOT settings.
#           The ~ is not understood as the user's home directory by
#           all programs and utilities run during the build.
#           Instead, use:
#           - the specific directory name
#             for example:  /home/lafer/myprj
#           - ${HOME}
#             for example: $(HOME)/myprj
#             - to test if $(HOME) is defined as an environment variable on
#               your system, run the following from a command prompt
#                  echo ${HOME}
#               and verify your home directory is echoed to the screen
#           - $(shell eval echo ~)
#             for example: $(shell eval echo ~)/myprj
#             note that the shell command initiates a sub-process to convert
#             the ~ to the actual home directory name, rather than doing
#             direct variable substitution.
################################################################################

################################################################################
# Define the list of hfs's that contain TPF code
# - the order listed defines the order of precedence
# - the first hfs in the list will be the one used for all output files
# Replace the first hfs in the list with a directory you have write
# access to.
# Add additional hfs's to the list for project and/or production level
# source files
################################################################################

TPF_ROOT := /ztpfsys/res/put12a/derived
TPF_ROOT += /ztpfsys/res/put12a
TPF_ROOT += /ztpfsys/common/put12a
TPF_ROOT += /ztpf/ibm/put12a

################################################################################
# Define the list of hfs's that contain user application code
# - the order listed defines the order of precedence
# - the first hfs in the list will be the one used for all output files
# Replace the first hfs in the list with a directory you have write
# access to.
# Add additional hfs's to the list for project and/or production level
# source files
################################################################################

APPL_ROOT += /ztpfrepos/res/derived
APPL_ROOT += /ztpfrepos/res

################################################################################
# Define the list of TPF PDS name patterns
# - the order listed defines the order of precedence
# - the first PDS name in the list will be the one used for all output files
# - if used in the name, the "*" will be replaced by the string "LINK" by the
#   MakeTPF tools, othewise, the "*" can be removed and LINK
#   (or any other desired name) can be hardcoded in the name, as the LINK
#   PDS is the only PDS needed for z/TPF.
# - the * is supported for consistency with the MakeTPF 41 solution, where
#   * is translated to LINK, OBJ, SRCE.RT, etc., for each of the
#   different PDSs needed in a TPF 41 build.
# - the TPF_ROOTPDS variables are needed only for z/OS offline builds.
################################################################################

TPF_ROOTPDS := ZTPF.RES.*.Z11.BSS
TPF_ROOTPDS += TPF.*.Z11

################################################################################
# Define the list of user application PDS name patterns
# - the order listed defines the order of precedence
# - the first PDS name in the list will be the one used for all output files
# - if used in the name, the "*" will be replaced by the string "LINK" by the
#   MakeTPF tools, othewise, the "*" can be removed and LINK
#   (or any other desired name) can be hardcoded in the name, as the LINK
#   PDS is the only PDS needed for z/TPF.
# - the * is supported for consistency with the MakeTPF 41 solution, where
#   * is translated to LINK, OBJ, SRCE.RT, etc., for each of the
#   different PDSs needed in a TPF 41 build.
# - the APPL_ROOTPDS variables are needed only for z/OS offline builds.
################################################################################

APPL_ROOTPDS := USERID.*.MYAPP
APPL_ROOTPDS += APP.*.APPVER

################################################################################
# Define the system name
# - BAS:  (Base Only system)
#   - For a BAS system, optionally specify the directory name to be used
#     to hold the configuration dependent files. The default name is:  bas
#     The directory name will be forced to lower case.
# - BSS:  (Default Basic Subsystem name, SSDEF macro, no SSNAME, BSSGEN=YES)
# - nnnn:  (Named Basic Susbsystem, SSDEF macro, BSSGEN=YES, SSNAME=nnnn)
#   - For a BSS system build, the configuration dependent files
#     will be placed in a directory matching the value of the TPF_BSS_NAME
#     variable, in lower case.
# - The default value is: BSS
################################################################################

TPF_BSS_NAME := BSS
# TPF_BAS_DIRNAME := bas1

################################################################################
# Optionally, define the subsystem name
# - nnnn (Susbsystem name, SSDEF macro, BSSGEN=NO, SSNAME=nnnn)
# Notes:
# - Only set TPF_SS_NAME if building a subsystem.
#   - Existence of this variable directs maketp to build the subsystem.
#   - Omit if building a base only system or basic subsystem
# - TPF_BSS_NAME := mmmm must also be specified, where the SSDEF macro has
#   BSSGEN=NO, SSNAME=nnnn, BSSNAME=mmmm
# - This is because a subsystem build requires source files from both the
#   subsystem directory and the parent basic subsystem directories.
# - For a subsystem build, the configuration dependent files
#   will be placed in a directory matching the value of the TPF_SS_NAME
#   variable, in lower case.
################################################################################

# TPF_SS_NAME := WP

################################################################################
# Optional common configuration dependent system names
# - Used to define the "common" configuration dependent directory
# - Specify the directory name for the system configuration dependent files
# - Used for locating shared objects when performing load actions.
# - For example, a full build is done in a base only build dir: bas1
#   bas2 is a second base only system maintained at the same apar level
#   but has a few unique configuration dependent programs, like CTKV,
#   that differ from bas1.  When building load decks, etc. for bas2,
#   if bas1 is specified for TPF_BSS_COMMON, all configuration dependent
#   shared objects not found in bas2/load will be located in bas1/load.
# - Note that the bldtpf -fctb_src, -sip, and -fctb must still be run in
#   bas2 to populate the bas2 source files (macro, include,
#   etc.)
# - Can be used for BSS and BAS configurations.
# - Use of TPF_SS_COMMON is similar to TPF_BSS_COMMON, but for subsystems.
#   Only set if working with a subsytem.
# - Setting these variables has no effect on building -- source files must
#   be found under the directory given by the TPF_BSS_NAME (or TPF_BAS_DIRNAME)
#   variable.
################################################################################

# TPF_BSS_COMMON :=
# TPF_SS_COMMON :=

################################################################################
# Optionally define a version code to be applied to the executables/loadables
# - by default, no version code is applied
################################################################################

# USER_VERSION_CODE := 51

################################################################################
# Define the project level control file name
# - by default, set to build/maketpf.cntl under the first TPF_ROOT or APPL_ROOT
# if not specified below and the default is not found, the project level
# control file is ignored
################################################################################

# MAKETPF_PRJ_CNTL := /home/user/myprj/build/maketpf.cntl

################################################################################
# Define whether or not to have maketpf search tpf.cntl for program names
# - can improve performance to not search tpf.cntl when processing APPs only
# - the default is YES
################################################################################

# MAKETPF_USE_TPF_CNTL := NO

################################################################################
# Define whether or not to have maketpf search usr.cntl for program names
# - can improve performance to not search usr.cntl when processing TPF
#   system programs only.
# - the default is YES
# If APPL_ROOT is not defined, usr.cntl is automatically omitted from the
# search, as programs in usr.cntl will require APPL_ROOT.
################################################################################

# MAKETPF_USE_USR_CNTL := NO
MAKETPF_USE_USR_CNTL := YES

################################################################################
# Define whether or not to have maketpf search the project level control file
# (given by MAKETPF_PRJ_CNTL) for program names.
# - the default is YES
# To minimize the time required to look up program names,
# set up a project level control file with all programs needed for a
# project build, and setting USE_TPF_CNTL and USE_USR_CNTL both to NO
################################################################################

# MAKETPF_USE_PRJ_CNTL := NO

################################################################################
# Define assemble/compile option temporary overrides
# - The FLAGS_USER variables are used for assemblies, compiles, and links
#   on both the Linux and on z/OS platforms.
# - The format of how the options are specified and the actual options that
#   are supported on each platform vary.
#   - As an example for HLASM, the OPTABLE(ZOP) option:
#     - On Linux: OPTABLE(ZOP)
#     - On z/OS:  -Wa,OPTABLE'(ZOP)'
# - If you want to use the same maketpf.cfg file on both platforms, you can
#   use the ifeq/else/endif syntax shown below to allow one set of flags to
#   be defined for each platform.
################################################################################

# Set Options for use on Linux

ifeq ($(shell uname -s),Linux)
################################################################################
# Define assemble/compile option overrides
################################################################################
ASMFLAGS_USER := RLD
ASMFLAGS_USER += XREF(SHORT)
ASMFLAGS_USER += FLAG(3,NOCONT,NOSUBSTR,USING0)
ASMFLAGS_USER += ASA
ASMFLAGS_USER += OPTABLE(ZS5)
ASMFLAGS_USER += MACHINE(ZSERIES-5,NOLIST)
ASMFLAGS_USER += SIZE(1000M)
ASMFLAGS_USER += SYSPARM(RES)
ASMFLAGS_USER += ADATA
LDFLAGS_USER :=

# Set Options for use on z/OS

else
CFLAGS_USER := -Wc,'FLAG(I)'
CXXFLAGS_USER := -Wc,'FLAG(I)'

ASMFLAGS_USER += -Wa,OPTABLE'(ZS5)'
ASMFLAGS_USER += -Wa,MACHINE'(ZSERIES-5,LIST)'
ASMFLAGS_USER += -Wa,SYSPARM'(RES)'

LDFLAGS_USER :=

#####
##  The following PLI options were received from IBM on 03/10/2016
#####
PLIFLAGS_USER := -q'OPTIMIZE=0'
PLIFLAGS_USER += -q'GONUMBER'
PLIFLAGS_USER += -q'OFFSET'
PLIFLAGS_USER += -q'NEST'
PLIFLAGS_USER += -q'NUMBER'
PLIFLAGS_USER += -q'OPTIONS'
PLIFLAGS_USER += -q'INSOURCE'
PLIFLAGS_USER += -q'MDECK'
PLIFLAGS_USER += -q'AGGREGATE(HEXADEC)'
PLIFLAGS_USER += -q'ATTRIBUTES(FULL)'
PLIFLAGS_USER += -q'CHECK(CONFORMANCE,STORAGE)'
PLIFLAGS_USER += -q'XREF(FULL)'
PLIFLAGS_USER += -q'PREFIX(NOSIZE)'
PLIFLAGS_USER += -q'NOT(''\\^'')'

# Linkage performance improvement for many externals
PLIFLAGS_USER += -q'EXTRN(SHORT)'

# This next group of options tries to ensure that a listing is generated
# whenever possible.
PLIFLAGS_USER += -q'LIST'
PLIFLAGS_USER += -q'COMPILE'
PLIFLAGS_USER += -q'MAXMSG(S,500)'
PLIFLAGS_USER += -q'PROCEED'
PLIFLAGS_USER += -q'SYNTAX'
PLIFLAGS_USER += -q'SEMANTIC'
PLIFLAGS_USER += -q'SOURCE'

# Uncomment the next line to have the compiler issue informational messages
# for things like comments or string spanning multiple lines.
# PLIFLAGS_USER += -q'FLAG(I)'

# Uncomment the next line to have the compiler flag the implicit declaration of
# variables.
# PLIFLAGS_USER += -q'RULES(NOLAXDCL)'

# Uncomment the next line to see the compiler source *after* the preprocessor
# runs. Note that any statement numbers referenced in compiler messages will
# correspond to the statements listed in the "Compiler Source" section of the
# listing, *not* to the statements listed in the "Preprocessor Source" section.
# PLIFLAGS_USER += -q'LISTVIEW(AFTERALL)'

endif

################################################################################
# Define whether or not to verify external references in link (LD) command
# - NO   - do not verify references
#          - libraries are not included in the link step:
#            the -l, -L options are omitted from the link command
# - LIBS - verify references
#          - issue warnings and continue when unresolved references are found
#          - the linked shared object is kept when unresolved references
#            are found
# - YES  - verify references
#          - issue an error and exit when unresolved references are found
#          - the linked shared object is deleted when unresolved references
#            are found
#          - this is the default value
################################################################################

# TPF_VERIFY_LINK_REFS := YES
TPF_VERIFY_LINK_REFS := LIBS

################################################################################
# Define whether or not to include local mods in the build (YES by default)
# and whether to search all local mod folders before all product folders,
# or search using interleaved local mod and product folders.
#  TPF_LOCAL_MOD_SEARCH_ORDER
#       - LM_FIRST     - Search all local_mod folder first (Default)
#       - INTERLEAVED  - Search using interleaved local_mod and product folders
################################################################################

# TPF_USE_LOCAL_MODS := YES
TPF_USE_LOCAL_MODS := YES
# TPF_LOCAL_MOD_SEARCH_ORDER := LM_FIRST
TPF_LOCAL_MOD_SEARCH_ORDER := INTERLEAVED

################################################################################
# Define the gdwarf level to be used for C/CPP compiles
# - default is 2
# - supported values are 0 (-gdwarf omitted), 2
################################################################################

# TPF_GDWARF_LEVEL := 2

################################################################################
# Define whether or not to run the tpfdb2ppl utility to convert .sqc source
# files to .c files as part of processing.  If set to know, existing .c files
# are used in place of the .sqc file
# - default is NO
# - can be YES or NO
################################################################################

# TPF_RUN_TPFDB2PPL := NO

################################################################################
# Define whether or not to run the tpfsochk post process utility is run
# against libXXXX.so files
# - default is YES
# - can be YES or NO
################################################################################

# TPF_RUN_TPFSOCHK := YES

################################################################################
# Define whether or not to run the readelf post process utility
# - default is YES
# - can be YES or NO
################################################################################

# TPF_RUN_READELF := YES

################################################################################
# Define whether or not to run the objdump post process utility
# - default is YES
# - can be YES or NO
################################################################################

# TPF_RUN_OBJDUMP := YES

################################################################################
# Define whether or not to keep the .adata output when assembling
# - default is NO
# - can be YES or NO
################################################################################

# TPF_KEEP_ADATA := NO

################################################################################
# Define whether or not to keep the .goff output when assembling
# - default is NO
# - can be YES or NO
################################################################################

# TPF_KEEP_GOFF := NO

################################################################################
# Define whether or not to run strip to remove the debug symbols in the app
# - default is NO
# - can be YES or NO
################################################################################

# TPF_RUN_STRIP := NO

################################################################################
# Define whether or not to keep listings for successful compiles and assemblies
# - default is YES
# - can be YES or NO
# - NO indicates listing is deleted if RC=0
################################################################################

# TPF_KEEP_LISTINGS := NO

################################################################################
# Define whether to continue processing on error
# - default is NO
# - can be YES or NO
# - Setting to YES is equivalent to the -k parameter on maketpf, bldtpf
# - Note:  if set to yes in the .cfg file there is no way to turn it off on
#          the command line
################################################################################

# MAKETPF_KEEP_GOING := NO

################################################################################
# Define default message output mode
# - default is VERBOSE
# - can be QUIET or VERBOSE
# - VERBOSE sends stdout to terminal and .out file, quiet send to .out only
# - Value is overridden by the -q parameter on maketpf, bldtpf
################################################################################

# MAKETPF_OUTPUT_MODE := VERBOSE
MAKETPF_OUTPUT_MODE := VERBOSE

################################################################################
# Define default message output level
# - default is I
# - can be P, I, W, E
#   - P issues all processing, info, warning, and error messages
#   - I issues all info, warning, and error messages
#   - W issues all warning and error messages
#   - E issues all error messages
################################################################################

MAKETPF_MSG_LEVEL := I

################################################################################
# Define default z/OS syslib for offline builds
################################################################################

# AS_SYSLIB=SYS1.MACLIB:SYS1.AMODGEN:SYS1.CEE.SCEEMAC

################################################################################
# Add the SALO ECHO option
# - YES - add -e $(LST_DIR)/salo_echo.out to salo invocation
# - NO  - do not add -e option (default)
################################################################################

# SALO_ECHO := NO

################################################################################
# Define face table generator (FCTBG) options:
# - PRINTFULL|PRINTDATABASE|PRINTSHORT
# - STOPERR|STOPWARNING
# - CC|NOCC|ONEFILE
# - NOINFO|NOERR|NOWARN
# - NOBIND|BIND
# The first value listed for each set is the default
################################################################################

# FCTBG_OPTS :=

################################################################################
# Define the load deck name to be created when running bldtpf or maketpf
# - by default, no name is defined and no loaddeck is created
# - if defined, the file specified is appended to with the loadable program
#   path/file name created during the maketpf or bldtpf run
################################################################################

# TPF_LOADDECK :=

################################################################################
# Define default settings for the loadtpf command
# - output file name, defaults to <userid>.oldr in directory loadtpf run from
# - loaddeck name, defaults to OLDR.load in directory loadtpf run from
# - loadset name, defaults to LOADTPF
# - reportfile name, OLDR.report in directory loadtpf run from
# - trace file name. by default a trace file is not created
#   when a name is specified
# - user data to be input. by default no user data is specified
# - target directory on TPF, defaults to /tmp
# - target TPF system IP address
# - target TPF system ftp port number
# - oldr or tldr load format (oldr is default)
# - tape volume/serial
# - dataset name written on the tape
# - expiration date for tape specified: yyyyddd
# - retention period in days for the tape specified: nnnn
# - temporary working directory used by offldr to create the load file
# Note, loadtpf parms specified on the command line will override these defaults
################################################################################

# LOADTPF_OUTFILE := $(MAKETPF_STARTDIR)/$(shell id -un).oldr

# LOADTPF_LOADDECK := $(MAKETPF_STARTDIR)/OLDR.load

# LOADTPF_LOADSET := LOADTPF

# LOADTPF_LOADSET_COMMENT := Loadset comment

# LOADTPF_REPORTFILE := $(MAKETPF_STARTDIR)/OLDR.report

# LOADTPF_TRACEFILE :=

# LOADTPF_USERDATA :=

# LOADTPF_DIR := /tmp

# If this format is used, no .netrc file is needed
#   On some systems userid and password can be "anonymous"

# LOADTPF_IP := ftp://userid:password@x.xx.xx.xxx

# If this format is used, a .netrc entry must be defined for
# the LOADTPF_USER login on the machine x.xx.xx.xxx

# LOADTPF_IP := x.xx.xx.xxx

# LOADTPF_USER :=  defaults to linux userid

# LOADTPF_FTP_PORT :=

# LOADTPF_LOADFORMAT :=

# LOADTPF_VOLSER :=

# LOADTPF_DSN :=

# LOADTPF_EXPDT :=

# LOADTPF_REPTD :=

# LOADTPF_WORKDIR :=

# LOADTPF_CHECK_UNRESOLVED :=

################################################################################
# Define the search algorithm to be used when locating programs for
# loader input files (can be FIND (default) or MAKEFILE)
################################################################################

# MAKETPF_LOADSEARCH :=

################################################################################
# Define whether or not to use dependency lists if specified in the makefiles
# - can be YES or NO
# - default is YES
################################################################################

# TPF_USE_DEPENDENCIES := YES

################################################################################
# Define default list of maketpf_envs to be used if assembling or compiling
# without a makefile
# - default is: base_rt system
################################################################################

maketpf_env_default := base_rt
maketpf_env_default += system

################################################################################
# Define optional list of maketpf_envs to be appended to maketpf_env list
# defined within the makefile
################################################################################

# maketpf_env_user :=
maketpf_env_user := respost

################################################################################
# Define overrides to the S390 default settings
################################################################################

# S390 system name
# Defaulted to tpfmvsxa.pok.ibm.com
# S390 :=
S390 := wspvs1.worldspan.com

# S390 directory where LIBS are to be put
# Defaulted to maketpf_lib under users home directory on USS
# Do not use the $HOME variable ... specify the actual path name
# S390LOADDIR :=

# S390 id
# Defaulted to the same as the users linux id
# S390USER :=
S390USER := TPFUSER

# Working directory used for HLASM assemblies
# Defaulted to maketpf_tmp under users home directoryon USS
# Do not use the $HOME variable ... specify the actual path name
# S390DIR :=

################################################################################
# Define the TPF APAR number being built
# - by default, no APAR number is used
# - If defined, the value specified is prepended to any TPFOBJPP_COMMENT
#   specified in the makefiles for the programs being built
################################################################################

# TPF_APARNUM :=

################################################################################
# Define the directory containing user created env files
# - the name of a directory containing user defined maketpf include files.
# - can be used to define new environment files maketpf.env_ or specify
#   overrides to system level maketpf include files
################################################################################

# maketpf_user_includes :=

################################################################################
# Override for TSO DELETE Command
# - supported values: delete, bbsrmpds  (delete is the default)
#   - note for bbsrmpds, it must be available in the path
################################################################################

TPF_PDS_DELETE_CMD := delete

################################################################################
# Define the UMASK setting
# - defaults to 022 if not defined
################################################################################

# umask of 022 sets up 755 authority for derived files
MAKETPF_UMASK := 022
#MAKETPF_UMASK := 002
# umask of 002 sets up 775 authority for derived files

################################################################################
# Define whether or not to keep the temp working directory on error
# - defaults to NO
# - sometimes files contained within can be useful in debugging errors
################################################################################

# MAKETPF_KEEP_TMPDIR := NO
MAKETPF_KEEP_TMPDIR := NO

################################################################################
# Define how many programs to put in each stub library source file segment
# - defaults to 5000
################################################################################

# MAKETPF_STUB_LIMIT := 5000

################################################################################
# Define User Custom Symbol Table library name
# - defaults to UCST*
#   - First UCST or UCSTvv found in TPF_ROOT list is used
# - can specify an absolute pathname (/ztpf/v11/bss/load/UCSTvv.so)
# - can specify an library name with optional version (UCST, UCSTvv)
# - use the * to allow for a search of any version code
################################################################################

# MAKETPF_UCST_LIBRARY_NAME := UCST*

################################################################################
# Define the list of programs for which the UCST library should NOT be used
# when running tpfsym
# - defaults to UFML
# - always includes the program defined by MAKETPF_UCST_LIBRARY_NAME
# - Only list the program names as they appear in the makefiles (do not include
#   version strings)
# - when the default is overridden, it must explicitly list include all programs
#   that the UCST library must not be used on, including UFML, if appropriate
# - to exclude the default value and use the UCST library on ALL programs (other
#   than itself), specify the value:  OMIT_NONE
################################################################################

# MAKETPF_OMIT_UCST_LIBRARY_LIST := UFML

################################################################################
# Define the cross compiler to be used
# - Default is REDHAT
# - Can be REDHAT or DIGNUS
# - Additional variables _COMPILER_C, _COMPILER_CXX, _LINKER provided for
#   problem determination, can be REDHAT or DIGNUS, default to value of
#   _COMPILER
################################################################################

# MAKETPF_COMPILER := REDHAT
# MAKETPF_COMPILER_C := REDHAT
# MAKETPF_COMPILER_CXX := REDHAT
# MAKETPF_LINKER := REDHAT

################################################################################
# Define the REDHAT version to be used
# - must be one of the supported versions:  41, 46
# - If no value is specified, the version is determined by running
#   tpf-gcc -v, which will resolve to the first tpf-gcc command found
#   within the PATH.
# - Conversely, if a version is specified, it must match the version defined
#   by the PATH, TPF_X_GCC, TPF_X_LIBS, and TPF_INFO environment variable
#   settings. These can be configured through the Linux profile settings
#   or through customization of the file named:
#      tpftools/include_ztpf/maketpf.rules_cfg_REDHAT
#   See the prolog of that file for additional information.
################################################################################

# TPFGCC_VERSION :=
TPFGCC_VERSION := 46

################################################################################
# Define the Dignus version to be used
# - this variable is included for consistency with TPFGCC_VERSION variable,
#   however no specific list of versions of the tpf-dcc compiler is defined.
# - If no value is specified, the version is determined by running dcc -v,
#   which will resolve to the first tpf-dcc command defined within the PATH.
# - This variable should  not be set unless customization has been done to
#   the file named:
#      tpftools/include_ztpf/maketpf.rules_cfg_DIGNUS
#   to add support for specific versions of the DIGNUS compiler.
#   See the prolog of that file for additional information.
################################################################################

# TPFDCC_VERSION :=

################################################################################
# Define the native (Linux) GCC version to be used
# - must be one of the supported versions:  34, 40
# - If no value is specified, the version is determined by running
#   gcc -v, which will resolve to the first gcc command found
#   within the PATH.
# - Conversely, if a version is specified, it must match the version defined
#   by the PATH settings.
################################################################################

# GCC_VERSION :=

################################################################################
# Define whether maketpf should return RC 4 or RC 0 if only warnings are issued
# - YES -- return RC 4 if only warnings generated (this is the default)
# - NO  -- return RC 0 if only warnings generated
################################################################################

# MAKETPF_WARN_FLAG := YES

################################################################################
# Define whether bldtpf -sip, -fctb_src, and -fctb should produce all
# generated files, or only those that differ from the existing versions
# of the same files
# - ALL -- build all files (this is the default)
# - CHANGED -- build only the sip files differ from the ones that
#              already exist in the TPF_ROOT list
################################################################################

# MAKETPF_GEN_SIP_FILES := ALL

################################################################################
# Define whether the level of audit to be performed on the directories
# listed in the TPF_ROOT and APPL_ROOT lists
# - ERROR   -- Verify the first directory listed in TPF_ROOT and APPL_ROOT
#              exists.  If it does not error and exit.  If it does exist,
#              verify all other directories listed exist.  If any do not exist,
#              issue a warning, but continue processing.
#              This is the default.
# - WARNING -- Verify all directories listed in the TPF_ROOT and APPL_ROOT
#              exist.  if any do not exist, issue a warning, but continue
#              processing.
# - NONE    -- No audit is performed
################################################################################

# MAKETPF_ROOT_AUDIT := ERROR

################################################################################
# Define a list of program names that "EVENTS" processing should NOT be run for
# when the build is initiated from the TPF Toolkit
# - the names in the list must match the case of the name coded in the makefile
################################################################################

# MAKETPF_TOOLKIT_NO_EVENTS_PGMS :=

################################################################################
# Define a directory to be used as the output directory specified to the
# tpfdfdlgen utility, invoked by the "dfdl" target in maketpf.
# - an absolute pathname must be specified.
# - if not specified, the default value is the <sys>/dfdlgen folder
#   under the first TPF_ROOT directory specified.
################################################################################

# TPF_DFDL_DIR :=

TPF_JAVA_HOME:=/usr/lib/jvm/java-1.8.0-ibm-1.8.0.4.0-1jpp.1.el7.s390x

