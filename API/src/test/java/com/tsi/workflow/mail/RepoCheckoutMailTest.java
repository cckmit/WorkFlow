/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 09 05:31:35 GMT 2018
 */

package com.tsi.workflow.mail;

import static org.junit.Assert.*;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.junit.Test;

public class RepoCheckoutMailTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	LinkedList<String> linkedList0 = new LinkedList<String>();
	repoCheckoutMail0.setRemovedOwnerDisplayName(linkedList0);
	repoCheckoutMail0.processMessage();
	assertEquals("null: Package owner updates", repoCheckoutMail0.getSubject());
	assertEquals("  has been removed as a package owner of  null package.", repoCheckoutMail0.getMessage());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	LinkedList<String> linkedList0 = new LinkedList<String>();
	repoCheckoutMail0.setIsNewOwnerUpdate(true);
	repoCheckoutMail0.setNewOwnerDisplayName(linkedList0);
	assertTrue(repoCheckoutMail0.getIsNewOwnerUpdate());

	repoCheckoutMail0.processMessage();
	assertEquals("  has been added as a package owner for  null package.", repoCheckoutMail0.getMessage());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	repoCheckoutMail0.setDescUpdate(true);
	boolean boolean0 = repoCheckoutMail0.isDescUpdate();
	assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	repoCheckoutMail0.setRepoName("{0}: Package description updates");
	String string0 = repoCheckoutMail0.getRepoName();
	assertEquals("{0}: Package description updates", string0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	LinkedList<String> linkedList0 = new LinkedList<String>();
	repoCheckoutMail0.setRemovedOwnerDisplayName(linkedList0);
	List<String> list0 = repoCheckoutMail0.getRemovedOwnerDisplayName();
	assertFalse(list0.contains("authenticator"));
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	LinkedList<String> linkedList0 = new LinkedList<String>();
	linkedList0.add((String) null);
	repoCheckoutMail0.setRemovedOwnerDisplayName(linkedList0);
	List<String> list0 = repoCheckoutMail0.getRemovedOwnerDisplayName();
	assertFalse(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	Collection<String> collection0 = repoCheckoutMail0.getNewOwnerList();
	repoCheckoutMail0.setNewOwnerList(collection0);
	Collection<String> collection1 = repoCheckoutMail0.getNewOwnerList();
	assertSame(collection1, collection0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	LinkedList<String> linkedList0 = new LinkedList<String>();
	linkedList0.add("I&I,$fB}");
	repoCheckoutMail0.setNewOwnerDisplayName(linkedList0);
	List<String> list0 = repoCheckoutMail0.getNewOwnerDisplayName();
	assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	repoCheckoutMail0.setIsNewOwnerUpdate(true);
	boolean boolean0 = repoCheckoutMail0.getIsNewOwnerUpdate();
	assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	repoCheckoutMail0.setDescription("PtO'@Z'");
	String string0 = repoCheckoutMail0.getDescription();
	assertEquals("PtO'@Z'", string0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	repoCheckoutMail0.setDescription("");
	String string0 = repoCheckoutMail0.getDescription();
	assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	repoCheckoutMail0.setDescUpdate(true);
	assertTrue(repoCheckoutMail0.isDescUpdate());

	repoCheckoutMail0.processMessage();
	assertEquals("null: Package description updates", repoCheckoutMail0.getSubject());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	repoCheckoutMail0.setIsNewOwnerUpdate(true);
	// Undeclared exception!
	try {
	    repoCheckoutMail0.processMessage();
	    fail("Expecting exception: NullPointerException");

	} catch (NullPointerException e) {
	}
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	LinkedList<String> linkedList0 = new LinkedList<String>();
	repoCheckoutMail0.setRemovedOwnerList(linkedList0);
	Collection<String> collection0 = repoCheckoutMail0.getRemovedOwnerList();
	assertFalse(collection0.contains("authenticator"));
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	boolean boolean0 = repoCheckoutMail0.isDescUpdate();
	assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	String string0 = repoCheckoutMail0.getRepoName();
	assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	String string0 = repoCheckoutMail0.getDescription();
	assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	List<String> list0 = repoCheckoutMail0.getRemovedOwnerDisplayName();
	assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	Collection<String> collection0 = repoCheckoutMail0.getRemovedOwnerList();
	assertNull(collection0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	boolean boolean0 = repoCheckoutMail0.getIsNewOwnerUpdate();
	assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	LinkedList<String> linkedList0 = new LinkedList<String>();
	repoCheckoutMail0.setNewOwnerDisplayName(linkedList0);
	List<String> list0 = repoCheckoutMail0.getNewOwnerDisplayName();
	assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	repoCheckoutMail0.setRepoName("");
	String string0 = repoCheckoutMail0.getRepoName();
	assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	Collection<String> collection0 = repoCheckoutMail0.getNewOwnerList();
	assertNull(collection0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
	RepoCheckoutMail repoCheckoutMail0 = new RepoCheckoutMail();
	List<String> list0 = repoCheckoutMail0.getNewOwnerDisplayName();
	assertNull(list0);
    }
}
