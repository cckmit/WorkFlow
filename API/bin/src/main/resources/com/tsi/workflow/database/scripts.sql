CREATE TABLE activity_log ( id SERIAL PRIMARY KEY, imp_id text, plan_id text, log_level text, message text, created_dt timestamp without time zone, created_by character varying(50), modified_dt timestamp without time zone, modified_by character varying(50), active character varying(1) );
CREATE TABLE build ( id SERIAL PRIMARY KEY, system_id integer, plan_id text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, build_type character varying(10), load_set_type character varying(10), jenkins_url text, build_status character varying(20), job_status character varying(1), build_number integer, build_date_time timestamp without time zone );
CREATE TABLE checkout_segments ( id SERIAL PRIMARY KEY, imp_id text, plan_id text, program_name text, repo_desc text, commit_id text, author_name text, author_mail_id text, committer_name text, committer_mail_id text, commit_date_time timestamp without time zone, subject text, func_area text, target_system text, status character varying(1), source_url text, prod_flag character varying(10), file_name text, file_hash_code text, file_type text, created_dt timestamp without time zone, created_by character varying(50), modified_dt timestamp without time zone, modified_by character varying(50), active character varying(1), system_load integer, review_status boolean, common_file boolean, ref_load_date timestamp without time zone, ref_status text, ref_plan text );
CREATE TABLE dbcr ( id SERIAL PRIMARY KEY, system_id integer, plan_id text, dbcr_name character varying(10), environment character varying(10), active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, status character varying(10), mandatory character varying(1) );
CREATE TABLE imp_plan ( id TEXT PRIMARY KEY, plan_desc text, approver text, project_id integer, load_type character varying(10), load_attendee character varying(50), lead_id text, lead_contact character varying(12), cls_comment text, sdm_tkt_num text, related_plans text, oth_contact character varying(20), mgmt_comment text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), plan_status text, prod_ver text, process_id character varying(10), dev_manager text, approve_date_time timestamp without time zone, accepted_date_time timestamp without time zone, fallback_date_time timestamp without time zone, lead_name text, dev_manager_name text, approver_name text, delegate_id text, delegate_name text, macro_header boolean, dev_mgr_comment text, qa_bypass_status text, dev_mgr_approve_date_time timestamp without time zone );
CREATE TABLE imp_plan_approvals ( id SERIAL PRIMARY KEY, plan_id text, approval_type text, approved_by text, comments text, file_name text, created_dt timestamp without time zone, created_by character varying(50), modified_dt timestamp without time zone, modified_by character varying(50), active character varying(1) );
CREATE TABLE implementation ( id TEXT PRIMARY KEY, plan_id text, dev_name text, dev_contact text, dev_location text, imp_desc text, tkt_num text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), peer_review text, peer_reviewers text, prod_ver text, dbcr_ref text, imp_status text, process_id character varying(10), substatus text, reassign_flag character varying(10), tkt_url text, checkin_date_time timestamp without time zone, pr_tkt_num text, dev_id text, peer_reviewers_name text, is_checkin boolean, last_checkin_status character varying(1), bypass_peer_review boolean );
CREATE TABLE legacy_fallback_plan ( id SERIAL PRIMARY KEY, load_date_time character varying(50), plan_id character varying(25), program_name character varying(25), target_system character varying(25), func_area character varying(25), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1) );
CREATE TABLE load_categories ( id SERIAL PRIMARY KEY, system_id integer, name character varying(1), description text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1) );
CREATE TABLE load_freeze ( id SERIAL PRIMARY KEY, load_category_id integer, reason text, from_date timestamp without time zone, to_date timestamp without time zone, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1) );
CREATE TABLE load_window ( id SERIAL PRIMARY KEY, load_category_id integer, days_of_week character varying(3), time_slot time without time zone, created_dt timestamp without time zone, created_by character varying(50), modified_dt timestamp without time zone, modified_by character varying(50), active character varying(1) );
CREATE TABLE pddds_library ( id SERIAL PRIMARY KEY, system_id integer, type text, name text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone );
CREATE TABLE platform ( id SERIAL PRIMARY KEY, name text, nick_name character varying(5), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1) );
CREATE TABLE pre_production_loads ( id SERIAL PRIMARY KEY, plan_id text, system_id integer, cpu_id integer, system_load_id integer, status text, activated_date_time timestamp without time zone, de_activated_date_time timestamp without time zone, last_action_status text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone );
CREATE TABLE production_loads ( id SERIAL PRIMARY KEY, plan_id text, system_id integer, system_load_id integer, status text, activated_date_time timestamp without time zone, de_activated_date_time timestamp without time zone, last_action_status text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, cpu_id integer, fallback_activated_date_time timestamp without time zone, fallback_de_activated_date_time timestamp without time zone );
CREATE TABLE project ( id SERIAL PRIMARY KEY, project_number text, project_name text, line_of_business text, manager_id text, sponsor_id text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), is_delta boolean DEFAULT false );
CREATE TABLE put_level ( id SERIAL PRIMARY KEY, system_id integer, put_level character varying(10), put_date_time timestamp without time zone, scm_url text, active character varying(1), created_by character varying(50), modified_by character varying(50), created_dt timestamp without time zone, modified_dt timestamp without time zone );
CREATE TABLE system ( id SERIAL PRIMARY KEY, platform_id integer, name character varying(10), ipaddress text, portno integer, defalut_put_level integer, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), loadset_name_prefix character varying(1), default_prod_cpu integer, default_native_cpu integer, default_pre_prod_cpu integer );
CREATE TABLE system_cpu ( id SERIAL PRIMARY KEY, system_id integer, cpu_name character varying(25), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), primary_ip_address text, secondary_ip_address text, cpu_type text, display_name character varying(25), cpu_code character varying(25) );
CREATE TABLE system_load ( id SERIAL PRIMARY KEY, plan_id text, system_id integer, load_category_id integer, load_scr text, preload text, preload_desc text, flbk_scr text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), load_attendee text, preload_just text, load_scr_desc text, flbk_scr_desc text, load_date_time timestamp without time zone, put_level_id integer, dsl_update character varying(1), load_set_name character varying(25), fallback_load_set_name character varying(25), prod_load_status text, load_instruction text, qa_functional_bypass_comment text, qa_regression_bypass_comment text, qa_bypass_status text, load_attendee_id text );
CREATE TABLE system_load_actions ( id SERIAL PRIMARY KEY, plan_id text, system_id integer, system_load_id integer, vpar_id integer, status text, activated_date_time timestamp without time zone, de_activated_date_time timestamp without time zone, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, last_action_status text, test_status text );
CREATE TABLE system_pddds_mapping ( id SERIAL PRIMARY KEY, plan_id text, system_load_id integer, pddds_library_id integer, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone );
CREATE TABLE user_settings ( id SERIAL PRIMARY KEY, name text, value text, user_id text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone );
CREATE TABLE vpars ( id SERIAL PRIMARY KEY, system_id integer, name character varying(10), ipaddress character varying(15), port character varying(4), type character varying(20), active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, owner_id text );
ALTER TABLE ONLY activity_log ADD CONSTRAINT activity_log_imp_id_fkey FOREIGN KEY (imp_id) REFERENCES implementation(id);
ALTER TABLE ONLY activity_log ADD CONSTRAINT activity_log_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY build ADD CONSTRAINT build_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY build ADD CONSTRAINT build_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY checkout_segments ADD CONSTRAINT checkout_segments_imp_id_fkey FOREIGN KEY (imp_id) REFERENCES implementation(id);
ALTER TABLE ONLY checkout_segments ADD CONSTRAINT checkout_segments_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY checkout_segments ADD CONSTRAINT checkout_segments_system_load_fkey FOREIGN KEY (system_load) REFERENCES system_load(id);
ALTER TABLE ONLY dbcr ADD CONSTRAINT dbcr_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY dbcr ADD CONSTRAINT dbcr_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY imp_plan_approvals ADD CONSTRAINT imp_plan_approvals_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY imp_plan ADD CONSTRAINT imp_plan_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(id);
ALTER TABLE ONLY implementation ADD CONSTRAINT implementation_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY load_categories ADD CONSTRAINT load_categories_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY load_freeze ADD CONSTRAINT load_freeze_load_category_id_fkey FOREIGN KEY (load_category_id) REFERENCES load_categories(id);
ALTER TABLE ONLY load_window ADD CONSTRAINT load_window_load_category_id_fkey FOREIGN KEY (load_category_id) REFERENCES load_categories(id);
ALTER TABLE ONLY pddds_library ADD CONSTRAINT pddds_library_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY pre_production_loads ADD CONSTRAINT pre_production_loads_cpu_id_fkey FOREIGN KEY (cpu_id) REFERENCES system_cpu(id);
ALTER TABLE ONLY pre_production_loads ADD CONSTRAINT pre_production_loads_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY pre_production_loads ADD CONSTRAINT pre_production_loads_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY pre_production_loads ADD CONSTRAINT pre_production_loads_system_load_id_fkey FOREIGN KEY (system_load_id) REFERENCES system_load(id);
ALTER TABLE ONLY production_loads ADD CONSTRAINT production_loads_cpu_id_fkey FOREIGN KEY (cpu_id) REFERENCES system_cpu(id);
ALTER TABLE ONLY production_loads ADD CONSTRAINT production_loads_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY production_loads ADD CONSTRAINT production_loads_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY production_loads ADD CONSTRAINT production_loads_system_load_id_fkey FOREIGN KEY (system_load_id) REFERENCES system_load(id);
ALTER TABLE ONLY put_level ADD CONSTRAINT put_level_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY system_cpu ADD CONSTRAINT system_cpu_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY system_load_actions ADD CONSTRAINT system_load_actions_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY system_load_actions ADD CONSTRAINT system_load_actions_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY system_load_actions ADD CONSTRAINT system_load_actions_system_load_id_fkey FOREIGN KEY (system_load_id) REFERENCES system_load(id);
ALTER TABLE ONLY system_load_actions ADD CONSTRAINT system_load_actions_vpar_id_fkey FOREIGN KEY (vpar_id) REFERENCES vpars(id);
ALTER TABLE ONLY system_load ADD CONSTRAINT system_load_load_category_id_fkey FOREIGN KEY (load_category_id) REFERENCES load_categories(id);
ALTER TABLE ONLY system_load ADD CONSTRAINT system_load_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY system_load ADD CONSTRAINT system_load_put_level_id_fkey FOREIGN KEY (put_level_id) REFERENCES put_level(id);
ALTER TABLE ONLY system_load ADD CONSTRAINT system_load_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
ALTER TABLE ONLY system_pddds_mapping ADD CONSTRAINT system_pddds_mapping_pddds_library_id_fkey FOREIGN KEY (pddds_library_id) REFERENCES pddds_library(id);
ALTER TABLE ONLY system_pddds_mapping ADD CONSTRAINT system_pddds_mapping_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES imp_plan(id);
ALTER TABLE ONLY system_pddds_mapping ADD CONSTRAINT system_pddds_mapping_system_load_id_fkey FOREIGN KEY (system_load_id) REFERENCES system_load(id);
ALTER TABLE ONLY system ADD CONSTRAINT system_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES platform(id);
ALTER TABLE ONLY vpars ADD CONSTRAINT vpars_system_id_fkey FOREIGN KEY (system_id) REFERENCES system(id);
CREATE VIEW load_freeze_date AS SELECT CURRENT_DATE + i AS date, b.system_id , count(b.system_id) AS category_count FROM load_freeze a, load_categories b, generate_series(1, 365) i WHERE CURRENT_DATE + i BETWEEN date_trunc('day',a.from_date) AND date_trunc('day', a.to_date) + interval '1 day' - interval '1 second' AND a.active LIKE 'Y' AND a.load_category_id = b.id AND b.active LIKE 'Y' GROUP BY b.system_id, i ORDER BY 1,3;
CREATE VIEW load_window_date AS SELECT CURRENT_DATE + i AS date, b.id as load_category_id FROM load_categories b, generate_series(1, 365) i WHERE b.active = 'Y' AND to_char(CURRENT_DATE + i,'Dy') not in (SELECT days_of_week FROM load_window WHERE load_category_id = b.id AND active = 'Y') ORDER BY 1,2;
CREATE OR REPLACE VIEW load_freeze_group AS SELECT array_to_string(array_agg(a.id), ','::text) AS ids, c.name, array_to_string(array_agg(b.name), ','::text) AS load_categories, a.reason, a.from_date, a.to_date, array_to_string(array_agg(a.load_category_id), ','::text) AS loadcategoryid, b.system_id AS systemid FROM load_freeze a, load_categories b, system c WHERE a.load_category_id = b.id AND c.id = b.system_id AND a.active::text = 'Y'::text AND b.active::text = 'Y'::text GROUP BY a.reason, a.from_date, a.to_date, c.id, b.system_id;
INSERT INTO platform (id, name, nick_name, created_by, created_dt, modified_by, modified_dt, active) VALUES (1, 'Travelport', 'tp', 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y');
INSERT INTO platform (id, name, nick_name, created_by, created_dt, modified_by, modified_dt, active) VALUES (2, 'Delta', 'dl', 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y');
INSERT INTO system (id, platform_id, name, ipaddress, portno, defalut_put_level, created_by, created_dt, modified_by, modified_dt, active, loadset_name_prefix, default_prod_cpu, default_native_cpu, default_pre_prod_cpu) VALUES (5, 2, 'RES', '@@TD_BOX_1@@', 22, 5, 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y', 'R', NULL, NULL, NULL);
INSERT INTO system (id, platform_id, name, ipaddress, portno, defalut_put_level, created_by, created_dt, modified_by, modified_dt, active, loadset_name_prefix, default_prod_cpu, default_native_cpu, default_pre_prod_cpu) VALUES (6, 2, 'OSS', '@@TD_BOX_1@@', 22, 6, 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y', 'O', NULL, NULL, NULL);
INSERT INTO system (id, platform_id, name, ipaddress, portno, defalut_put_level, created_by, created_dt, modified_by, modified_dt, active, loadset_name_prefix, default_prod_cpu, default_native_cpu, default_pre_prod_cpu) VALUES (7, 2, 'AIR', '@@TD_BOX_1@@', 22, 7, 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y', 'H', NULL, NULL, NULL);
INSERT INTO system (id, platform_id, name, ipaddress, portno, defalut_put_level, created_by, created_dt, modified_by, modified_dt, active, loadset_name_prefix, default_prod_cpu, default_native_cpu, default_pre_prod_cpu) VALUES (1, 1, 'APO', '@@TD_BOX_3@@', 22, 1, 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y', 'A', NULL, NULL, NULL);
INSERT INTO system (id, platform_id, name, ipaddress, portno, defalut_put_level, created_by, created_dt, modified_by, modified_dt, active, loadset_name_prefix, default_prod_cpu, default_native_cpu, default_pre_prod_cpu) VALUES (2, 1, 'PRE', '@@TD_BOX_3@@', 22, 2, 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y', 'E', NULL, NULL, NULL);
INSERT INTO system (id, platform_id, name, ipaddress, portno, defalut_put_level, created_by, created_dt, modified_by, modified_dt, active, loadset_name_prefix, default_prod_cpu, default_native_cpu, default_pre_prod_cpu) VALUES (3, 1, 'PGR', '@@TD_BOX_3@@', 22, 3, 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y', 'P', NULL, NULL, NULL);
INSERT INTO system (id, platform_id, name, ipaddress, portno, defalut_put_level, created_by, created_dt, modified_by, modified_dt, active, loadset_name_prefix, default_prod_cpu, default_native_cpu, default_pre_prod_cpu) VALUES (4, 1, 'WSP', '@@TD_BOX_2@@', 22, 4, 'MTPService', '2017-01-01 10:00:00', NULL, '2017-01-01 10:00:00', 'Y', 'G', NULL, NULL, NULL);
ALTER TABLE imp_plan ALTER COLUMN oth_contact TYPE varchar(100);
ALTER TABLE system_load_actions ADD COLUMN is_auto_deploy BOOLEAN default false;
ALTER TABLE implementation ADD COLUMN reviewers_done TEXT;
ALTER TABLE system_load_actions ADD COLUMN dsl_update character varying(1) default 'N';
UPDATE system_cpu SET display_name = cpu_name WHERE cpu_type IN ('PRE_PROD_TOS','PRODUCTION');
ALTER TABLE checkout_segments ALTER COLUMN review_status SET DEFAULT false;
UPDATE checkout_segments SET review_status = false WHERE review_status IS NULL;
ALTER TABLE imp_plan ADD COLUMN load_date_mail_flag BOOLEAN default false;
ALTER TABLE vpars ADD COLUMN tss_deploy BOOLEAN default false;
ALTER TABLE pre_production_loads ADD COLUMN system_load_action_id integer;
ALTER TABLE pre_production_loads ADD CONSTRAINT pre_production_loads_system_load_action_id_fkey FOREIGN KEY (system_load_action_id) REFERENCES system_load_actions(id);
ALTER TABLE system_load ADD COLUMN special_instruction_qa TEXT;
ALTER TABLE system_load ADD COLUMN qa_functional_testers TEXT;
ALTER TABLE imp_plan ADD COLUMN aux_type BOOLEAN default false;
CREATE TABLE checkout_segments_history ( id integer , imp_id text, plan_id text, program_name text, repo_desc text, commit_id text, author_name text, author_mail_id text, committer_name text, committer_mail_id text, commit_date_time timestamp without time zone, subject text, func_area text, target_system text, status character varying(1), source_url text, prod_flag character varying(10), file_name text, file_hash_code text, file_type text, created_dt timestamp without time zone, created_by character varying(50), modified_dt timestamp without time zone, modified_by character varying(50), active character varying(1), system_load integer, review_status boolean DEFAULT false, common_file boolean, ref_load_date timestamp without time zone, ref_status text, ref_plan text );
CREATE TABLE dbcr_history ( id integer , system_id integer, plan_id text, dbcr_name character varying(10), environment character varying(10), active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, status character varying(10), mandatory character varying(1) );
CREATE TABLE imp_plan_history ( id TEXT , plan_desc text, approver text, project_id integer, load_type character varying(10), load_attendee character varying(50), lead_id text, lead_contact character varying(12), cls_comment text, sdm_tkt_num text, related_plans text, oth_contact character varying(100), mgmt_comment text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), plan_status text, prod_ver text, process_id character varying(10), dev_manager text, approve_date_time timestamp without time zone, accepted_date_time timestamp without time zone, fallback_date_time timestamp without time zone, lead_name text, dev_manager_name text, approver_name text, delegate_id text, delegate_name text, macro_header boolean, dev_mgr_comment text, qa_bypass_status text, dev_mgr_approve_date_time timestamp without time zone, load_date_mail_flag boolean DEFAULT false );
CREATE TABLE imp_plan_approvals_history ( id integer , plan_id text, approval_type text, approved_by text, comments text, file_name text, created_dt timestamp without time zone, created_by character varying(50), modified_dt timestamp without time zone, modified_by character varying(50), active character varying(1) );
CREATE TABLE implementation_history ( id TEXT , plan_id text, dev_name text, dev_contact text, dev_location text, imp_desc text, tkt_num text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), peer_review text, peer_reviewers text, prod_ver text, dbcr_ref text, imp_status text, process_id character varying(10), substatus text, reassign_flag character varying(10), tkt_url text, checkin_date_time timestamp without time zone, pr_tkt_num text, dev_id text, peer_reviewers_name text, is_checkin boolean, last_checkin_status character varying(1), bypass_peer_review boolean, reviewers_done text );
CREATE TABLE legacy_fallback_plan_history ( id integer , load_date_time character varying(50), plan_id character varying(25), program_name character varying(25), target_system character varying(25), func_area character varying(25), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1) );
CREATE TABLE load_categories_history ( id integer , system_id integer, name character varying(1), description text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1) );
CREATE TABLE load_freeze_history ( id integer , load_category_id integer, reason text, from_date timestamp without time zone, to_date timestamp without time zone, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1) );
CREATE TABLE pddds_library_history ( id integer , system_id integer, type text, name text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone );
CREATE TABLE platform_history ( id integer , name text, nick_name character varying(5), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1) );
CREATE TABLE pre_production_loads_history ( id integer , plan_id text, system_id integer, cpu_id integer, system_load_id integer, status text, activated_date_time timestamp without time zone, de_activated_date_time timestamp without time zone, last_action_status text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, system_load_action_id integer );
CREATE TABLE production_loads_history ( id integer , plan_id text, system_id integer, system_load_id integer, status text, activated_date_time timestamp without time zone, de_activated_date_time timestamp without time zone, last_action_status text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, cpu_id integer, fallback_activated_date_time timestamp without time zone, fallback_de_activated_date_time timestamp without time zone );
CREATE TABLE put_level_history ( id integer , system_id integer, put_level character varying(10), put_date_time timestamp without time zone, scm_url text, active character varying(1), created_by character varying(50), modified_by character varying(50), created_dt timestamp without time zone, modified_dt timestamp without time zone );
CREATE TABLE system_history ( id integer , platform_id integer, name character varying(10), ipaddress text, portno integer, defalut_put_level integer, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), loadset_name_prefix character varying(1), default_prod_cpu integer, default_native_cpu integer, default_pre_prod_cpu integer );
CREATE TABLE system_cpu_history ( id integer , system_id integer, cpu_name character varying(25), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, active character varying(1), primary_ip_address text, secondary_ip_address text, cpu_type text, display_name character varying(25), cpu_code character varying(25) );
CREATE TABLE system_load_history ( id integer ,plan_id text,system_id integer,load_category_id integer,load_scr text,preload text, preload_desc text, flbk_scr text, created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50),  modified_dt timestamp without time zone, active character varying(1), load_attendee text, preload_just text, load_scr_desc text, flbk_scr_desc text, load_date_time timestamp without time zone, put_level_id integer, load_set_name character varying(25), fallback_load_set_name character varying(25), prod_load_status text, load_instruction text, qa_functional_bypass_comment text, qa_regression_bypass_comment text, qa_bypass_status text, load_attendee_id text, dsl_update character varying(1));
CREATE TABLE system_load_actions_history ( id integer , plan_id text, system_id integer, system_load_id integer, vpar_id integer, status text, activated_date_time timestamp without time zone, de_activated_date_time timestamp without time zone, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, last_action_status text, test_status text, is_auto_deploy boolean DEFAULT false, dsl_update character varying(1) DEFAULT 'N'::character varying );
CREATE TABLE system_pddds_mapping_history ( id integer , plan_id text, system_load_id integer, pddds_library_id integer, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone );
CREATE TABLE vpars_history ( id integer , system_id integer, name character varying(10), ipaddress character varying(15), port character varying(4), type character varying(20), active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, owner_id text, tss_deploy boolean DEFAULT false );
ALTER TABLE system_load_history ADD COLUMN special_instruction_qa TEXT;
ALTER TABLE system_load_history ADD COLUMN qa_functional_testers TEXT;
ALTER TABLE imp_plan_history ADD COLUMN aux_type BOOLEAN default false;
create or replace function trigger_on_checkout_segments() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into checkout_segments_history select old.*; return old; else insert into checkout_segments_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_checkout_segments  before insert or update or delete on checkout_segments for each row execute procedure trigger_on_checkout_segments();
create or replace function trigger_on_dbcr() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into dbcr_history select old.*; return old; else insert into dbcr_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_dbcr  before insert or update or delete on dbcr for each row execute procedure trigger_on_dbcr();
create or replace function trigger_on_imp_plan() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into imp_plan_history select old.*; return old; else insert into imp_plan_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_imp_plan  before insert or update or delete on imp_plan for each row execute procedure trigger_on_imp_plan();
create or replace function trigger_on_imp_plan_approvals() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into imp_plan_approvals_history select old.*; return old; else insert into imp_plan_approvals_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_imp_plan_approvals  before insert or update or delete on imp_plan_approvals for each row execute procedure trigger_on_imp_plan_approvals();
create or replace function trigger_on_implementation() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into implementation_history select old.*; return old; else insert into implementation_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_implementation  before insert or update or delete on implementation for each row execute procedure trigger_on_implementation();
create or replace function trigger_on_legacy_fallback_plan() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into legacy_fallback_plan_history select old.*; return old; else insert into legacy_fallback_plan_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_legacy_fallback_plan  before insert or update or delete on legacy_fallback_plan for each row execute procedure trigger_on_legacy_fallback_plan();
create or replace function trigger_on_load_categories() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into load_categories_history select old.*; return old; else insert into load_categories_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_load_categories  before insert or update or delete on load_categories for each row execute procedure trigger_on_load_categories();
create or replace function trigger_on_load_freeze() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into load_freeze_history select old.*; return old; else insert into load_freeze_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_load_freeze  before insert or update or delete on load_freeze for each row execute procedure trigger_on_load_freeze();
create or replace function trigger_on_pddds_library() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into pddds_library_history select old.*; return old; else insert into pddds_library_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_pddds_library  before insert or update or delete on pddds_library for each row execute procedure trigger_on_pddds_library();
create or replace function trigger_on_platform() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into platform_history select old.*; return old; else insert into platform_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_platform  before insert or update or delete on platform for each row execute procedure trigger_on_platform();
create or replace function trigger_on_pre_production_loads() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into pre_production_loads_history select old.*; return old; else insert into pre_production_loads_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_pre_production_loads  before insert or update or delete on pre_production_loads for each row execute procedure trigger_on_pre_production_loads();
create or replace function trigger_on_production_loads() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into production_loads_history select old.*; return old; else insert into production_loads_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_production_loads  before insert or update or delete on production_loads for each row execute procedure trigger_on_production_loads();
create or replace function trigger_on_put_level() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into put_level_history select old.*; return old; else insert into put_level_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_put_level  before insert or update or delete on put_level for each row execute procedure trigger_on_put_level();
create or replace function trigger_on_system() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into system_history select old.*; return old; else insert into system_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_system  before insert or update or delete on system for each row execute procedure trigger_on_system();
create or replace function trigger_on_system_cpu() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into system_cpu_history select old.*; return old; else insert into system_cpu_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_system_cpu  before insert or update or delete on system_cpu for each row execute procedure trigger_on_system_cpu();
create or replace function trigger_on_system_load() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into system_load_history select old.*; return old; else insert into system_load_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_system_load  before insert or update or delete on system_load for each row execute procedure trigger_on_system_load();
create or replace function trigger_on_system_load_actions() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into system_load_actions_history select old.*; return old; else insert into system_load_actions_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_system_load_actions  before insert or update or delete on system_load_actions for each row execute procedure trigger_on_system_load_actions();
create or replace function trigger_on_system_pddds_mapping() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into system_pddds_mapping_history select old.*; return old; else insert into system_pddds_mapping_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_system_pddds_mapping  before insert or update or delete on system_pddds_mapping for each row execute procedure trigger_on_system_pddds_mapping();
create or replace function trigger_on_vpars() returns trigger language plpgsql as $function$ begin if tg_op = 'DELETE' then insert into vpars_history select old.*; return old; else insert into vpars_history select new.*; return new; end if; end; $function$;
create trigger trigger_on_vpars  before insert or update or delete on vpars for each row execute procedure trigger_on_vpars();
CREATE OR replace VIEW prod_segment_based_action_view AS ( SELECT impplan.id AS id, LOAD.id AS loadid, sys.id AS sysid, pre.id AS preid, seg.id AS segid, imp.id AS impid, cat.id AS catid, impplan.plan_desc AS plandesc, impplan.load_type AS loadtype, impplan.lead_id AS leadid, impplan.active AS impplanactive, impplan.plan_status AS planstatus, impplan.fallback_date_time AS fallbackdatetime, impplan.lead_name AS leadname, impplan.dev_manager_name devmanagername, LOAD.active AS loadactive, LOAD.load_set_name AS loadsetname, LOAD.fallback_load_set_name AS fallbackloadsetname, LOAD.load_attendee AS loadattendee, sys.platform_id AS platformid, sys.id AS systemid, sys.NAME AS sysname, seg.program_name AS programname, seg.repo_desc AS repodesc, seg.func_area AS funcarea, seg.target_system AS targetsystem, imp.dev_name AS devname, pre.status productionstatus, pre.last_action_status AS lastactionstatus, cat.NAME AS catname, pre.modified_dt AS modifieddate, LOAD.load_date_time AS loaddatetime, imp.peer_reviewers_name AS peerreviewer, pro.project_number AS csrno, pro.project_name AS projectname, LOAD.qa_bypass_status AS qastatus, LOAD.load_instruction as loadinstruction FROM imp_plan impplan, system_load LOAD, system sys, production_loads_history pre, checkout_segments seg, implementation imp, load_categories cat, project pro WHERE LOAD.plan_id = impplan.id AND pre.plan_id = impplan.id AND sys.id = LOAD.system_id AND sys.id = pre.system_id AND seg.plan_id = impplan.id AND seg.system_load = LOAD.id AND imp.plan_id = impplan.id AND seg.imp_id = imp.id AND sys.NAME = seg.target_system AND cat.id = LOAD.load_category_id AND cat.system_id = LOAD.system_id AND impplan.project_id = pro.id AND imp.active='Y' AND impplan.active='Y' AND LOAD.active='Y' AND sys.active='Y' AND pre.active='Y' AND seg.active='Y' AND cat.active='Y' );
CREATE OR replace VIEW pre_prod_segment_based_action_view AS ( SELECT impplan.id AS id, LOAD.id AS loadid, sys.id AS sysid, pre.id AS preid, seg.id AS segid, imp.id AS impid, cat.id AS catid, impplan.plan_desc AS plandesc, impplan.load_type AS loadtype, impplan.lead_id AS leadid, impplan.active AS impplanactive, impplan.plan_status AS planstatus, impplan.fallback_date_time AS fallbackdatetime, impplan.lead_name AS leadname, impplan.dev_manager_name devmanagername, LOAD.active AS loadactive, LOAD.load_set_name AS loadsetname, LOAD.fallback_load_set_name AS fallbackloadsetname, LOAD.load_attendee AS loadattendee, sys.platform_id AS platformid, sys.id AS systemid, sys.NAME AS sysname, seg.program_name AS programname, seg.repo_desc AS repodesc, seg.func_area AS funcarea, seg.target_system AS targetsystem, imp.dev_name AS devname, pre.status productionstatus, pre.last_action_status AS lastactionstatus, cat.NAME AS catname, pre.modified_dt AS modifieddate, LOAD.load_date_time AS loaddatetime, imp.peer_reviewers_name AS peerreviewer, pro.project_number AS csrno, pro.project_name AS projectname, LOAD.qa_bypass_status AS qastatus, LOAD.load_instruction as loadinstruction FROM imp_plan impplan, system_load LOAD, system sys, pre_production_loads_history pre, checkout_segments seg, implementation imp, load_categories cat, project pro WHERE LOAD.plan_id = impplan.id AND pre.plan_id = impplan.id AND sys.id = LOAD.system_id AND sys.id = pre.system_id AND seg.plan_id = impplan.id AND seg.system_load = LOAD.id AND imp.plan_id = impplan.id AND seg.imp_id = imp.id AND sys.NAME = seg.target_system AND cat.id = LOAD.load_category_id AND cat.system_id = LOAD.system_id AND impplan.project_id = pro.id AND imp.active='Y' AND impplan.active='Y' AND LOAD.active='Y' AND sys.active='Y' AND pre.active='Y' AND seg.active='Y' AND cat.active='Y' );
ALTER TABLE legacy_fallback_plan ADD COLUMN devops_plan TEXT;
ALTER TABLE legacy_fallback_plan_history ADD COLUMN devops_plan TEXT;
ALTER TABLE put_level ADD COLUMN starting_sequence TEXT;
ALTER TABLE put_level ADD COLUMN ending_sequence TEXT;
ALTER TABLE put_level ADD COLUMN owner_ids TEXT;
ALTER TABLE put_level ADD COLUMN owner_names TEXT;
ALTER TABLE put_level ADD COLUMN status TEXT;
ALTER TABLE put_level_history ADD COLUMN starting_sequence TEXT;
ALTER TABLE put_level_history ADD COLUMN ending_sequence TEXT;
ALTER TABLE put_level_history ADD COLUMN owner_ids TEXT;
ALTER TABLE put_level_history ADD COLUMN owner_names TEXT;
ALTER TABLE put_level_history ADD COLUMN status TEXT;
ALTER TABLE system_load ADD COLUMN qa_functional_tester_name TEXT;
ALTER TABLE system_load_history ADD COLUMN qa_functional_tester_name TEXT;
ALTER TABLE system_load ADD COLUMN pre_prod_load_status TEXT;
ALTER TABLE system_load_history ADD COLUMN pre_prod_load_status TEXT;
CREATE OR REPLACE VIEW advance_search_view AS SELECT string_agg(DISTINCT lsegments.program_name, ', '::text) AS programname,lplan.id AS planid,lplan.active,string_agg(DISTINCT limpl.id, ', '::text) AS implid,lsystem.id AS systemid,lplan.lead_id AS developerlead,string_agg(DISTINCT limpl.dev_id, ', '::text) AS developer,string_agg(DISTINCT limpl.peer_reviewers, ', '::text) AS peerreviewer,lplan.dev_manager AS devmanager,string_agg(DISTINCT lplan.plan_desc, ', '::text) AS plandescription,lplan.fallback_date_time AS fallbackdatetime,string_agg(DISTINCT lplan.plan_status, ', '::text) AS planstatus,lprodloads.activated_date_time AS activateddatetime,lsystemloads.load_date_time AS loaddatetime,lsystem.name AS targetsystem,string_agg(DISTINCT limpl.dev_name, ', '::text) AS developername, CASE WHEN lsystemloads.qa_bypass_status IS NULL OR lsystemloads.qa_bypass_status = 'NONE' THEN 'NO'::text ELSE 'YES'::text END AS qastatus,lsystemloads.load_instruction AS loadinstruction,lplan.lead_name AS leadname,lplan.dev_manager_name AS managername,lc.name AS loadcategory,dbcr.dbcr_name AS dbcrname,lsystemloads.load_attendee AS loadattendee,string_agg(DISTINCT lsegments.func_area, ', '::text) AS functionalarea,string_agg(DISTINCT lproj.project_number, ', '::text) AS csrnumber,string_agg(DISTINCT lproj.project_name, ', '::text) AS projectname , case when (lplan.sdm_tkt_num = limpl.pr_tkt_num) then lplan.sdm_tkt_num else ARRAY_TO_STRING( ARRAY_AGG(DISTINCT CONCAT(lplan.sdm_tkt_num, ' ,', limpl.pr_tkt_num)), ', ' :: text) end AS problemticketnum  FROM system_load lsystemloads LEFT JOIN production_loads lprodloads ON lsystemloads.plan_id = lprodloads.plan_id LEFT JOIN dbcr dbcr ON lsystemloads.plan_id = dbcr.plan_id LEFT JOIN load_categories lc ON lc.id = lsystemloads.load_category_id,system lsystem,imp_plan lplan, project lproj, implementation limpl LEFT JOIN checkout_segments lsegments ON limpl.id = lsegments.imp_id WHERE (lsegments.plan_id = lsystemloads.plan_id OR lsegments.plan_id IS NULL) AND limpl.active::text = 'Y'::text AND lplan.active::text = 'Y'::text AND lsystemloads.active::text = 'Y'::text AND (lsegments.active::text = 'Y'::text OR lsegments.active IS NULL) AND lsystem.id = lsystemloads.system_id AND (lsegments.target_system = lsystem.name::text OR lsegments.target_system IS NULL) AND lplan.id = lsystemloads.plan_id AND limpl.plan_id = lsystemloads.plan_id AND lproj.id = lplan.project_id GROUP BY lplan.id, lsystem.name, lsystem.id, lplan.dev_manager, lplan.fallback_date_time, lprodloads.activated_date_time, lsystemloads.load_date_time, lsystemloads.load_instruction, lc.name, dbcr.dbcr_name, lsystemloads.load_attendee, lsystemloads.qa_bypass_status,limpl.pr_tkt_num;
ALTER TABLE imp_plan ADD COLUMN  stackholder_email TEXT;
ALTER TABLE imp_plan_history ADD COLUMN  stackholder_email TEXT;
CREATE OR REPLACE VIEW load_freeze_group AS SELECT array_to_string(array_agg(a.id), ','::text) AS ids, c.name, array_to_string(array_agg(b.name), ','::text) AS load_categories, a.reason, a.from_date, a.to_date, array_to_string(array_agg(a.load_category_id), ','::text) AS loadcategoryid,b.system_id as systemid FROM load_freeze a, load_categories b, system c WHERE a.load_category_id = b.id AND c.id = b.system_id AND a.active::text = 'Y'::text AND b.active::text = 'Y'::text GROUP BY a.reason, a.from_date, a.to_date, c.id,b.system_id;
ALTER TABLE imp_plan ADD COLUMN load_date_macro_mail_flag BOOLEAN default false;
ALTER TABLE imp_plan_history ADD COLUMN load_date_macro_mail_flag BOOLEAN default false;
ALTER TABLE put_level ADD COLUMN deployment_date_mail_flag BOOLEAN default false;
ALTER TABLE put_level_history ADD COLUMN deployment_date_mail_flag BOOLEAN default false;
CREATE OR replace VIEW pre_prod_segment_based_action_view AS ( (SELECT impplan.id AS id, LOAD.id AS loadid, sys.id AS sysid, pre.id AS preid, seg.id AS segid, imp.id AS impid, cat.id AS catid, impplan.plan_desc AS plandesc, impplan.load_type AS loadtype, impplan.lead_id AS leadid, impplan.active AS impplanactive, impplan.plan_status AS planstatus, impplan.fallback_date_time AS fallbackdatetime, impplan.lead_name AS leadname, impplan.dev_manager_name devmanagername, LOAD.active AS loadactive, LOAD.load_set_name AS loadsetname, LOAD.fallback_load_set_name AS fallbackloadsetname, LOAD.load_attendee AS loadattendee, sys.platform_id AS platformid, sys.id AS systemid, sys.NAME AS sysname, seg.program_name AS programname, seg.repo_desc AS repodesc, seg.func_area AS funcarea, seg.target_system AS targetsystem, imp.dev_name AS devname, pre.status productionstatus, pre.last_action_status AS lastactionstatus, cat.NAME AS catname, pre.modified_dt AS modifieddate, LOAD.load_date_time AS loaddatetime, imp.peer_reviewers_name AS peerreviewer, pro.project_number AS csrno, pro.project_name AS projectname, LOAD.qa_bypass_status AS qastatus, LOAD.load_instruction as loadinstruction FROM imp_plan impplan, system_load LOAD, system sys, pre_production_loads_history pre, checkout_segments seg, implementation imp, load_categories cat, project pro WHERE LOAD.plan_id = impplan.id AND pre.plan_id = impplan.id AND sys.id = LOAD.system_id AND sys.id = pre.system_id AND seg.plan_id = impplan.id AND seg.system_load = LOAD.id AND imp.plan_id = impplan.id AND seg.imp_id = imp.id AND sys.NAME = seg.target_system AND cat.id = LOAD.load_category_id AND cat.system_id = LOAD.system_id AND impplan.project_id = pro.id AND imp.active='Y' AND impplan.active='Y' AND LOAD.active='Y' AND sys.active='Y' AND pre.active='Y' AND seg.active='Y' AND cat.active='Y' ) UNION ALL ( SELECT impplan.id AS id, LOAD.id AS loadid, sys.id AS sysid, pre.id AS preid, seg.id AS segid, imp.id AS impid, cat.id AS catid, impplan.plan_desc AS plandesc, impplan.load_type AS loadtype, impplan.lead_id AS leadid, impplan.active AS impplanactive, impplan.plan_status AS planstatus, impplan.fallback_date_time AS fallbackdatetime, impplan.lead_name AS leadname, impplan.dev_manager_name devmanagername, LOAD.active AS loadactive, LOAD.load_set_name AS loadsetname, LOAD.fallback_load_set_name AS fallbackloadsetname, LOAD.load_attendee AS loadattendee, sys.platform_id AS platformid, sys.id AS systemid, sys.NAME AS sysname, seg.program_name AS programname, seg.repo_desc AS repodesc, seg.func_area AS funcarea, seg.target_system AS targetsystem, imp.dev_name AS devname, pre.status productionstatus, pre.last_action_status AS lastactionstatus, cat.NAME AS catname, pre.modified_dt AS modifieddate, LOAD.load_date_time AS loaddatetime, imp.peer_reviewers_name AS peerreviewer, pro.project_number AS csrno, pro.project_name AS projectname, LOAD.qa_bypass_status AS qastatus, LOAD.load_instruction as loadinstruction FROM imp_plan impplan, system_load LOAD, system sys, system_load_actions_history pre, checkout_segments seg, implementation imp, load_categories cat, project pro, vpars vp WHERE LOAD.plan_id = impplan.id AND pre.plan_id = impplan.id AND pre.vpar_id = vp.id AND vp.type = 'PRE_PROD' AND vp.system_id = sys.id AND sys.id = LOAD.system_id AND sys.id = pre.system_id AND seg.plan_id = impplan.id AND seg.system_load = LOAD.id AND imp.plan_id = impplan.id AND seg.imp_id = imp.id AND sys.NAME = seg.target_system AND cat.id = LOAD.load_category_id AND cat.system_id = LOAD.system_id AND impplan.project_id = pro.id AND imp.active='Y' AND impplan.active='Y' AND LOAD.active='Y' AND sys.active='Y' AND pre.active='Y' AND seg.active='Y' AND cat.active='Y' AND vp.active = 'Y'));
CREATE TABLE online_build ( id SERIAL PRIMARY KEY, system_id integer, plan_id text, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone, build_type character varying(10), load_set_type character varying(10), jenkins_url text, build_status character varying(20), job_status character varying(1), build_number integer, build_date_time timestamp without time zone );
ALTER TABLE imp_plan ADD COLUMN deactivate_tsd_mail_flag BOOLEAN default false;
ALTER TABLE imp_plan_history ADD COLUMN deactivate_tsd_mail_flag BOOLEAN default false;
ALTER TABLE system_cpu  ADD COLUMN default_cpu  character varying(1);
ALTER TABLE system_cpu_history  ADD COLUMN default_cpu  character varying(1);
ALTER TABLE vpars  ADD COLUMN default_cpu character varying(1);
ALTER TABLE vpars_history  ADD COLUMN default_cpu character varying(1);
UPDATE system_cpu SET default_cpu='N'
UPDATE vpars SET default_cpu='N'
ALTER TABLE vpars ADD COLUMN qa_vpars BOOLEAN default false;
ALTER TABLE vpars_history ADD COLUMN qa_vpars BOOLEAN default false;
ALTER TABLE system_load  ADD COLUMN ipl_required character varying;
ALTER TABLE system_load_history  ADD COLUMN ipl_required character varying;
CREATE OR REPLACE VIEW advance_search_view AS SELECT string_agg(DISTINCT lsegments.program_name, ', '::text) AS programname,lplan.id AS planid,lplan.active,string_agg(DISTINCT limpl.id, ', '::text) AS implid,lsystem.id AS systemid,lplan.lead_id AS developerlead,string_agg(DISTINCT limpl.dev_id, ', '::text) AS developer,string_agg(DISTINCT limpl.peer_reviewers, ', '::text) AS peerreviewer,lplan.dev_manager AS devmanager,string_agg(DISTINCT lplan.plan_desc, ', '::text) AS plandescription,lplan.fallback_date_time AS fallbackdatetime,string_agg(DISTINCT lplan.plan_status, ', '::text) AS planstatus,lprodloads.activated_date_time AS activateddatetime,lsystemloads.load_date_time AS loaddatetime,lsystem.name AS targetsystem,string_agg(DISTINCT limpl.dev_name, ', '::text) AS developername, CASE WHEN lsystemloads.qa_bypass_status IS NULL OR lsystemloads.qa_bypass_status = 'NONE' THEN 'NO'::text ELSE 'YES'::text END AS qastatus,lsystemloads.load_instruction AS loadinstruction,lplan.lead_name AS leadname,lplan.dev_manager_name AS managername,lc.name AS loadcategory,dbcr.dbcr_name AS dbcrname,lsystemloads.load_attendee AS loadattendee,string_agg(DISTINCT lsegments.func_area, ', '::text) AS functionalarea,string_agg(DISTINCT lproj.project_number, ', '::text) AS csrnumber,string_agg(DISTINCT lproj.project_name, ', '::text) AS projectname , case when (lplan.sdm_tkt_num = limpl.pr_tkt_num) then lplan.sdm_tkt_num else ARRAY_TO_STRING( ARRAY_AGG(DISTINCT CONCAT(lplan.sdm_tkt_num, ' ,', limpl.pr_tkt_num)), ', ' :: text) end AS problemticketnum  FROM system_load lsystemloads LEFT JOIN production_loads lprodloads ON lsystemloads.plan_id = lprodloads.plan_id LEFT JOIN dbcr dbcr ON lsystemloads.plan_id = dbcr.plan_id LEFT JOIN load_categories lc ON lc.id = lsystemloads.load_category_id,system lsystem,imp_plan lplan, project lproj, implementation limpl LEFT JOIN checkout_segments lsegments ON limpl.id = lsegments.imp_id WHERE (lsegments.plan_id = lsystemloads.plan_id OR lsegments.plan_id IS NULL) AND limpl.active::text = 'Y'::text AND lplan.active::text = 'Y'::text AND lsystemloads.active::text = 'Y'::text AND (lsegments.active::text = 'Y'::text OR lsegments.active IS NULL) AND lsystem.id = lsystemloads.system_id AND (lsegments.target_system = lsystem.name::text OR lsegments.target_system IS NULL) AND lplan.id = lsystemloads.plan_id AND limpl.plan_id = lsystemloads.plan_id AND lproj.id = lplan.project_id GROUP BY lplan.id, lsystem.name, lsystem.id, lplan.dev_manager, lplan.fallback_date_time, lprodloads.activated_date_time, lsystemloads.load_date_time, lsystemloads.load_instruction, lc.name, dbcr.dbcr_name, lsystemloads.load_attendee, lsystemloads.qa_bypass_status,limpl.pr_tkt_num;
ALTER TABLE imp_plan ADD COLUMN inprogress_status TEXT;
ALTER TABLE imp_plan_history ADD COLUMN inprogress_status TEXT;
ALTER TABLE imp_plan ADD COLUMN is_accept_enabled BOOLEAN default false;
ALTER TABLE imp_plan_history ADD COLUMN is_accept_enabled BOOLEAN default false;
UPDATE imp_plan set is_accept_enabled = false;
UPDATE imp_plan set inprogress_status = 'NONE';
ALTER TABLE production_loads ADD COLUMN primary_tos_req TEXT;
ALTER TABLE production_loads_history ADD COLUMN primary_tos_req TEXT;
ALTER TABLE production_loads ADD COLUMN secondary_tos_req TEXT;
ALTER TABLE production_loads_history ADD COLUMN secondary_tos_req TEXT;
ALTER TABLE pre_production_loads ADD COLUMN primary_tos_req TEXT;
ALTER TABLE pre_production_loads_history ADD COLUMN primary_tos_req TEXT;
ALTER TABLE pre_production_loads ADD COLUMN secondary_tos_req TEXT;
ALTER TABLE pre_production_loads_history ADD COLUMN secondary_tos_req TEXT;
ALTER TABLE imp_plan ADD COLUMN approve_request_date_time timestamp without time zone;
ALTER TABLE implementation ADD COLUMN review_request_date_time timestamp without time zone;
ALTER TABLE imp_plan_history ADD COLUMN approve_request_date_time timestamp without time zone;
ALTER TABLE implementation_history ADD COLUMN review_request_date_time timestamp without time zone;
ALTER TABLE imp_plan ADD COLUMN approve_mail_flag BOOLEAN default false;
ALTER TABLE implementation ADD COLUMN review_mail_flag BOOLEAN default false;
ALTER TABLE imp_plan_history ADD COLUMN approve_mail_flag BOOLEAN default false;
ALTER TABLE implementation_history ADD COLUMN review_mail_flag BOOLEAN default false;
ALTER TABLE project  ADD COLUMN maintance_flag character varying;
ALTER TABLE imp_plan ADD COLUMN deployment_status TEXT;
ALTER TABLE imp_plan_history ADD COLUMN deployment_status TEXT;
UPDATE imp_plan set deployed_mail_flag = false;
CREATE TABLE gi_ports ( id SERIAL PRIMARY KEY, user_id text, port_no integer, active character varying(1), created_by character varying(50), created_dt timestamp without time zone, modified_by character varying(50), modified_dt timestamp without time zone );
ALTER TABLE checkout_segments ADD COLUMN so_name TEXT;
ALTER TABLE checkout_segments_history ADD COLUMN so_name TEXT;
UPDATE imp_plan set deployment_status = 'NONE';
ALTER TABLE imp_plan ADD COLUMN deployed_mail_flag BOOLEAN default false;
ALTER TABLE imp_plan_history ADD COLUMN deployed_mail_flag BOOLEAN default false;
ALTER TABLE project ADD COLUMN manager_name TEXT;
ALTER TABLE system ADD alias_name varchar(3);
ALTER TABLE system_history ADD alias_name varchar(3);
UPDATE public.system set alias_name = 'TD1' where name in ('AIR','RES','OSS');
UPDATE public.system set alias_name = 'TD3' where name in ('APO','PGR','PRE');
UPDATE public.system set alias_name = 'TD2' where name in ('WSP');
ALTER TABLE load_window ALTER COLUMN time_slot TYPE text;
ALTER TABLE gi_ports ADD COLUMN ip_addr TEXT;
ALTER TABLE checkout_segments ADD COLUMN last_changed_time timestamp without time zone;
ALTER TABLE imp_plan ADD COLUMN full_build_dt timestamp without time zone;
ALTER TABLE checkout_segments_history ADD COLUMN last_changed_time timestamp without time zone;
ALTER TABLE imp_plan_history ADD COLUMN full_build_dt timestamp without time zone;
CREATE TABLE public.rfc_details (id SERIAL PRIMARY KEY,system_load_id integer,plan_id text,rfc_number text,rfc_desc text,impact_level text,config_item text,vs_flag boolean,vs_area text,vs_desc text,is_test_script_attached boolean,is_business_approval_attached boolean,ready_to_schedule boolean,vs_test_flag boolean,active character(1),created_by text,created_dt date,modified_by text,modified_dt date,CONSTRAINT rfc_details_system_load_id_fkey FOREIGN KEY (system_load_id) REFERENCES public.system_load (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION );
ALTER TABLE imp_plan ADD COLUMN rfc_flag boolean DEFAULT FALSE;
ALTER TABLE imp_plan_history ADD COLUMN rfc_flag boolean DEFAULT FALSE;
ALTER TABLE imp_plan ADD COLUMN rfc_mail_flag boolean DEFAULT FALSE;
ALTER TABLE imp_plan_history ADD COLUMN rfc_mail_flag boolean DEFAULT FALSE;
ALTER TABLE system_load ADD COLUMN load_attendee_contact character varying(12);
ALTER TABLE system_load_history ADD COLUMN load_attendee_contact character varying(12);
CREATE TABLE rfc_config_values (id SERIAL PRIMARY KEY,config_name text,active character(1),created_by text,created_dt date,modified_by text,modified_dt date );
CREATE OR REPLACE VIEW advance_search_view AS SELECT string_agg(DISTINCT lsegments.program_name, ', '::text) AS programname,lplan.id AS planid,lplan.active,string_agg(DISTINCT limpl.id, ', '::text) AS implid,lsystem.id AS systemid,lplan.lead_id AS developerlead,string_agg(DISTINCT limpl.dev_id, ', '::text) AS developer,string_agg(DISTINCT limpl.peer_reviewers, ', '::text) AS peerreviewer,lplan.dev_manager AS devmanager,string_agg(DISTINCT lplan.plan_desc, ', '::text) AS plandescription,lplan.fallback_date_time AS fallbackdatetime,string_agg(DISTINCT lplan.plan_status, ', '::text) AS planstatus,lprodloads.activated_date_time AS activateddatetime,lsystemloads.load_date_time AS loaddatetime,lsystem.name AS targetsystem,string_agg(DISTINCT limpl.dev_name, ', '::text) AS developername, CASE WHEN lsystemloads.qa_bypass_status IS NULL OR lsystemloads.qa_bypass_status = 'NONE' THEN 'NO'::text ELSE 'YES'::text END AS qastatus,lsystemloads.load_instruction AS loadinstruction,lplan.lead_name AS leadname,lplan.dev_manager_name AS managername,lc.name AS loadcategory,dbcr.dbcr_name AS dbcrname,lsystemloads.load_attendee AS loadattendee,string_agg(DISTINCT lsegments.func_area, ', '::text) AS functionalarea,string_agg(DISTINCT lproj.project_number, ', '::text) AS csrnumber,string_agg(DISTINCT lproj.project_name, ', '::text) AS projectname , case when (lplan.sdm_tkt_num = limpl.pr_tkt_num) then lplan.sdm_tkt_num else ARRAY_TO_STRING( ARRAY_AGG(DISTINCT CONCAT(lplan.sdm_tkt_num, ' ,', limpl.pr_tkt_num)), ', ' :: text) end AS problemticketnum  FROM system_load lsystemloads LEFT JOIN production_loads lprodloads ON lsystemloads.plan_id = lprodloads.plan_id LEFT JOIN dbcr dbcr ON lsystemloads.plan_id = dbcr.plan_id  and lsystemloads.system_id=dbcr.system_id LEFT JOIN load_categories lc ON lc.id = lsystemloads.load_category_id,system lsystem,imp_plan lplan, project lproj, implementation limpl LEFT JOIN checkout_segments lsegments ON limpl.id = lsegments.imp_id WHERE (lsegments.plan_id = lsystemloads.plan_id OR lsegments.plan_id IS NULL) AND limpl.active::text = 'Y'::text AND lplan.active::text = 'Y'::text AND lsystemloads.active::text = 'Y'::text AND (lsegments.active::text = 'Y'::text OR lsegments.active IS NULL) AND lsystem.id = lsystemloads.system_id AND (lsegments.target_system = lsystem.name::text OR lsegments.target_system IS NULL) AND lplan.id = lsystemloads.plan_id AND limpl.plan_id = lsystemloads.plan_id AND lproj.id = lplan.project_id GROUP BY lplan.id, lsystem.name, lsystem.id, lplan.dev_manager, lplan.fallback_date_time, lprodloads.activated_date_time, lsystemloads.load_date_time, lsystemloads.load_instruction, lc.name, dbcr.dbcr_name, lsystemloads.load_attendee, lsystemloads.qa_bypass_status,limpl.pr_tkt_num;
ALTER TABLE imp_plan ADD COLUMN rejected_date_time timestamp without time zone;
ALTER TABLE imp_plan_history ADD COLUMN rejected_date_time timestamp without time zone;
CREATE OR REPLACE VIEW advance_search_view AS  SELECT string_agg(DISTINCT lsegments.program_name, ', '::TEXT) AS programname,lplan.id AS planid,lplan.active,string_agg(DISTINCT limpl.id, ', '::TEXT) AS implid,lsystem.id AS systemid,lplan.lead_id AS developerlead,limpl.dev_id AS developer,limpl.peer_reviewers AS peerreviewer,lplan.dev_manager AS devmanager,string_agg(DISTINCT lplan.plan_desc, ', '::TEXT) AS plandescription,lplan.fallback_date_time AS fallbackdatetime,string_agg(DISTINCT lplan.plan_status, ', '::TEXT) AS planstatus,lprodloads.activated_date_time AS activateddatetime,lsystemloads.load_date_time AS loaddatetime,lsystem.name AS targetsystem,limpl.dev_name AS developername,CASE WHEN lsystemloads.qa_bypass_status IS NULL	OR lsystemloads.qa_bypass_status = 'NONE' THEN 'NO'::TEXT	ELSE 'YES'::TEXT END AS qastatus,lsystemloads.load_instruction AS loadinstruction,lplan.lead_name AS leadname,lplan.dev_manager_name AS managername,lc.name AS loadcategory,dbcr.dbcr_name AS dbcrname,lsystemloads.load_attendee_id  AS loadattendee,string_agg(DISTINCT lsegments.func_area, ', '::TEXT) AS functionalarea,string_agg(DISTINCT lproj.project_number, ', '::TEXT) AS csrnumber,string_agg(DISTINCT lproj.project_name, ', '::TEXT) AS projectname,CASE WHEN (lplan.sdm_tkt_num = limpl.pr_tkt_num)	THEN lplan.sdm_tkt_num	ELSE ARRAY_TO_STRING(ARRAY_AGG(DISTINCT CONCAT (lplan.sdm_tkt_num,' ,',limpl.pr_tkt_num	)), ', '::TEXT)	END AS problemticketnum FROM system_load lsystemloads LEFT JOIN production_loads lprodloads ON lsystemloads.plan_id = lprodloads.plan_id LEFT JOIN dbcr dbcr ON lsystemloads.plan_id = dbcr.plan_id LEFT JOIN load_categories lc ON lc.id = lsystemloads.load_category_id,system lsystem,imp_plan lplan,project lproj,implementation limpl LEFT JOIN checkout_segments lsegments ON limpl.id = lsegments.imp_id WHERE ( lsegments.plan_id = lsystemloads.plan_id OR lsegments.plan_id IS NULL ) AND limpl.active::TEXT = 'Y'::TEXT	AND lplan.active::TEXT = 'Y'::TEXT AND lsystemloads.active::TEXT = 'Y'::TEXT AND ( lsegments.active::TEXT = 'Y'::TEXT OR lsegments.active IS NULL	)AND lsystem.id = lsystemloads.system_id	AND ( lsegments.target_system = lsystem.name::TEXT OR lsegments.target_system IS NULL) AND lplan.id = lsystemloads.plan_id	AND limpl.plan_id = lsystemloads.plan_id AND lproj.id = lplan.project_id GROUP BY lplan.id,lsystem.name,lsystem.id,lplan.lead_id,limpl.dev_name,lplan.dev_manager,limpl.peer_reviewers,limpl.dev_id,lplan.fallback_date_time,lprodloads.activated_date_time,lsystemloads.load_date_time,lsystemloads.load_instruction,lc.name,dbcr.dbcr_name,lsystemloads.load_attendee_id,lsystemloads.qa_bypass_status,limpl.pr_tkt_num;